
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007390  08007390  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001ec  08007584  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08007584  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a03  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003204  00000000  00000000  00032c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00035e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b7b  00000000  00000000  000378f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e447  00000000  00000000  0004f46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dc8f  00000000  00000000  0005d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff8  00000000  00000000  000eb5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071e8 	.word	0x080071e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080071e8 	.word	0x080071e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <sendAiwaRCT501>:
#define AIWA_RC_T501_ZERO_SPACE  1700

//+=============================================================================
#if SEND_AIWA_RC_T501
void sendAiwaRCT501(int code)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	unsigned long  pre = 0x0227EEC0;  // 26-bits
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <sendAiwaRCT501+0xc0>)
 8000eb6:	60fb      	str	r3, [r7, #12]
	//int mask;

	// Set IR carrier frequency
	enableIROut(AIWA_RC_T501_HZ);
 8000eb8:	2026      	movs	r0, #38	; 0x26
 8000eba:	f001 fea1 	bl	8002c00 <enableIROut>

	// Header
	mark(AIWA_RC_T501_HDR_MARK);
 8000ebe:	f242 2060 	movw	r0, #8800	; 0x2260
 8000ec2:	f001 fe75 	bl	8002bb0 <mark>
	space(AIWA_RC_T501_HDR_SPACE);
 8000ec6:	f241 1094 	movw	r0, #4500	; 0x1194
 8000eca:	f001 fe85 	bl	8002bd8 <space>

	// Send "pre" data
	for(unsigned long  mask = 1UL << (26 - 1); mask; mask >>= 1)
 8000ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e014      	b.n	8000f00 <sendAiwaRCT501+0x54>
	{
		mark(AIWA_RC_T501_BIT_MARK);
 8000ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eda:	f001 fe69 	bl	8002bb0 <mark>
		if(pre & mask) space(AIWA_RC_T501_ONE_SPACE);
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <sendAiwaRCT501+0x46>
 8000ee8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000eec:	f001 fe74 	bl	8002bd8 <space>
 8000ef0:	e003      	b.n	8000efa <sendAiwaRCT501+0x4e>
		else space(AIWA_RC_T501_ZERO_SPACE);
 8000ef2:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8000ef6:	f001 fe6f 	bl	8002bd8 <space>
	for(unsigned long  mask = 1UL << (26 - 1); mask; mask >>= 1)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1e7      	bne.n	8000ed6 <sendAiwaRCT501+0x2a>
//    it only send 15bits and ignores the top bit
//    then uses TOPBIT which is 0x80000000 to check the bit code
//    I suspect TOPBIT should be changed to 0x00008000

	// Skip first code bit
	code <<= 1;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
	// Send code
	for(int i = 0; i < 15; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	e015      	b.n	8000f3e <sendAiwaRCT501+0x92>
	{
		mark(AIWA_RC_T501_BIT_MARK);
 8000f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f16:	f001 fe4b 	bl	8002bb0 <mark>
		if(code & 0x80000000) space(AIWA_RC_T501_ONE_SPACE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da04      	bge.n	8000f2a <sendAiwaRCT501+0x7e>
 8000f20:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f24:	f001 fe58 	bl	8002bd8 <space>
 8000f28:	e003      	b.n	8000f32 <sendAiwaRCT501+0x86>
		else space(AIWA_RC_T501_ZERO_SPACE);
 8000f2a:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8000f2e:	f001 fe53 	bl	8002bd8 <space>
		code <<= 1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 15; i++)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2b0e      	cmp	r3, #14
 8000f42:	dde6      	ble.n	8000f12 <sendAiwaRCT501+0x66>
	}

//-^- THIS CODE LOOKS LIKE IT MIGHT BE WRONG - CHECK!

	// POST-DATA, 1 bit, 0x0
	mark(AIWA_RC_T501_BIT_MARK);
 8000f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f48:	f001 fe32 	bl	8002bb0 <mark>
	space(AIWA_RC_T501_ZERO_SPACE);
 8000f4c:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8000f50:	f001 fe42 	bl	8002bd8 <space>

	mark(AIWA_RC_T501_BIT_MARK);
 8000f54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f58:	f001 fe2a 	bl	8002bb0 <mark>
	space(0);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f001 fe3b 	bl	8002bd8 <space>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0227eec0 	.word	0x0227eec0

08000f70 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	int  data   = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
	int  offset = 1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 8000f80:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <decodeAiwaRCT501+0x138>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b57      	cmp	r3, #87	; 0x57
 8000f88:	d801      	bhi.n	8000f8e <decodeAiwaRCT501+0x1e>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e087      	b.n	800109e <decodeAiwaRCT501+0x12e>

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1c59      	adds	r1, r3, #1
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f242 2160 	movw	r1, #8800	; 0x2260
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fb71 	bl	800268c <MATCH_MARK>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <decodeAiwaRCT501+0x44>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e074      	b.n	800109e <decodeAiwaRCT501+0x12e>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c59      	adds	r1, r3, #1
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f241 1194 	movw	r1, #4500	; 0x1194
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fb6c 	bl	80026a8 <MATCH_SPACE>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <decodeAiwaRCT501+0x6a>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e061      	b.n	800109e <decodeAiwaRCT501+0x12e>

	offset += 26;  // skip pre-data - optional
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	331a      	adds	r3, #26
 8000fde:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8000fe0:	e03e      	b.n	8001060 <decodeAiwaRCT501+0xf0>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fb49 	bl	800268c <MATCH_MARK>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d012      	beq.n	8001026 <decodeAiwaRCT501+0xb6>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fb45 	bl	80026a8 <MATCH_SPACE>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <decodeAiwaRCT501+0xc6>
 8001024:	e001      	b.n	800102a <decodeAiwaRCT501+0xba>
		else                                                             return false ;
 8001026:	2300      	movs	r3, #0
 8001028:	e039      	b.n	800109e <decodeAiwaRCT501+0x12e>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e011      	b.n	800105a <decodeAiwaRCT501+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fb2d 	bl	80026a8 <MATCH_SPACE>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00d      	beq.n	8001070 <decodeAiwaRCT501+0x100>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
		else                                                                     break ;  // End of one & zero detected
		offset++;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3301      	adds	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <decodeAiwaRCT501+0x138>)
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	3b04      	subs	r3, #4
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbb9      	blt.n	8000fe2 <decodeAiwaRCT501+0x72>
 800106e:	e000      	b.n	8001072 <decodeAiwaRCT501+0x102>
		else                                                                     break ;  // End of one & zero detected
 8001070:	bf00      	nop
	}

	results->bits = (offset - 1) / 2;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3b01      	subs	r3, #1
 8001076:	0fda      	lsrs	r2, r3, #31
 8001078:	4413      	add	r3, r2
 800107a:	105b      	asrs	r3, r3, #1
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	811a      	strh	r2, [r3, #8]
	if (results->bits < 42)  return false ;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001088:	2b29      	cmp	r3, #41	; 0x29
 800108a:	dc01      	bgt.n	8001090 <decodeAiwaRCT501+0x120>
 800108c:	2300      	movs	r3, #0
 800108e:	e006      	b.n	800109e <decodeAiwaRCT501+0x12e>

	results->value       = data;
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]
	results->decode_type = AIWA_RC_T501;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2209      	movs	r2, #9
 800109a:	701a      	strb	r2, [r3, #0]
	return true;
 800109c:	2301      	movs	r3, #1
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000230 	.word	0x20000230

080010ac <sendDenon>:

//+=============================================================================
//
#if SEND_DENON
void sendDenon(unsigned long data, int nbits)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(38);
 80010b6:	2026      	movs	r0, #38	; 0x26
 80010b8:	f001 fda2 	bl	8002c00 <enableIROut>

	// Header
	mark (HDR_MARK);
 80010bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010c0:	f001 fd76 	bl	8002bb0 <mark>
	space(HDR_SPACE);
 80010c4:	f240 20ee 	movw	r0, #750	; 0x2ee
 80010c8:	f001 fd86 	bl	8002bd8 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e018      	b.n	800110c <sendDenon+0x60>
	{
		if(data & mask)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <sendDenon+0x4a>
		{
			mark (BIT_MARK);
 80010e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010e8:	f001 fd62 	bl	8002bb0 <mark>
			space(ONE_SPACE);
 80010ec:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80010f0:	f001 fd72 	bl	8002bd8 <space>
 80010f4:	e007      	b.n	8001106 <sendDenon+0x5a>
		}
		else
		{
			mark (BIT_MARK);
 80010f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010fa:	f001 fd59 	bl	8002bb0 <mark>
			space(ZERO_SPACE);
 80010fe:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001102:	f001 fd69 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	085b      	lsrs	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e3      	bne.n	80010da <sendDenon+0x2e>
		}
	}

	// Footer
	mark(BIT_MARK);
 8001112:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001116:	f001 fd4b 	bl	8002bb0 <mark>
    space(0);  // Always end with the LED off
 800111a:	2000      	movs	r0, #0
 800111c:	f001 fd5c 	bl	8002bd8 <space>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	unsigned long data   = 0;  // Somewhere to build our code
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
	int offset = 1;  // Skip the Gap reading
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 8001138:	4b41      	ldr	r3, [pc, #260]	; (8001240 <decodeDenon+0x118>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	d001      	beq.n	8001146 <decodeDenon+0x1e>
 8001142:	2300      	movs	r3, #0
 8001144:	e078      	b.n	8001238 <decodeDenon+0x110>

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1c59      	adds	r1, r3, #1
 800114e:	6139      	str	r1, [r7, #16]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa95 	bl	800268c <MATCH_MARK>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <decodeDenon+0x44>
 8001168:	2300      	movs	r3, #0
 800116a:	e065      	b.n	8001238 <decodeDenon+0x110>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	6139      	str	r1, [r7, #16]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fa90 	bl	80026a8 <MATCH_SPACE>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <decodeDenon+0x6a>
 800118e:	2300      	movs	r3, #0
 8001190:	e052      	b.n	8001238 <decodeDenon+0x110>

	// Read the bits in
	for(int i = 0; i < BITS; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e042      	b.n	800121e <decodeDenon+0xf6>
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1c59      	adds	r1, r3, #1
 80011a0:	6139      	str	r1, [r7, #16]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fa6c 	bl	800268c <MATCH_MARK>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <decodeDenon+0x96>
 80011ba:	2300      	movs	r3, #0
 80011bc:	e03c      	b.n	8001238 <decodeDenon+0x110>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fa69 	bl	80026a8 <MATCH_SPACE>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <decodeDenon+0xc0>
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	e014      	b.n	8001212 <decodeDenon+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f240 21ee 	movw	r1, #750	; 0x2ee
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fa54 	bl	80026a8 <MATCH_SPACE>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <decodeDenon+0xe6>
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e001      	b.n	8001212 <decodeDenon+0xea>
		else return false;
 800120e:	2300      	movs	r3, #0
 8001210:	e012      	b.n	8001238 <decodeDenon+0x110>
		offset++;
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3301      	adds	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < BITS; i++)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b0d      	cmp	r3, #13
 8001222:	ddb9      	ble.n	8001198 <decodeDenon+0x70>
	}

	// Success
	results->bits = BITS;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	220e      	movs	r2, #14
 8001228:	811a      	strh	r2, [r3, #8]
	results->value = data;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	605a      	str	r2, [r3, #4]
	results->decode_type = DENON;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	220f      	movs	r2, #15
 8001234:	701a      	strb	r2, [r3, #0]
	return true;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000230 	.word	0x20000230

08001244 <sendJVC>:
// To send a JVC repeat signal, send the original code value
//   and set 'repeat' to true
//
#if SEND_JVC
void sendJVC(unsigned long data, int nbits, uint8_t repeat)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	71fb      	strb	r3, [r7, #7]
	// Set IR carrier frequency
	enableIROut(38);
 8001252:	2026      	movs	r0, #38	; 0x26
 8001254:	f001 fcd4 	bl	8002c00 <enableIROut>

	// Only send the Header if this is NOT a repeat command
	if (!repeat){
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d107      	bne.n	800126e <sendJVC+0x2a>
		mark(JVC_HDR_MARK);
 800125e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001262:	f001 fca5 	bl	8002bb0 <mark>
		space(JVC_HDR_SPACE);
 8001266:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800126a:	f001 fcb5 	bl	8002bd8 <space>
	}

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	2201      	movs	r2, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e018      	b.n	80012ae <sendJVC+0x6a>
		if (data & mask) {
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <sendJVC+0x54>
			mark(JVC_BIT_MARK);
 8001286:	f44f 7016 	mov.w	r0, #600	; 0x258
 800128a:	f001 fc91 	bl	8002bb0 <mark>
			space(JVC_ONE_SPACE);
 800128e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001292:	f001 fca1 	bl	8002bd8 <space>
 8001296:	e007      	b.n	80012a8 <sendJVC+0x64>
		} else {
			mark(JVC_BIT_MARK);
 8001298:	f44f 7016 	mov.w	r0, #600	; 0x258
 800129c:	f001 fc88 	bl	8002bb0 <mark>
			space(JVC_ZERO_SPACE);
 80012a0:	f240 2026 	movw	r0, #550	; 0x226
 80012a4:	f001 fc98 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1e3      	bne.n	800127c <sendJVC+0x38>
		}
	}

	// Footer
    mark(JVC_BIT_MARK);
 80012b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80012b8:	f001 fc7a 	bl	8002bb0 <mark>
    space(0);  // Always end with the LED off
 80012bc:	2000      	movs	r0, #0
 80012be:	f001 fc8b 	bl	8002bd8 <space>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	long data   = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK))
 80012dc:	4b64      	ldr	r3, [pc, #400]	; (8001470 <decodeJVC+0x1a4>)
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b22      	cmp	r3, #34	; 0x22
 80012e4:	d12e      	bne.n	8001344 <decodeJVC+0x78>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 f9c7 	bl	800268c <MATCH_MARK>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d01f      	beq.n	8001344 <decodeJVC+0x78>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <decodeJVC+0x1a4>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001312:	3b01      	subs	r3, #1
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001320:	4618      	mov	r0, r3
 8001322:	f001 f9b3 	bl	800268c <MATCH_MARK>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <decodeJVC+0x78>
	{
		results->bits = 0;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2206      	movs	r2, #6
 800133e:	701a      	strb	r2, [r3, #0]
		return true;
 8001340:	2301      	movs	r3, #1
 8001342:	e090      	b.n	8001466 <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6139      	str	r1, [r7, #16]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f996 	bl	800268c <MATCH_MARK>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <decodeJVC+0x9e>
 8001366:	2300      	movs	r3, #0
 8001368:	e07d      	b.n	8001466 <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <decodeJVC+0x1a4>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b20      	cmp	r3, #32
 8001372:	d801      	bhi.n	8001378 <decodeJVC+0xac>
 8001374:	2300      	movs	r3, #0
 8001376:	e076      	b.n	8001466 <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1c59      	adds	r1, r3, #1
 8001380:	6139      	str	r1, [r7, #16]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f98a 	bl	80026a8 <MATCH_SPACE>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <decodeJVC+0xd2>
 800139a:	2300      	movs	r3, #0
 800139c:	e063      	b.n	8001466 <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e042      	b.n	800142a <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1c59      	adds	r1, r3, #1
 80013ac:	6139      	str	r1, [r7, #16]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f966 	bl	800268c <MATCH_MARK>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <decodeJVC+0xfe>
 80013c6:	2300      	movs	r3, #0
 80013c8:	e04d      	b.n	8001466 <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80013dc:	4618      	mov	r0, r3
 80013de:	f001 f963 	bl	80026a8 <MATCH_SPACE>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <decodeJVC+0x128>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e014      	b.n	800141e <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	f240 2126 	movw	r1, #550	; 0x226
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f94e 	bl	80026a8 <MATCH_SPACE>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <decodeJVC+0x14e>
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e001      	b.n	800141e <decodeJVC+0x152>
		else return false ;
 800141a:	2300      	movs	r3, #0
 800141c:	e023      	b.n	8001466 <decodeJVC+0x19a>
		offset++;
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	3301      	adds	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	ddb9      	ble.n	80013a4 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f922 	bl	800268c <MATCH_MARK>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <decodeJVC+0x186>
 800144e:	2300      	movs	r3, #0
 8001450:	e009      	b.n	8001466 <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2210      	movs	r2, #16
 8001456:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2206      	movs	r2, #6
 8001462:	701a      	strb	r2, [r3, #0]

	return true;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000230 	.word	0x20000230

08001474 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 8001480:	2301      	movs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8001484:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <decodeLG+0x13c>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b38      	cmp	r3, #56	; 0x38
 800148c:	d801      	bhi.n	8001492 <decodeLG+0x1e>
 800148e:	2300      	movs	r3, #0
 8001490:	e089      	b.n	80015a6 <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1c59      	adds	r1, r3, #1
 800149a:	6139      	str	r1, [r7, #16]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f8ef 	bl	800268c <MATCH_MARK>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <decodeLG+0x44>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e076      	b.n	80015a6 <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	6139      	str	r1, [r7, #16]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 f8ea 	bl	80026a8 <MATCH_SPACE>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <decodeLG+0x6a>
 80014da:	2300      	movs	r3, #0
 80014dc:	e063      	b.n	80015a6 <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e042      	b.n	800156a <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	6139      	str	r1, [r7, #16]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f8c6 	bl	800268c <MATCH_MARK>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <decodeLG+0x96>
 8001506:	2300      	movs	r3, #0
 8001508:	e04d      	b.n	80015a6 <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800151c:	4618      	mov	r0, r3
 800151e:	f001 f8c3 	bl	80026a8 <MATCH_SPACE>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <decodeLG+0xc0>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e014      	b.n	800155e <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	f240 2126 	movw	r1, #550	; 0x226
 8001546:	4618      	mov	r0, r3
 8001548:	f001 f8ae 	bl	80026a8 <MATCH_SPACE>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <decodeLG+0xe6>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e001      	b.n	800155e <decodeLG+0xea>
        else                                                           return false ;
 800155a:	2300      	movs	r3, #0
 800155c:	e023      	b.n	80015a6 <decodeLG+0x132>
        offset++;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b1b      	cmp	r3, #27
 800156e:	ddb9      	ble.n	80014e4 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f882 	bl	800268c <MATCH_MARK>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <decodeLG+0x11e>
 800158e:	2300      	movs	r3, #0
 8001590:	e009      	b.n	80015a6 <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	221c      	movs	r2, #28
 8001596:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	220a      	movs	r2, #10
 80015a2:	701a      	strb	r2, [r3, #0]
    return true;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000230 	.word	0x20000230

080015b4 <sendLG>:
#endif

//+=============================================================================
#if SEND_LG
void sendLG (unsigned long data,  int nbits)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    // Set IR carrier frequency
    enableIROut(38);
 80015be:	2026      	movs	r0, #38	; 0x26
 80015c0:	f001 fb1e 	bl	8002c00 <enableIROut>

    // Header
    mark(LG_HDR_MARK);
 80015c4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80015c8:	f001 faf2 	bl	8002bb0 <mark>
    space(LG_HDR_SPACE);
 80015cc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80015d0:	f001 fb02 	bl	8002bd8 <space>
    mark(LG_BIT_MARK);
 80015d4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015d8:	f001 faea 	bl	8002bb0 <mark>

    // Data
    for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	2201      	movs	r2, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e018      	b.n	800161c <sendLG+0x68>
        if (data & mask) {
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <sendLG+0x52>
            space(LG_ONE_SPACE);
 80015f4:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80015f8:	f001 faee 	bl	8002bd8 <space>
            mark(LG_BIT_MARK);
 80015fc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001600:	f001 fad6 	bl	8002bb0 <mark>
 8001604:	e007      	b.n	8001616 <sendLG+0x62>
        } else {
            space(LG_ZERO_SPACE);
 8001606:	f240 2026 	movw	r0, #550	; 0x226
 800160a:	f001 fae5 	bl	8002bd8 <space>
            mark(LG_BIT_MARK);
 800160e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001612:	f001 facd 	bl	8002bb0 <mark>
    for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e3      	bne.n	80015ea <sendLG+0x36>
        }
    }
    space(0);  // Always end with the LED off
 8001622:	2000      	movs	r0, #0
 8001624:	f001 fad8 	bl	8002bd8 <space>
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <sendNEC>:
#define NEC_RPT_SPACE   2250

//+=============================================================================
#if SEND_NEC
void sendNEC (unsigned long data,  int nbits)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(38);
 800163a:	2026      	movs	r0, #38	; 0x26
 800163c:	f001 fae0 	bl	8002c00 <enableIROut>

	// Header
	mark(NEC_HDR_MARK);
 8001640:	f242 3028 	movw	r0, #9000	; 0x2328
 8001644:	f001 fab4 	bl	8002bb0 <mark>
	space(NEC_HDR_SPACE);
 8001648:	f241 1094 	movw	r0, #4500	; 0x1194
 800164c:	f001 fac4 	bl	8002bd8 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	2201      	movs	r2, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e018      	b.n	8001690 <sendNEC+0x60>
		if (data & mask) {
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <sendNEC+0x4a>
			mark(NEC_BIT_MARK);
 8001668:	f44f 700c 	mov.w	r0, #560	; 0x230
 800166c:	f001 faa0 	bl	8002bb0 <mark>
			space(NEC_ONE_SPACE);
 8001670:	f240 609a 	movw	r0, #1690	; 0x69a
 8001674:	f001 fab0 	bl	8002bd8 <space>
 8001678:	e007      	b.n	800168a <sendNEC+0x5a>
		} else {
			mark(NEC_BIT_MARK);
 800167a:	f44f 700c 	mov.w	r0, #560	; 0x230
 800167e:	f001 fa97 	bl	8002bb0 <mark>
			space(NEC_ZERO_SPACE);
 8001682:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001686:	f001 faa7 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e3      	bne.n	800165e <sendNEC+0x2e>
		}
	}

	// Footer
	mark(NEC_BIT_MARK);
 8001696:	f44f 700c 	mov.w	r0, #560	; 0x230
 800169a:	f001 fa89 	bl	8002bb0 <mark>
	space(0);  // Always end with the LED off
 800169e:	2000      	movs	r0, #0
 80016a0:	f001 fa9a 	bl	8002bd8 <space>
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 80016b8:	2301      	movs	r3, #1
 80016ba:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f242 3128 	movw	r1, #9000	; 0x2328
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 ffdc 	bl	800268c <MATCH_MARK>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <decodeNEC+0x32>
 80016da:	2300      	movs	r3, #0
 80016dc:	e0a1      	b.n	8001822 <decodeNEC+0x176>
	offset++;
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <decodeNEC+0x180>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d12a      	bne.n	8001744 <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8001700:	4618      	mov	r0, r3
 8001702:	f000 ffd1 	bl	80026a8 <MATCH_SPACE>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001720:	4618      	mov	r0, r3
 8001722:	f000 ffb3 	bl	800268c <MATCH_MARK>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00b      	beq.n	8001744 <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	701a      	strb	r2, [r3, #0]
		return true;
 8001740:	2301      	movs	r3, #1
 8001742:	e06e      	b.n	8001822 <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 8001744:	4b39      	ldr	r3, [pc, #228]	; (800182c <decodeNEC+0x180>)
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b43      	cmp	r3, #67	; 0x43
 800174c:	d801      	bhi.n	8001752 <decodeNEC+0xa6>
 800174e:	2300      	movs	r3, #0
 8001750:	e067      	b.n	8001822 <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f241 1194 	movw	r1, #4500	; 0x1194
 8001764:	4618      	mov	r0, r3
 8001766:	f000 ff9f 	bl	80026a8 <MATCH_SPACE>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <decodeNEC+0xc8>
 8001770:	2300      	movs	r3, #0
 8001772:	e056      	b.n	8001822 <decodeNEC+0x176>
	offset++;
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3301      	adds	r3, #1
 8001778:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e043      	b.n	8001808 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001792:	4618      	mov	r0, r3
 8001794:	f000 ff7a 	bl	800268c <MATCH_MARK>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <decodeNEC+0xf6>
 800179e:	2300      	movs	r3, #0
 80017a0:	e03f      	b.n	8001822 <decodeNEC+0x176>
		offset++;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f240 619a 	movw	r1, #1690	; 0x69a
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 ff74 	bl	80026a8 <MATCH_SPACE>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <decodeNEC+0x126>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e014      	b.n	80017fc <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f44f 710c 	mov.w	r1, #560	; 0x230
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 ff5f 	bl	80026a8 <MATCH_SPACE>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <decodeNEC+0x14c>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e001      	b.n	80017fc <decodeNEC+0x150>
		else                                                            return false ;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e012      	b.n	8001822 <decodeNEC+0x176>
		offset++;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b1f      	cmp	r3, #31
 800180c:	ddb8      	ble.n	8001780 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	701a      	strb	r2, [r3, #0]

	return true;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000230 	.word	0x20000230

08001830 <sendPanasonic>:
#define PANASONIC_ZERO_SPACE   400

//+=============================================================================
#if SEND_PANASONIC
void sendPanasonic (unsigned int address,  unsigned long data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(35);
 800183a:	2023      	movs	r0, #35	; 0x23
 800183c:	f001 f9e0 	bl	8002c00 <enableIROut>

	// Header
	mark(PANASONIC_HDR_MARK);
 8001840:	f640 50ae 	movw	r0, #3502	; 0xdae
 8001844:	f001 f9b4 	bl	8002bb0 <mark>
	space(PANASONIC_HDR_SPACE);
 8001848:	f240 60d6 	movw	r0, #1750	; 0x6d6
 800184c:	f001 f9c4 	bl	8002bd8 <space>

	// Address
	for (unsigned long  mask = 1UL << (16 - 1);  mask;  mask >>= 1) {
 8001850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e014      	b.n	8001882 <sendPanasonic+0x52>
		mark(PANASONIC_BIT_MARK);
 8001858:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 800185c:	f001 f9a8 	bl	8002bb0 <mark>
		if (address & mask)  space(PANASONIC_ONE_SPACE) ;
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <sendPanasonic+0x44>
 800186a:	f240 40dc 	movw	r0, #1244	; 0x4dc
 800186e:	f001 f9b3 	bl	8002bd8 <space>
 8001872:	e003      	b.n	800187c <sendPanasonic+0x4c>
		else                 space(PANASONIC_ZERO_SPACE) ;
 8001874:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001878:	f001 f9ae 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (16 - 1);  mask;  mask >>= 1) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e7      	bne.n	8001858 <sendPanasonic+0x28>
    }

	// Data
	for (unsigned long  mask = 1UL << (32 - 1);  mask;  mask >>= 1) {
 8001888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	e014      	b.n	80018ba <sendPanasonic+0x8a>
        mark(PANASONIC_BIT_MARK);
 8001890:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 8001894:	f001 f98c 	bl	8002bb0 <mark>
        if (data & mask)  space(PANASONIC_ONE_SPACE) ;
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <sendPanasonic+0x7c>
 80018a2:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80018a6:	f001 f997 	bl	8002bd8 <space>
 80018aa:	e003      	b.n	80018b4 <sendPanasonic+0x84>
        else              space(PANASONIC_ZERO_SPACE) ;
 80018ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80018b0:	f001 f992 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (32 - 1);  mask;  mask >>= 1) {
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e7      	bne.n	8001890 <sendPanasonic+0x60>
    }

	// Footer
    mark(PANASONIC_BIT_MARK);
 80018c0:	f44f 70fb 	mov.w	r0, #502	; 0x1f6
 80018c4:	f001 f974 	bl	8002bb0 <mark>
    space(0);  // Always end with the LED off
 80018c8:	2000      	movs	r0, #0
 80018ca:	f001 f985 	bl	8002bd8 <space>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <decodePanasonic>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
uint8_t decodePanasonic (decode_results *results)
{
 80018d6:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    unsigned long long  data   = 0;
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int                 offset = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	60f9      	str	r1, [r7, #12]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f640 51ae 	movw	r1, #3502	; 0xdae
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fec0 	bl	800268c <MATCH_MARK>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <decodePanasonic+0x40>
 8001912:	2300      	movs	r3, #0
 8001914:	e080      	b.n	8001a18 <decodePanasonic+0x142>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	60f9      	str	r1, [r7, #12]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f240 61d6 	movw	r1, #1750	; 0x6d6
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fead 	bl	800268c <MATCH_MARK>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <decodePanasonic+0x66>
 8001938:	2300      	movs	r3, #0
 800193a:	e06d      	b.n	8001a18 <decodePanasonic+0x142>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	e052      	b.n	80019e8 <decodePanasonic+0x112>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1c59      	adds	r1, r3, #1
 800194a:	60f9      	str	r1, [r7, #12]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fe97 	bl	800268c <MATCH_MARK>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <decodePanasonic+0x92>
 8001964:	2300      	movs	r3, #0
 8001966:	e057      	b.n	8001a18 <decodePanasonic+0x142>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f240 41dc 	movw	r1, #1244	; 0x4dc
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fe94 	bl	80026a8 <MATCH_SPACE>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d011      	beq.n	80019aa <decodePanasonic+0xd4>
 8001986:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800198a:	184b      	adds	r3, r1, r1
 800198c:	eb42 0402 	adc.w	r4, r2, r2
 8001990:	4619      	mov	r1, r3
 8001992:	4622      	mov	r2, r4
 8001994:	f04f 0301 	mov.w	r3, #1
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	ea43 0b01 	orr.w	fp, r3, r1
 80019a0:	ea44 0c02 	orr.w	ip, r4, r2
 80019a4:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 80019a8:	e018      	b.n	80019dc <decodePanasonic+0x106>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fe73 	bl	80026a8 <MATCH_SPACE>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <decodePanasonic+0x102>
 80019c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019cc:	184b      	adds	r3, r1, r1
 80019ce:	eb42 0402 	adc.w	r4, r2, r2
 80019d2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80019d6:	e001      	b.n	80019dc <decodePanasonic+0x106>
        else                                                                 return false ;
 80019d8:	2300      	movs	r3, #0
 80019da:	e01d      	b.n	8001a18 <decodePanasonic+0x142>
        offset++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b2f      	cmp	r3, #47	; 0x2f
 80019ec:	dda9      	ble.n	8001942 <decodePanasonic+0x6c>
    }

    results->value       = (unsigned long)data;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	605a      	str	r2, [r3, #4]
    results->address     = (unsigned int)(data >> 32);
 80019f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	0013      	movs	r3, r2
 8001a02:	2400      	movs	r4, #0
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	805a      	strh	r2, [r3, #2]
    results->decode_type = PANASONIC;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	701a      	strb	r2, [r3, #0]
    results->bits        = PANASONIC_BITS;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	811a      	strh	r2, [r3, #8]

    return true;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001a22 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b088      	sub	sp, #32
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	db01      	blt.n	8001a42 <getRClevel+0x20>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e05b      	b.n	8001afa <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <getRClevel+0x50>
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	e001      	b.n	8001a76 <getRClevel+0x54>
 8001a72:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001a76:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	69b8      	ldr	r0, [r7, #24]
 8001a82:	f000 fdaf 	bl	80025e4 <MATCH>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <getRClevel+0x70>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	e020      	b.n	8001ad4 <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	005a      	lsls	r2, r3, #1
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	69b8      	ldr	r0, [r7, #24]
 8001a9e:	f000 fda1 	bl	80025e4 <MATCH>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <getRClevel+0x8c>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e012      	b.n	8001ad4 <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	441a      	add	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	69b8      	ldr	r0, [r7, #24]
 8001abe:	f000 fd91 	bl	80025e4 <MATCH>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <getRClevel+0xac>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e002      	b.n	8001ad4 <getRClevel+0xb2>
	else                                         return -1 ;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e012      	b.n	8001afa <getRClevel+0xd8>

	(*used)++;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dc07      	bgt.n	8001af8 <getRClevel+0xd6>
		*used = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
		(*offset)++;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 8001af8:	697b      	ldr	r3, [r7, #20]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <sendRC5>:
#define RC5_RPT_LENGTH   46000

//+=============================================================================
#if SEND_RC5
void sendRC5 (unsigned long data,  int nbits)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(36);
 8001b0c:	2024      	movs	r0, #36	; 0x24
 8001b0e:	f001 f877 	bl	8002c00 <enableIROut>

	// Start
	mark(RC5_T1);
 8001b12:	f240 3079 	movw	r0, #889	; 0x379
 8001b16:	f001 f84b 	bl	8002bb0 <mark>
	space(RC5_T1);
 8001b1a:	f240 3079 	movw	r0, #889	; 0x379
 8001b1e:	f001 f85b 	bl	8002bd8 <space>
	mark(RC5_T1);
 8001b22:	f240 3079 	movw	r0, #889	; 0x379
 8001b26:	f001 f843 	bl	8002bb0 <mark>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	2201      	movs	r2, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e018      	b.n	8001b6a <sendRC5+0x68>
		if (data & mask) {
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <sendRC5+0x52>
			space(RC5_T1); // 1 is space, then mark
 8001b42:	f240 3079 	movw	r0, #889	; 0x379
 8001b46:	f001 f847 	bl	8002bd8 <space>
			mark(RC5_T1);
 8001b4a:	f240 3079 	movw	r0, #889	; 0x379
 8001b4e:	f001 f82f 	bl	8002bb0 <mark>
 8001b52:	e007      	b.n	8001b64 <sendRC5+0x62>
		} else {
			mark(RC5_T1);
 8001b54:	f240 3079 	movw	r0, #889	; 0x379
 8001b58:	f001 f82a 	bl	8002bb0 <mark>
			space(RC5_T1);
 8001b5c:	f240 3079 	movw	r0, #889	; 0x379
 8001b60:	f001 f83a 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e3      	bne.n	8001b38 <sendRC5+0x36>
		}
	}

	space(0);  // Always end with the LED off
 8001b70:	2000      	movs	r0, #0
 8001b72:	f001 f831 	bl	8002bd8 <space>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 8001b90:	2301      	movs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <decodeRC5+0x108>)
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d801      	bhi.n	8001ba2 <decodeRC5+0x22>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e06d      	b.n	8001c7e <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8001ba2:	f107 020c 	add.w	r2, r7, #12
 8001ba6:	f107 0108 	add.w	r1, r7, #8
 8001baa:	f240 3379 	movw	r3, #889	; 0x379
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff37 	bl	8001a22 <getRClevel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <decodeRC5+0x3e>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e05f      	b.n	8001c7e <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 8001bbe:	f107 020c 	add.w	r2, r7, #12
 8001bc2:	f107 0108 	add.w	r1, r7, #8
 8001bc6:	f240 3379 	movw	r3, #889	; 0x379
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff29 	bl	8001a22 <getRClevel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <decodeRC5+0x5a>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e051      	b.n	8001c7e <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	f107 0108 	add.w	r1, r7, #8
 8001be2:	f240 3379 	movw	r3, #889	; 0x379
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff1b 	bl	8001a22 <getRClevel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <decodeRC5+0x76>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e043      	b.n	8001c7e <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e02e      	b.n	8001c5a <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	f107 0108 	add.w	r1, r7, #8
 8001c04:	f240 3379 	movw	r3, #889	; 0x379
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff0a 	bl	8001a22 <getRClevel>
 8001c0e:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f107 0108 	add.w	r1, r7, #8
 8001c18:	f240 3379 	movw	r3, #889	; 0x379
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff00 	bl	8001a22 <getRClevel>
 8001c22:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <decodeRC5+0xbc>
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <decodeRC5+0xbc>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	e00b      	b.n	8001c54 <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <decodeRC5+0xd0>
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d103      	bne.n	8001c50 <decodeRC5+0xd0>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	e001      	b.n	8001c54 <decodeRC5+0xd4>
		else                                              return false ;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e014      	b.n	8001c7e <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <decodeRC5+0x108>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dcc9      	bgt.n	8001bfc <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
	return true;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000230 	.word	0x20000230

08001c8c <sendRC6>:
#define RC6_T1             444
#define RC6_RPT_LENGTH   46000

#if SEND_RC6
void sendRC6 (unsigned long data,  int nbits)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(36);
 8001c96:	2024      	movs	r0, #36	; 0x24
 8001c98:	f000 ffb2 	bl	8002c00 <enableIROut>

	// Header
	mark(RC6_HDR_MARK);
 8001c9c:	f640 206a 	movw	r0, #2666	; 0xa6a
 8001ca0:	f000 ff86 	bl	8002bb0 <mark>
	space(RC6_HDR_SPACE);
 8001ca4:	f240 3079 	movw	r0, #889	; 0x379
 8001ca8:	f000 ff96 	bl	8002bd8 <space>

	// Start bit
	mark(RC6_T1);
 8001cac:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8001cb0:	f000 ff7e 	bl	8002bb0 <mark>
	space(RC6_T1);
 8001cb4:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8001cb8:	f000 ff8e 	bl	8002bd8 <space>

	// Data
	for (unsigned long  i = 1, mask = 1UL << (nbits - 1);  mask;  i++, mask >>= 1) {
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	e024      	b.n	8001d18 <sendRC6+0x8c>
		// The fourth bit we send is a "double width trailer bit"
		int  t = (i == 4) ? (RC6_T1 * 2) : (RC6_T1) ;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d102      	bne.n	8001cda <sendRC6+0x4e>
 8001cd4:	f44f 735e 	mov.w	r3, #888	; 0x378
 8001cd8:	e001      	b.n	8001cde <sendRC6+0x52>
 8001cda:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001cde:	60fb      	str	r3, [r7, #12]
		if (data & mask) {
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <sendRC6+0x70>
			mark(t);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 ff5f 	bl	8002bb0 <mark>
			space(t);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 ff6f 	bl	8002bd8 <space>
 8001cfa:	e007      	b.n	8001d0c <sendRC6+0x80>
		} else {
			space(t);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 ff6a 	bl	8002bd8 <space>
			mark(t);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 ff52 	bl	8002bb0 <mark>
	for (unsigned long  i = 1, mask = 1UL << (nbits - 1);  mask;  i++, mask >>= 1) {
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1d7      	bne.n	8001cce <sendRC6+0x42>
		}
	}

	space(0);  // Always end with the LED off
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 ff5a 	bl	8002bd8 <space>
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	dc01      	bgt.n	8001d4e <decodeRC6+0x22>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e0a9      	b.n	8001ea2 <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f640 216a 	movw	r1, #2666	; 0xa6a
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fc91 	bl	800268c <MATCH_MARK>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <decodeRC6+0x48>
 8001d70:	2300      	movs	r3, #0
 8001d72:	e096      	b.n	8001ea2 <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f240 3179 	movw	r1, #889	; 0x379
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fc8c 	bl	80026a8 <MATCH_SPACE>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <decodeRC6+0x6e>
 8001d96:	2300      	movs	r3, #0
 8001d98:	e083      	b.n	8001ea2 <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	f107 0108 	add.w	r1, r7, #8
 8001da2:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fe3b 	bl	8001a22 <getRClevel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <decodeRC6+0x8a>
 8001db2:	2300      	movs	r3, #0
 8001db4:	e075      	b.n	8001ea2 <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	f107 0108 	add.w	r1, r7, #8
 8001dbe:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fe2d 	bl	8001a22 <getRClevel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d001      	beq.n	8001dd2 <decodeRC6+0xa6>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e067      	b.n	8001ea2 <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e052      	b.n	8001e7e <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 8001dd8:	f107 020c 	add.w	r2, r7, #12
 8001ddc:	f107 0108 	add.w	r1, r7, #8
 8001de0:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fe1c 	bl	8001a22 <getRClevel>
 8001dea:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d10e      	bne.n	8001e10 <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 8001df2:	f107 020c 	add.w	r2, r7, #12
 8001df6:	f107 0108 	add.w	r1, r7, #8
 8001dfa:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe0f 	bl	8001a22 <getRClevel>
 8001e04:	4602      	mov	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d001      	beq.n	8001e10 <decodeRC6+0xe4>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e048      	b.n	8001ea2 <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 8001e10:	f107 020c 	add.w	r2, r7, #12
 8001e14:	f107 0108 	add.w	r1, r7, #8
 8001e18:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fe00 	bl	8001a22 <getRClevel>
 8001e22:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d10e      	bne.n	8001e48 <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fdf3 	bl	8001a22 <getRClevel>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d001      	beq.n	8001e48 <decodeRC6+0x11c>
 8001e44:	2300      	movs	r3, #0
 8001e46:	e02c      	b.n	8001ea2 <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <decodeRC6+0x134>
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <decodeRC6+0x134>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e00b      	b.n	8001e78 <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <decodeRC6+0x148>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <decodeRC6+0x148>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	e001      	b.n	8001e78 <decodeRC6+0x14c>
		else                                              return false ;            // Error
 8001e74:	2300      	movs	r3, #0
 8001e76:	e014      	b.n	8001ea2 <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dca5      	bgt.n	8001dd8 <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	701a      	strb	r2, [r3, #0]
	return true;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <sendSAMSUNG>:
#define SAMSUNG_RPT_SPACE   2250

//+=============================================================================
#if SEND_SAMSUNG
void sendSAMSUNG(unsigned long data,  int nbits)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(38);
 8001eb4:	2026      	movs	r0, #38	; 0x26
 8001eb6:	f000 fea3 	bl	8002c00 <enableIROut>

	// Header
	mark(SAMSUNG_HDR_MARK);
 8001eba:	f241 1094 	movw	r0, #4500	; 0x1194
 8001ebe:	f000 fe77 	bl	8002bb0 <mark>
	space(SAMSUNG_HDR_SPACE);
 8001ec2:	f241 1094 	movw	r0, #4500	; 0x1194
 8001ec6:	f000 fe87 	bl	8002bd8 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	2201      	movs	r2, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e018      	b.n	8001f0a <sendSAMSUNG+0x60>
	{
		if (data & mask)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <sendSAMSUNG+0x4a>
		{
			mark(SAMSUNG_BIT_MARK);
 8001ee2:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001ee6:	f000 fe63 	bl	8002bb0 <mark>
			space(SAMSUNG_ONE_SPACE);
 8001eea:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001eee:	f000 fe73 	bl	8002bd8 <space>
 8001ef2:	e007      	b.n	8001f04 <sendSAMSUNG+0x5a>
		}
		else
		{
			mark(SAMSUNG_BIT_MARK);
 8001ef4:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001ef8:	f000 fe5a 	bl	8002bb0 <mark>
			space(SAMSUNG_ZERO_SPACE);
 8001efc:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001f00:	f000 fe6a 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e3      	bne.n	8001ed8 <sendSAMSUNG+0x2e>
		}
	}

	// Footer
	mark(SAMSUNG_BIT_MARK);
 8001f10:	f44f 700c 	mov.w	r0, #560	; 0x230
 8001f14:	f000 fe4c 	bl	8002bb0 <mark>
    space(0);  // Always end with the LED off
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 fe5d 	bl	8002bd8 <space>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 8001f34:	2301      	movs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f241 1194 	movw	r1, #4500	; 0x1194
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fb9e 	bl	800268c <MATCH_MARK>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <decodeSAMSUNG+0x32>
 8001f56:	2300      	movs	r3, #0
 8001f58:	e09f      	b.n	800209a <decodeSAMSUNG+0x172>
	offset++;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <decodeSAMSUNG+0x17c>)
 8001f62:	785b      	ldrb	r3, [r3, #1]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d12a      	bne.n	8001fc0 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fb93 	bl	80026a8 <MATCH_SPACE>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fb75 	bl	800268c <MATCH_MARK>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2207      	movs	r2, #7
 8001fba:	701a      	strb	r2, [r3, #0]
		return true;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e06c      	b.n	800209a <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8001fc0:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <decodeSAMSUNG+0x17c>)
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b43      	cmp	r3, #67	; 0x43
 8001fc8:	d801      	bhi.n	8001fce <decodeSAMSUNG+0xa6>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e065      	b.n	800209a <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1c59      	adds	r1, r3, #1
 8001fd6:	6139      	str	r1, [r7, #16]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f241 1194 	movw	r1, #4500	; 0x1194
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fb5f 	bl	80026a8 <MATCH_SPACE>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <decodeSAMSUNG+0xcc>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e052      	b.n	800209a <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e042      	b.n	8002080 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1c59      	adds	r1, r3, #1
 8002002:	6139      	str	r1, [r7, #16]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fb3b 	bl	800268c <MATCH_MARK>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <decodeSAMSUNG+0xf8>
 800201c:	2300      	movs	r3, #0
 800201e:	e03c      	b.n	800209a <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb38 	bl	80026a8 <MATCH_SPACE>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <decodeSAMSUNG+0x122>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	e014      	b.n	8002074 <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f44f 710c 	mov.w	r1, #560	; 0x230
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fb23 	bl	80026a8 <MATCH_SPACE>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <decodeSAMSUNG+0x148>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e001      	b.n	8002074 <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 8002070:	2300      	movs	r3, #0
 8002072:	e012      	b.n	800209a <decodeSAMSUNG+0x172>
		offset++;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	3301      	adds	r3, #1
 8002078:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b1f      	cmp	r3, #31
 8002084:	ddb9      	ble.n	8001ffa <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2207      	movs	r2, #7
 8002096:	701a      	strb	r2, [r3, #0]
	return true;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000230 	.word	0x20000230

080020a8 <sendSony>:
#define SONY_DOUBLE_SPACE_USECS    500  // usually ssee 713 - not using ticks as get number wrapround

//+=============================================================================
#if SEND_SONY
void sendSony (unsigned long data,  int nbits)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(40);
 80020b2:	2028      	movs	r0, #40	; 0x28
 80020b4:	f000 fda4 	bl	8002c00 <enableIROut>

	// Header
	mark(SONY_HDR_MARK);
 80020b8:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80020bc:	f000 fd78 	bl	8002bb0 <mark>
	space(SONY_HDR_SPACE);
 80020c0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020c4:	f000 fd88 	bl	8002bd8 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	2201      	movs	r2, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e018      	b.n	8002108 <sendSony+0x60>
		if (data & mask) {
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <sendSony+0x4a>
			mark(SONY_ONE_MARK);
 80020e0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80020e4:	f000 fd64 	bl	8002bb0 <mark>
			space(SONY_HDR_SPACE);
 80020e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020ec:	f000 fd74 	bl	8002bd8 <space>
 80020f0:	e007      	b.n	8002102 <sendSony+0x5a>
		} else {
			mark(SONY_ZERO_MARK);
 80020f2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020f6:	f000 fd5b 	bl	8002bb0 <mark>
			space(SONY_HDR_SPACE);
 80020fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020fe:	f000 fd6b 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e3      	bne.n	80020d6 <sendSony+0x2e>
    	}
  	}

	// We will have ended with LED off
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <decodeSony+0x140>)
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b19      	cmp	r3, #25
 8002130:	d801      	bhi.n	8002136 <decodeSony+0x1e>
 8002132:	2300      	movs	r3, #0
 8002134:	e08b      	b.n	800224e <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002148:	d20b      	bcs.n	8002162 <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f04f 32ff 	mov.w	r2, #4294967295
 8002156:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	220b      	movs	r2, #11
 800215c:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 800215e:	2301      	movs	r3, #1
 8002160:	e075      	b.n	800224e <decodeSony+0x136>
	}
	offset++;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3301      	adds	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fa84 	bl	800268c <MATCH_MARK>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d13f      	bne.n	800220a <decodeSony+0xf2>
 800218a:	2300      	movs	r3, #0
 800218c:	e05f      	b.n	800224e <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa7f 	bl	80026a8 <MATCH_SPACE>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d034      	beq.n	800221a <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fa62 	bl	800268c <MATCH_MARK>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <decodeSony+0xc2>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e014      	b.n	8002204 <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fa4d 	bl	800268c <MATCH_MARK>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <decodeSony+0xe8>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e001      	b.n	8002204 <decodeSony+0xec>
		else                                                           return false ;
 8002200:	2300      	movs	r3, #0
 8002202:	e024      	b.n	800224e <decodeSony+0x136>
		offset++;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <decodeSony+0x140>)
 8002210:	7852      	ldrb	r2, [r2, #1]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	4293      	cmp	r3, r2
 8002216:	dbba      	blt.n	800218e <decodeSony+0x76>
 8002218:	e000      	b.n	800221c <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800221a:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3b01      	subs	r3, #1
 8002220:	0fda      	lsrs	r2, r3, #31
 8002222:	4413      	add	r3, r2
 8002224:	105b      	asrs	r3, r3, #1
 8002226:	b21a      	sxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002232:	2b0b      	cmp	r3, #11
 8002234:	dc04      	bgt.n	8002240 <decodeSony+0x128>
		results->bits = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	811a      	strh	r2, [r3, #8]
		return false;
 800223c:	2300      	movs	r3, #0
 800223e:	e006      	b.n	800224e <decodeSony+0x136>
	}
	results->value       = data;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
	return true;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000230 	.word	0x20000230

0800225c <sendWhynter>:
#define WHYNTER_ZERO_SPACE   750

//+=============================================================================
#if SEND_WHYNTER
void sendWhynter (unsigned long data,  int nbits)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(38);
 8002266:	2026      	movs	r0, #38	; 0x26
 8002268:	f000 fcca 	bl	8002c00 <enableIROut>

	// Start
	mark(WHYNTER_ZERO_MARK);
 800226c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002270:	f000 fc9e 	bl	8002bb0 <mark>
	space(WHYNTER_ZERO_SPACE);
 8002274:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002278:	f000 fcae 	bl	8002bd8 <space>

	// Header
	mark(WHYNTER_HDR_MARK);
 800227c:	f640 3022 	movw	r0, #2850	; 0xb22
 8002280:	f000 fc96 	bl	8002bb0 <mark>
	space(WHYNTER_HDR_SPACE);
 8002284:	f640 3022 	movw	r0, #2850	; 0xb22
 8002288:	f000 fca6 	bl	8002bd8 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	3b01      	subs	r3, #1
 8002290:	2201      	movs	r2, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e018      	b.n	80022cc <sendWhynter+0x70>
		if (data & mask) {
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <sendWhynter+0x5a>
			mark(WHYNTER_ONE_MARK);
 80022a4:	f240 20ee 	movw	r0, #750	; 0x2ee
 80022a8:	f000 fc82 	bl	8002bb0 <mark>
			space(WHYNTER_ONE_SPACE);
 80022ac:	f640 0066 	movw	r0, #2150	; 0x866
 80022b0:	f000 fc92 	bl	8002bd8 <space>
 80022b4:	e007      	b.n	80022c6 <sendWhynter+0x6a>
		} else {
			mark(WHYNTER_ZERO_MARK);
 80022b6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80022ba:	f000 fc79 	bl	8002bb0 <mark>
			space(WHYNTER_ZERO_SPACE);
 80022be:	f240 20ee 	movw	r0, #750	; 0x2ee
 80022c2:	f000 fc89 	bl	8002bd8 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e3      	bne.n	800229a <sendWhynter+0x3e>
		}
	}

	// Footer
	mark(WHYNTER_ZERO_MARK);
 80022d2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80022d6:	f000 fc6b 	bl	8002bb0 <mark>
	space(WHYNTER_ZERO_SPACE);  // Always end with the LED off
 80022da:	f240 20ee 	movw	r0, #750	; 0x2ee
 80022de:	f000 fc7b 	bl	8002bd8 <space>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // skip initial space
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <decodeWhynter+0x188>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b45      	cmp	r3, #69	; 0x45
 8002304:	d801      	bhi.n	800230a <decodeWhynter+0x1e>
 8002306:	2300      	movs	r3, #0
 8002308:	e0af      	b.n	800246a <decodeWhynter+0x17e>

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1c59      	adds	r1, r3, #1
 8002312:	6139      	str	r1, [r7, #16]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f9b3 	bl	800268c <MATCH_MARK>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <decodeWhynter+0x44>
 800232c:	2300      	movs	r3, #0
 800232e:	e09c      	b.n	800246a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1c59      	adds	r1, r3, #1
 8002338:	6139      	str	r1, [r7, #16]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f9ae 	bl	80026a8 <MATCH_SPACE>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <decodeWhynter+0x6a>
 8002352:	2300      	movs	r3, #0
 8002354:	e089      	b.n	800246a <decodeWhynter+0x17e>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1c59      	adds	r1, r3, #1
 800235e:	6139      	str	r1, [r7, #16]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f640 3122 	movw	r1, #2850	; 0xb22
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f98d 	bl	800268c <MATCH_MARK>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <decodeWhynter+0x90>
 8002378:	2300      	movs	r3, #0
 800237a:	e076      	b.n	800246a <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	6139      	str	r1, [r7, #16]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f640 3122 	movw	r1, #2850	; 0xb22
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f988 	bl	80026a8 <MATCH_SPACE>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <decodeWhynter+0xb6>
 800239e:	2300      	movs	r3, #0
 80023a0:	e063      	b.n	800246a <decodeWhynter+0x17e>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e042      	b.n	800242e <decodeWhynter+0x142>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	6139      	str	r1, [r7, #16]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f240 21ee 	movw	r1, #750	; 0x2ee
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f964 	bl	800268c <MATCH_MARK>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <decodeWhynter+0xe2>
 80023ca:	2300      	movs	r3, #0
 80023cc:	e04d      	b.n	800246a <decodeWhynter+0x17e>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f640 0166 	movw	r1, #2150	; 0x866
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f961 	bl	80026a8 <MATCH_SPACE>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <decodeWhynter+0x10c>
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e014      	b.n	8002422 <decodeWhynter+0x136>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f240 21ee 	movw	r1, #750	; 0x2ee
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f94c 	bl	80026a8 <MATCH_SPACE>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <decodeWhynter+0x132>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e001      	b.n	8002422 <decodeWhynter+0x136>
		else                                                                return false ;
 800241e:	2300      	movs	r3, #0
 8002420:	e023      	b.n	800246a <decodeWhynter+0x17e>
		offset++;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	3301      	adds	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b1f      	cmp	r3, #31
 8002432:	ddb9      	ble.n	80023a8 <decodeWhynter+0xbc>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f920 	bl	800268c <MATCH_MARK>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <decodeWhynter+0x16a>
 8002452:	2300      	movs	r3, #0
 8002454:	e009      	b.n	800246a <decodeWhynter+0x17e>

	// Success
	results->bits = WHYNTER_BITS;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	811a      	strh	r2, [r3, #8]
	results->value = data;
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]
	results->decode_type = WHYNTER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2208      	movs	r2, #8
 8002466:	701a      	strb	r2, [r3, #0]
	return true;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000230 	.word	0x20000230

08002478 <HAL_TIM_PeriodElapsedCallback>:

int out_enabled = 0;
int in_enabled = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a55      	ldr	r2, [pc, #340]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002484:	4293      	cmp	r3, r2
 8002486:	f040 80a2 	bne.w	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
	{
		uint8_t irdata = RECIV_PIN;
 800248a:	2120      	movs	r1, #32
 800248c:	4853      	ldr	r0, [pc, #332]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x164>)
 800248e:	f001 fd9b 	bl	8003fc8 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 10uS tick
 8002496:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002498:	885b      	ldrh	r3, [r3, #2]
 800249a:	b29b      	uxth	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024a2:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 80024a4:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024a6:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b02      	subs	r3, #2
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	f200 808c 	bhi.w	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024d1 	.word	0x080024d1
 80024c0:	08002527 	.word	0x08002527
 80024c4:	0800255b 	.word	0x0800255b
 80024c8:	080025a3 	.word	0x080025a3
 80024cc:	080025b1 	.word	0x080025b1
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d174      	bne.n	80025c0 <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024d8:	885b      	ldrh	r3, [r3, #2]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e0:	d203      	bcs.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x72>
					{
						irparams.timer = 0;
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 80024e8:	e06a      	b.n	80025c0 <HAL_TIM_PeriodElapsedCallback+0x148>
						irparams.overflow = false;
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 80024f2:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	b2d1      	uxtb	r1, r2
 8002502:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002504:	7051      	strb	r1, [r2, #1]
 8002506:	4618      	mov	r0, r3
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800250a:	885b      	ldrh	r3, [r3, #2]
 800250c:	b299      	uxth	r1, r3
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002510:	0043      	lsls	r3, r0, #1
 8002512:	4413      	add	r3, r2
 8002514:	460a      	mov	r2, r1
 8002516:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800251a:	2200      	movs	r2, #0
 800251c:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
			break;
 8002524:	e04c      	b.n	80025c0 <HAL_TIM_PeriodElapsedCallback+0x148>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d14b      	bne.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	b2d1      	uxtb	r1, r2
 8002536:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002538:	7051      	strb	r1, [r2, #1]
 800253a:	4618      	mov	r0, r3
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800253e:	885b      	ldrh	r3, [r3, #2]
 8002540:	b299      	uxth	r1, r3
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002544:	0043      	lsls	r3, r0, #1
 8002546:	4413      	add	r3, r2
 8002548:	460a      	mov	r2, r1
 800254a:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800254e:	2200      	movs	r2, #0
 8002550:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002554:	2204      	movs	r2, #4
 8002556:	701a      	strb	r2, [r3, #0]
				}

			break;
 8002558:	e034      	b.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <HAL_TIM_PeriodElapsedCallback+0x116>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	b2d1      	uxtb	r1, r2
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800256c:	7051      	strb	r1, [r2, #1]
 800256e:	4618      	mov	r0, r3
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	b299      	uxth	r1, r3
 8002576:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002578:	0043      	lsls	r3, r0, #1
 800257a:	4413      	add	r3, r2
 800257c:	460a      	mov	r2, r1
 800257e:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002582:	2200      	movs	r2, #0
 8002584:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002588:	2203      	movs	r2, #3
 800258a:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 800258c:	e01c      	b.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x150>
				else if(irparams.timer > GAP_TICKS) // Space
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002590:	885b      	ldrh	r3, [r3, #2]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002598:	d916      	bls.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x150>
					irparams.rcvstate = STATE_STOP;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800259c:	2205      	movs	r2, #5
 800259e:	701a      	strb	r2, [r3, #0]
			break;
 80025a0:	e012      	b.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <HAL_TIM_PeriodElapsedCallback+0x154>
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	805a      	strh	r2, [r3, #2]
			break;
 80025ae:	e00d      	b.n	80025cc <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80025ba:	2205      	movs	r2, #5
 80025bc:	701a      	strb	r2, [r3, #0]
			break;
 80025be:	e006      	b.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 80025c0:	bf00      	nop
 80025c2:	e004      	b.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 80025c4:	bf00      	nop
 80025c6:	e002      	b.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 80025c8:	bf00      	nop
 80025ca:	e000      	b.n	80025ce <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 80025cc:	bf00      	nop
		}
	}
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000044c 	.word	0x2000044c
 80025dc:	40020400 	.word	0x40020400
 80025e0:	20000230 	.word	0x20000230

080025e4 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f7fd ffb0 	bl	8000554 <__aeabi_i2d>
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b20      	ldr	r3, [pc, #128]	; (800267c <MATCH+0x98>)
 80025fa:	f7fe f815 	bl	8000628 <__aeabi_dmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	460c      	mov	r4, r1
 8002602:	4618      	mov	r0, r3
 8002604:	4621      	mov	r1, r4
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MATCH+0x9c>)
 800260c:	f7fe f936 	bl	800087c <__aeabi_ddiv>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	4618      	mov	r0, r3
 8002616:	4621      	mov	r1, r4
 8002618:	f7fe faa0 	bl	8000b5c <__aeabi_d2iz>
 800261c:	4602      	mov	r2, r0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4293      	cmp	r3, r2
 8002622:	db25      	blt.n	8002670 <MATCH+0x8c>
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f7fd ff95 	bl	8000554 <__aeabi_i2d>
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MATCH+0xa0>)
 8002630:	f7fd fffa 	bl	8000628 <__aeabi_dmul>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	4618      	mov	r0, r3
 800263a:	4621      	mov	r1, r4
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MATCH+0x9c>)
 8002642:	f7fe f91b 	bl	800087c <__aeabi_ddiv>
 8002646:	4603      	mov	r3, r0
 8002648:	460c      	mov	r4, r1
 800264a:	4618      	mov	r0, r3
 800264c:	4621      	mov	r1, r4
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MATCH+0xa4>)
 8002654:	f7fd fe32 	bl	80002bc <__adddf3>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe fa7c 	bl	8000b5c <__aeabi_d2iz>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4293      	cmp	r3, r2
 800266a:	dc01      	bgt.n	8002670 <MATCH+0x8c>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <MATCH+0x8e>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	3fe80000 	.word	0x3fe80000
 8002680:	40240000 	.word	0x40240000
 8002684:	3ff40000 	.word	0x3ff40000
 8002688:	3ff00000 	.word	0x3ff00000

0800268c <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	//return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
	return MATCH(measured_ticks, desired_us);
 8002696:	6839      	ldr	r1, [r7, #0]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffa3 	bl	80025e4 <MATCH>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	//return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
	return MATCH(measured_ticks, desired_us);
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff95 	bl	80025e4 <MATCH>
 80026ba:	4603      	mov	r3, r0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3e      	ldr	r2, [pc, #248]	; (80027c8 <my_decode+0x104>)
 80026d0:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <my_decode+0x108>)
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	b21a      	sxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <my_decode+0x108>)
 80026e0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <my_decode+0x108>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d001      	beq.n	80026fa <my_decode+0x36>
 80026f6:	2300      	movs	r3, #0
 80026f8:	e062      	b.n	80027c0 <my_decode+0xfc>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe ffd6 	bl	80016ac <decodeNEC>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <my_decode+0x46>
 8002706:	2301      	movs	r3, #1
 8002708:	e05a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fd04 	bl	8002118 <decodeSony>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <my_decode+0x56>
 8002716:	2301      	movs	r3, #1
 8002718:	e052      	b.n	80027c0 <my_decode+0xfc>
	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fa30 	bl	8001b80 <decodeRC5>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <my_decode+0x66>
 8002726:	2301      	movs	r3, #1
 8002728:	e04a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fafe 	bl	8001d2c <decodeRC6>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <my_decode+0x76>
 8002736:	2301      	movs	r3, #1
 8002738:	e042      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff f8cb 	bl	80018d6 <decodePanasonic>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <my_decode+0x86>
 8002746:	2301      	movs	r3, #1
 8002748:	e03a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fe92 	bl	8001474 <decodeLG>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <my_decode+0x96>
 8002756:	2301      	movs	r3, #1
 8002758:	e032      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fdb6 	bl	80012cc <decodeJVC>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <my_decode+0xa6>
 8002766:	2301      	movs	r3, #1
 8002768:	e02a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fbdc 	bl	8001f28 <decodeSAMSUNG>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <my_decode+0xb6>
 8002776:	2301      	movs	r3, #1
 8002778:	e022      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_WHYNTER
		if(decodeWhynter(results)) return true;
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fdb6 	bl	80022ec <decodeWhynter>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <my_decode+0xc6>
 8002786:	2301      	movs	r3, #1
 8002788:	e01a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_AIWA_RC_T501
		if(decodeAiwaRCT501(results)) return true;
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fbf0 	bl	8000f70 <decodeAiwaRCT501>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <my_decode+0xd6>
 8002796:	2301      	movs	r3, #1
 8002798:	e012      	b.n	80027c0 <my_decode+0xfc>
	#endif

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fcc4 	bl	8001128 <decodeDenon>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <my_decode+0xe6>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00a      	b.n	80027c0 <my_decode+0xfc>
	#endif

	if(decodeHash(results)) return true;
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8cc 	bl	8002948 <decodeHash>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <my_decode+0xf6>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e002      	b.n	80027c0 <my_decode+0xfc>
	my_resume();
 80027ba:	f000 f875 	bl	80028a8 <my_resume>
	return false;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000234 	.word	0x20000234
 80027cc:	20000230 	.word	0x20000230

080027d0 <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
	DWT_Init();
 80027d6:	f000 f907 	bl	80029e8 <DWT_Init>

	HAL_TIM_Base_DeInit(&htim4);
 80027da:	4824      	ldr	r0, [pc, #144]	; (800286c <my_enableIRIn+0x9c>)
 80027dc:	f002 f8cd 	bl	800497a <HAL_TIM_Base_DeInit>
	out_enabled = 0;
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <my_enableIRIn+0xa0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f4:	463b      	mov	r3, r7
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <my_enableIRIn+0x9c>)
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <my_enableIRIn+0xa4>)
 8002800:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = MYPRESCALER;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <my_enableIRIn+0x9c>)
 8002804:	2247      	movs	r2, #71	; 0x47
 8002806:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <my_enableIRIn+0x9c>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = MYPERIOD;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <my_enableIRIn+0x9c>)
 8002810:	2209      	movs	r2, #9
 8002812:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <my_enableIRIn+0x9c>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <my_enableIRIn+0x9c>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8002820:	4812      	ldr	r0, [pc, #72]	; (800286c <my_enableIRIn+0x9c>)
 8002822:	f002 f87f 	bl	8004924 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800282c:	f107 0308 	add.w	r3, r7, #8
 8002830:	4619      	mov	r1, r3
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <my_enableIRIn+0x9c>)
 8002834:	f002 fb76 	bl	8004f24 <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <my_enableIRIn+0x9c>)
 8002846:	f002 ff19 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <my_enableIRIn+0xa8>)
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <my_enableIRIn+0xa8>)
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&htim4);
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <my_enableIRIn+0x9c>)
 8002858:	f002 f8bf 	bl	80049da <HAL_TIM_Base_Start_IT>
	in_enabled = 1;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <my_enableIRIn+0xac>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000044c 	.word	0x2000044c
 8002870:	20000208 	.word	0x20000208
 8002874:	40000800 	.word	0x40000800
 8002878:	20000230 	.word	0x20000230
 800287c:	2000020c 	.word	0x2000020c

08002880 <my_disable>:

void my_disable(){
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim4);
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <my_disable+0x1c>)
 8002886:	f002 f878 	bl	800497a <HAL_TIM_Base_DeInit>
	out_enabled = 0;
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <my_disable+0x20>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
	in_enabled = 0;
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <my_disable+0x24>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000044c 	.word	0x2000044c
 80028a0:	20000208 	.word	0x20000208
 80028a4:	2000020c 	.word	0x2000020c

080028a8 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <my_resume+0x1c>)
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <my_resume+0x1c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	705a      	strb	r2, [r3, #1]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000230 	.word	0x20000230

080028c8 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f7fd fe2e 	bl	8000534 <__aeabi_ui2d>
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fd fe29 	bl	8000534 <__aeabi_ui2d>
 80028e2:	a317      	add	r3, pc, #92	; (adr r3, 8002940 <compare+0x78>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fe9e 	bl	8000628 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fe f90a 	bl	8000b0c <__aeabi_dcmplt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <compare+0x3a>
 80028fe:	2300      	movs	r3, #0
 8002900:	e018      	b.n	8002934 <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd fe16 	bl	8000534 <__aeabi_ui2d>
 8002908:	4604      	mov	r4, r0
 800290a:	460d      	mov	r5, r1
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f7fd fe11 	bl	8000534 <__aeabi_ui2d>
 8002912:	a30b      	add	r3, pc, #44	; (adr r3, 8002940 <compare+0x78>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe86 	bl	8000628 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fe f8f2 	bl	8000b0c <__aeabi_dcmplt>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <compare+0x6a>
 800292e:	2302      	movs	r3, #2
 8002930:	e000      	b.n	8002934 <compare+0x6c>
	else return 1;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bdb0      	pop	{r4, r5, r7, pc}
 800293c:	f3af 8000 	nop.w
 8002940:	9999999a 	.word	0x9999999a
 8002944:	3fe99999 	.word	0x3fe99999

08002948 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <decodeHash+0x98>)
 8002952:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800295a:	2b05      	cmp	r3, #5
 800295c:	dc01      	bgt.n	8002962 <decodeHash+0x1a>
 800295e:	2300      	movs	r3, #0
 8002960:	e039      	b.n	80029d6 <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8002962:	2301      	movs	r3, #1
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	e024      	b.n	80029b2 <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002982:	3302      	adds	r3, #2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	f7ff ff9b 	bl	80028c8 <compare>
 8002992:	4603      	mov	r3, r0
 8002994:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <decodeHash+0x9c>)
 800299a:	fb02 f203 	mul.w	r2, r2, r3
 800299e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80029a2:	4053      	eors	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 80029a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029b6:	3302      	adds	r3, #2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80029be:	4293      	cmp	r3, r2
 80029c0:	dbd2      	blt.n	8002968 <decodeHash+0x20>
	}

	results->value = hash;
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
	return true;
 80029d4:	2301      	movs	r3, #1
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	811c9dc5 	.word	0x811c9dc5
 80029e4:	01000193 	.word	0x01000193

080029e8 <DWT_Init>:
#include <IR_Remote.h>

void DWT_Init()
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <DWT_Init+0x2c>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <DWT_Init+0x2c>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f6:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <DWT_Init+0x30>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <DWT_Init+0x30>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <DWT_Init+0x30>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000edf0 	.word	0xe000edf0
 8002a18:	e0001000 	.word	0xe0001000

08002a1c <send>:
/////////////////////////////////////////////////////////////////////////////////

void send(uint16_t buf[], unsigned int len, unsigned long data, int nbits, decode_type_t protocol)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
	if (protocol == UNKNOWN) {
 8002a2a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <send+0x22>
		sendRaw(buf, len, 38);
 8002a32:	2226      	movs	r2, #38	; 0x26
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f872 	bl	8002b20 <sendRaw>
		sendLG(data, nbits);
	}
	else if (protocol == DENON) {
		sendDenon(data, nbits);
	}
}
 8002a3c:	e06c      	b.n	8002b18 <send+0xfc>
	else if (protocol == RC5) {
 8002a3e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d104      	bne.n	8002a50 <send+0x34>
		sendRC5(data, nbits);
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff f85a 	bl	8001b02 <sendRC5>
}
 8002a4e:	e063      	b.n	8002b18 <send+0xfc>
	else if (protocol == RC6) {
 8002a50:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d104      	bne.n	8002a62 <send+0x46>
		sendRC6(data, nbits);
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff f916 	bl	8001c8c <sendRC6>
}
 8002a60:	e05a      	b.n	8002b18 <send+0xfc>
	else if (protocol == RC6) {
 8002a62:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d104      	bne.n	8002a74 <send+0x58>
		sendRC6(data, nbits);
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff f90d 	bl	8001c8c <sendRC6>
}
 8002a72:	e051      	b.n	8002b18 <send+0xfc>
	else if (protocol == NEC) {
 8002a74:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d104      	bne.n	8002a86 <send+0x6a>
		sendNEC(data, nbits);
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fdd6 	bl	8001630 <sendNEC>
}
 8002a84:	e048      	b.n	8002b18 <send+0xfc>
	else if (protocol == SONY) {
 8002a86:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d104      	bne.n	8002a98 <send+0x7c>
		sendSony(data, nbits);
 8002a8e:	6839      	ldr	r1, [r7, #0]
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fb09 	bl	80020a8 <sendSony>
}
 8002a96:	e03f      	b.n	8002b18 <send+0xfc>
	else if (protocol == PANASONIC) {
 8002a98:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d105      	bne.n	8002aac <send+0x90>
		sendPanasonic(nbits, data);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fec3 	bl	8001830 <sendPanasonic>
}
 8002aaa:	e035      	b.n	8002b18 <send+0xfc>
	else if (protocol == JVC) {
 8002aac:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d105      	bne.n	8002ac0 <send+0xa4>
		sendJVC(data, nbits, 0);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe fbc3 	bl	8001244 <sendJVC>
}
 8002abe:	e02b      	b.n	8002b18 <send+0xfc>
	else if (protocol == SAMSUNG) {
 8002ac0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	d104      	bne.n	8002ad2 <send+0xb6>
		sendSAMSUNG(data, nbits);
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff f9ed 	bl	8001eaa <sendSAMSUNG>
}
 8002ad0:	e022      	b.n	8002b18 <send+0xfc>
	else if (protocol == WHYNTER) {
 8002ad2:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d104      	bne.n	8002ae4 <send+0xc8>
		sendWhynter(data, nbits);
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fbbd 	bl	800225c <sendWhynter>
}
 8002ae2:	e019      	b.n	8002b18 <send+0xfc>
	else if (protocol == AIWA_RC_T501) {
 8002ae4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d104      	bne.n	8002af6 <send+0xda>
		sendAiwaRCT501(data);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f9dc 	bl	8000eac <sendAiwaRCT501>
}
 8002af4:	e010      	b.n	8002b18 <send+0xfc>
	else if (protocol == LG) {
 8002af6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002afa:	2b0a      	cmp	r3, #10
 8002afc:	d104      	bne.n	8002b08 <send+0xec>
		sendLG(data, nbits);
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7fe fd57 	bl	80015b4 <sendLG>
}
 8002b06:	e007      	b.n	8002b18 <send+0xfc>
	else if (protocol == DENON) {
 8002b08:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d103      	bne.n	8002b18 <send+0xfc>
		sendDenon(data, nbits);
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe faca 	bl	80010ac <sendDenon>
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <sendRaw>:

void sendRaw(uint16_t buf[], unsigned int len, uint8_t hz)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71fb      	strb	r3, [r7, #7]
	enableIROut(hz);
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f865 	bl	8002c00 <enableIROut>
	int skipFirst = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
	if (buf[0] > 10000) {
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <sendRaw+0x2a>
		skipFirst = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
	}

	for(uint16_t i = skipFirst; i < len; i++)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	827b      	strh	r3, [r7, #18]
 8002b4e:	e023      	b.n	8002b98 <sendRaw+0x78>
	{
		if(i % 2 != skipFirst) space(buf[i]*USECPERTICK);
 8002b50:	8a7b      	ldrh	r3, [r7, #18]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d00d      	beq.n	8002b78 <sendRaw+0x58>
 8002b5c:	8a7b      	ldrh	r3, [r7, #18]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 f831 	bl	8002bd8 <space>
 8002b76:	e00c      	b.n	8002b92 <sendRaw+0x72>
		else mark(buf[i]*USECPERTICK);
 8002b78:	8a7b      	ldrh	r3, [r7, #18]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f80f 	bl	8002bb0 <mark>
	for(uint16_t i = skipFirst; i < len; i++)
 8002b92:	8a7b      	ldrh	r3, [r7, #18]
 8002b94:	3301      	adds	r3, #1
 8002b96:	827b      	strh	r3, [r7, #18]
 8002b98:	8a7b      	ldrh	r3, [r7, #18]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d8d7      	bhi.n	8002b50 <sendRaw+0x30>
	}

	space(0);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 f819 	bl	8002bd8 <space>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <mark>:

void mark(unsigned int time)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <mark+0x24>)
 8002bbc:	f001 ff66 	bl	8004a8c <HAL_TIM_PWM_Start>
	if (time > 0) custom_delay_usec(time);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <mark+0x1c>
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8a0 	bl	8002d0c <custom_delay_usec>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000044c 	.word	0x2000044c

08002bd8 <space>:

void space(unsigned int time)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002be0:	2100      	movs	r1, #0
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <space+0x24>)
 8002be4:	f001 ff84 	bl	8004af0 <HAL_TIM_PWM_Stop>
	if(time > 0) custom_delay_usec(time);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <space+0x1c>
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f88c 	bl	8002d0c <custom_delay_usec>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	2000044c 	.word	0x2000044c

08002c00 <enableIROut>:

void enableIROut(uint8_t khz)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b090      	sub	sp, #64	; 0x40
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
	uint16_t pwm_freq = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t pwm_pulse = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	87bb      	strh	r3, [r7, #60]	; 0x3c
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4a35      	ldr	r2, [pc, #212]	; (8002cf4 <enableIROut+0xf4>)
 8002c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	87fb      	strh	r3, [r7, #62]	; 0x3e
	pwm_pulse = pwm_freq / 3;
 8002c28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c2a:	4a33      	ldr	r2, [pc, #204]	; (8002cf8 <enableIROut+0xf8>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	87bb      	strh	r3, [r7, #60]	; 0x3c

	HAL_TIM_Base_DeInit(&htim4);
 8002c34:	4831      	ldr	r0, [pc, #196]	; (8002cfc <enableIROut+0xfc>)
 8002c36:	f001 fea0 	bl	800497a <HAL_TIM_Base_DeInit>
	in_enabled = 0;
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <enableIROut+0x100>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	615a      	str	r2, [r3, #20]
 8002c6a:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <enableIROut+0xfc>)
 8002c6e:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <enableIROut+0x104>)
 8002c70:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <enableIROut+0xfc>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <enableIROut+0xfc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = pwm_freq;
 8002c7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <enableIROut+0xfc>)
 8002c82:	60d3      	str	r3, [r2, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <enableIROut+0xfc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <enableIROut+0xfc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8002c90:	481a      	ldr	r0, [pc, #104]	; (8002cfc <enableIROut+0xfc>)
 8002c92:	f001 fe47 	bl	8004924 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4816      	ldr	r0, [pc, #88]	; (8002cfc <enableIROut+0xfc>)
 8002ca4:	f002 f93e 	bl	8004f24 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim4);
 8002ca8:	4814      	ldr	r0, [pc, #80]	; (8002cfc <enableIROut+0xfc>)
 8002caa:	f001 feba 	bl	8004a22 <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480f      	ldr	r0, [pc, #60]	; (8002cfc <enableIROut+0xfc>)
 8002cbe:	f002 fcdd 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc2:	2360      	movs	r3, #96	; 0x60
 8002cc4:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = pwm_pulse;
 8002cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002cc8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4808      	ldr	r0, [pc, #32]	; (8002cfc <enableIROut+0xfc>)
 8002cdc:	f002 f85c 	bl	8004d98 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 8002ce0:	4806      	ldr	r0, [pc, #24]	; (8002cfc <enableIROut+0xfc>)
 8002ce2:	f000 fc7b 	bl	80035dc <HAL_TIM_MspPostInit>
	out_enabled = 1;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <enableIROut+0x108>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3740      	adds	r7, #64	; 0x40
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	044aa200 	.word	0x044aa200
 8002cf8:	aaaaaaab 	.word	0xaaaaaaab
 8002cfc:	2000044c 	.word	0x2000044c
 8002d00:	2000020c 	.word	0x2000020c
 8002d04:	40000800 	.word	0x40000800
 8002d08:	20000208 	.word	0x20000208

08002d0c <custom_delay_usec>:

void custom_delay_usec(unsigned long us)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (HAL_RCC_GetSysClockFreq() / 1000000);
 8002d14:	f001 fcfa 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <custom_delay_usec+0x38>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	0c9a      	lsrs	r2, r3, #18
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <custom_delay_usec+0x3c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 8002d30:	bf00      	nop
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <custom_delay_usec+0x3c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d8fa      	bhi.n	8002d32 <custom_delay_usec+0x26>
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	e0001000 	.word	0xe0001000

08002d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t count = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	74fb      	strb	r3, [r7, #19]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d56:	f000 fdc7 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d5a:	f000 f929 	bl	8002fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5e:	f000 fa61 	bl	8003224 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d62:	f000 fa35 	bl	80031d0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002d66:	f000 f98b 	bl	8003080 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002d6a:	f000 f9ff 	bl	800316c <MX_USART1_UART_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch(mode) {
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	; (8002f64 <main+0x218>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d004      	beq.n	8002d80 <main+0x34>
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d028      	beq.n	8002dcc <main+0x80>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d07d      	beq.n	8002e7a <main+0x12e>
 8002d7e:	e0e6      	b.n	8002f4e <main+0x202>
		case TRAN:
			if (rawLen > 0 || protocolBits > 0) {
 8002d80:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <main+0x21c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <main+0x44>
 8002d88:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <main+0x220>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	dd1a      	ble.n	8002dc6 <main+0x7a>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002d90:	2120      	movs	r1, #32
 8002d92:	4877      	ldr	r0, [pc, #476]	; (8002f70 <main+0x224>)
 8002d94:	f001 f949 	bl	800402a <HAL_GPIO_TogglePin>
				send(rawData, rawLen, protocolCode, protocolBits, protocol);
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <main+0x228>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	4b72      	ldr	r3, [pc, #456]	; (8002f68 <main+0x21c>)
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	4b75      	ldr	r3, [pc, #468]	; (8002f78 <main+0x22c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b71      	ldr	r3, [pc, #452]	; (8002f6c <main+0x220>)
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	4b74      	ldr	r3, [pc, #464]	; (8002f7c <main+0x230>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4623      	mov	r3, r4
 8002db2:	f7ff fe33 	bl	8002a1c <send>
				char message[5] = "TOK";
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <main+0x234>)
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	723b      	strb	r3, [r7, #8]
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	486b      	ldr	r0, [pc, #428]	; (8002f70 <main+0x224>)
 8002dc2:	f001 f932 	bl	800402a <HAL_GPIO_TogglePin>
			}
			reset();
 8002dc6:	f000 faab 	bl	8003320 <reset>
			break;
 8002dca:	e0c0      	b.n	8002f4e <main+0x202>
		case DECODE:
			if (protocol == UNKNOWN) {
 8002dcc:	4b6b      	ldr	r3, [pc, #428]	; (8002f7c <main+0x230>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d136      	bne.n	8002e42 <main+0xf6>
				if (rawData) {
 8002dd4:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <main+0x228>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <main+0x9a>
					free(rawData);
 8002ddc:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <main+0x228>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fc43 	bl	800666c <free>
				}
				rawData = (uint16_t *) calloc(rawLen, sizeof(uint16_t));
 8002de6:	4b60      	ldr	r3, [pc, #384]	; (8002f68 <main+0x21c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2102      	movs	r1, #2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fc03 	bl	80065f8 <calloc>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <main+0x228>)
 8002df8:	601a      	str	r2, [r3, #0]
				char *ptr = strtok(trans_str, delim);
 8002dfa:	4962      	ldr	r1, [pc, #392]	; (8002f84 <main+0x238>)
 8002dfc:	4862      	ldr	r0, [pc, #392]	; (8002f88 <main+0x23c>)
 8002dfe:	f003 fd37 	bl	8006870 <strtok>
 8002e02:	61f8      	str	r0, [r7, #28]
				int i = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
				while(ptr != NULL && i < rawLen)
 8002e08:	e012      	b.n	8002e30 <main+0xe4>
				{
					rawData[i] = atoi(ptr);
 8002e0a:	69f8      	ldr	r0, [r7, #28]
 8002e0c:	f003 fbf0 	bl	80065f0 <atoi>
 8002e10:	4601      	mov	r1, r0
 8002e12:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <main+0x228>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b28a      	uxth	r2, r1
 8002e1e:	801a      	strh	r2, [r3, #0]
					ptr = strtok(NULL, delim);
 8002e20:	4958      	ldr	r1, [pc, #352]	; (8002f84 <main+0x238>)
 8002e22:	2000      	movs	r0, #0
 8002e24:	f003 fd24 	bl	8006870 <strtok>
 8002e28:	61f8      	str	r0, [r7, #28]
					i++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61bb      	str	r3, [r7, #24]
				while(ptr != NULL && i < rawLen)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <main+0x126>
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <main+0x21c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3e4      	bcc.n	8002e0a <main+0xbe>
 8002e40:	e017      	b.n	8002e72 <main+0x126>
				}
			}
			else {
				char *ptr = strtok(trans_str, delim);
 8002e42:	4950      	ldr	r1, [pc, #320]	; (8002f84 <main+0x238>)
 8002e44:	4850      	ldr	r0, [pc, #320]	; (8002f88 <main+0x23c>)
 8002e46:	f003 fd13 	bl	8006870 <strtok>
 8002e4a:	60f8      	str	r0, [r7, #12]
				protocolBits = atoi(ptr);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f003 fbcf 	bl	80065f0 <atoi>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <main+0x220>)
 8002e56:	601a      	str	r2, [r3, #0]
				ptr = strtok(NULL, delim);
 8002e58:	494a      	ldr	r1, [pc, #296]	; (8002f84 <main+0x238>)
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f003 fd08 	bl	8006870 <strtok>
 8002e60:	60f8      	str	r0, [r7, #12]
				protocolCode = strtoul(ptr, NULL, 10);
 8002e62:	220a      	movs	r2, #10
 8002e64:	2100      	movs	r1, #0
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f003 fe62 	bl	8006b30 <strtoul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <main+0x22c>)
 8002e70:	601a      	str	r2, [r3, #0]
			}

			mode = TRAN;
 8002e72:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <main+0x218>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
			break;
 8002e78:	e069      	b.n	8002f4e <main+0x202>
		case RECV:
			if (in_enabled == 0) {
 8002e7a:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <main+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <main+0x13a>
				my_enableIRIn();
 8002e82:	f7ff fca5 	bl	80027d0 <my_enableIRIn>
			}

			if(my_decode(&results))
 8002e86:	4842      	ldr	r0, [pc, #264]	; (8002f90 <main+0x244>)
 8002e88:	f7ff fc1c 	bl	80026c4 <my_decode>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d05c      	beq.n	8002f4c <main+0x200>
			{
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e92:	2120      	movs	r1, #32
 8002e94:	4836      	ldr	r0, [pc, #216]	; (8002f70 <main+0x224>)
 8002e96:	f001 f8c8 	bl	800402a <HAL_GPIO_TogglePin>

				memset(trans_str, 0, STR_LEN);
 8002e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4839      	ldr	r0, [pc, #228]	; (8002f88 <main+0x23c>)
 8002ea2:	f003 fbf6 	bl	8006692 <memset>
				sprintf(trans_str, "%d %d", results.decode_type, results.rawlen);
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <main+0x244>)
 8002ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <main+0x244>)
 8002eb0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002eb4:	4937      	ldr	r1, [pc, #220]	; (8002f94 <main+0x248>)
 8002eb6:	4834      	ldr	r0, [pc, #208]	; (8002f88 <main+0x23c>)
 8002eb8:	f003 fcba 	bl	8006830 <siprintf>
				if (results.rawlen > 0) {
 8002ebc:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <main+0x244>)
 8002ebe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	dd18      	ble.n	8002ef8 <main+0x1ac>
					for (int i = 0; i < results.rawlen; ++i) {
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e00e      	b.n	8002eea <main+0x19e>
						sprintf(trans_str, "%s %d", trans_str, results.rawbuf[i]);
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <main+0x244>)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <main+0x23c>)
 8002edc:	492e      	ldr	r1, [pc, #184]	; (8002f98 <main+0x24c>)
 8002ede:	482a      	ldr	r0, [pc, #168]	; (8002f88 <main+0x23c>)
 8002ee0:	f003 fca6 	bl	8006830 <siprintf>
					for (int i = 0; i < results.rawlen; ++i) {
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <main+0x244>)
 8002eec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	dbe9      	blt.n	8002ecc <main+0x180>
					}
				}
				sprintf(trans_str, "%s %d", trans_str, results.bits);
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <main+0x244>)
 8002efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <main+0x23c>)
 8002f00:	4925      	ldr	r1, [pc, #148]	; (8002f98 <main+0x24c>)
 8002f02:	4821      	ldr	r0, [pc, #132]	; (8002f88 <main+0x23c>)
 8002f04:	f003 fc94 	bl	8006830 <siprintf>
				if (results.bits > 0) {
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <main+0x244>)
 8002f0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dd06      	ble.n	8002f20 <main+0x1d4>
					sprintf(trans_str, "%s %u", trans_str, results.value);
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <main+0x244>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <main+0x23c>)
 8002f18:	4920      	ldr	r1, [pc, #128]	; (8002f9c <main+0x250>)
 8002f1a:	481b      	ldr	r0, [pc, #108]	; (8002f88 <main+0x23c>)
 8002f1c:	f003 fc88 	bl	8006830 <siprintf>
				}
				len = strlen(trans_str);
 8002f20:	4819      	ldr	r0, [pc, #100]	; (8002f88 <main+0x23c>)
 8002f22:	f7fd f967 	bl	80001f4 <strlen>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <main+0x254>)
 8002f2c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, trans_str, len, 5000); // CHANGE THIS TO IT Mode After DEBUG
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <main+0x254>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f38:	4913      	ldr	r1, [pc, #76]	; (8002f88 <main+0x23c>)
 8002f3a:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <main+0x258>)
 8002f3c:	f002 fc6d 	bl	800581a <HAL_UART_Transmit>

				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f40:	2120      	movs	r1, #32
 8002f42:	480b      	ldr	r0, [pc, #44]	; (8002f70 <main+0x224>)
 8002f44:	f001 f871 	bl	800402a <HAL_GPIO_TogglePin>
				reset();
 8002f48:	f000 f9ea 	bl	8003320 <reset>
			}
			break;
 8002f4c:	bf00      	nop
		}

		if (should_receive) {
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <main+0x25c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f43f af0b 	beq.w	8002d6e <main+0x22>
			HAL_UART_Receive_IT(&huart1, recBuffer, 4);
 8002f58:	2204      	movs	r2, #4
 8002f5a:	4914      	ldr	r1, [pc, #80]	; (8002fac <main+0x260>)
 8002f5c:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <main+0x258>)
 8002f5e:	f002 fcf5 	bl	800594c <HAL_UART_Receive_IT>
		switch(mode) {
 8002f62:	e704      	b.n	8002d6e <main+0x22>
 8002f64:	20000004 	.word	0x20000004
 8002f68:	20000214 	.word	0x20000214
 8002f6c:	2000021c 	.word	0x2000021c
 8002f70:	40020000 	.word	0x40020000
 8002f74:	20000210 	.word	0x20000210
 8002f78:	20000218 	.word	0x20000218
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	004b4f54 	.word	0x004b4f54
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	2000048c 	.word	0x2000048c
 8002f8c:	2000020c 	.word	0x2000020c
 8002f90:	20000438 	.word	0x20000438
 8002f94:	08007200 	.word	0x08007200
 8002f98:	08007208 	.word	0x08007208
 8002f9c:	08007210 	.word	0x08007210
 8002fa0:	20000220 	.word	0x20000220
 8002fa4:	200006e4 	.word	0x200006e4
 8002fa8:	20000008 	.word	0x20000008
 8002fac:	200005b8 	.word	0x200005b8

08002fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b094      	sub	sp, #80	; 0x50
 8002fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb6:	f107 0320 	add.w	r3, r7, #32
 8002fba:	2230      	movs	r2, #48	; 0x30
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fb67 	bl	8006692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	4b27      	ldr	r3, [pc, #156]	; (8003078 <SystemClock_Config+0xc8>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <SystemClock_Config+0xc8>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <SystemClock_Config+0xc8>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <SystemClock_Config+0xcc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <SystemClock_Config+0xcc>)
 8002ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b1e      	ldr	r3, [pc, #120]	; (800307c <SystemClock_Config+0xcc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003010:	2301      	movs	r3, #1
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003014:	2310      	movs	r3, #16
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003018:	2302      	movs	r3, #2
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800301c:	2300      	movs	r3, #0
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003020:	2308      	movs	r3, #8
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003024:	2348      	movs	r3, #72	; 0x48
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003028:	2302      	movs	r3, #2
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800302c:	2304      	movs	r3, #4
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003030:	f107 0320 	add.w	r3, r7, #32
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f813 	bl	8004060 <HAL_RCC_OscConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003040:	f000 fa74 	bl	800352c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003044:	230f      	movs	r3, #15
 8003046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003048:	2302      	movs	r3, #2
 800304a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f001 fa6d 	bl	8004540 <HAL_RCC_ClockConfig>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800306c:	f000 fa5e 	bl	800352c <Error_Handler>
  }
}
 8003070:	bf00      	nop
 8003072:	3750      	adds	r7, #80	; 0x50
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000

08003080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08e      	sub	sp, #56	; 0x38
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003094:	f107 0320 	add.w	r3, r7, #32
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
 80030ac:	615a      	str	r2, [r3, #20]
 80030ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <MX_TIM4_Init+0xe8>)
 80030b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030b8:	2247      	movs	r2, #71	; 0x47
 80030ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030c4:	2209      	movs	r2, #9
 80030c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030d4:	4823      	ldr	r0, [pc, #140]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030d6:	f001 fc25 	bl	8004924 <HAL_TIM_Base_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80030e0:	f000 fa24 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ee:	4619      	mov	r1, r3
 80030f0:	481c      	ldr	r0, [pc, #112]	; (8003164 <MX_TIM4_Init+0xe4>)
 80030f2:	f001 ff17 	bl	8004f24 <HAL_TIM_ConfigClockSource>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80030fc:	f000 fa16 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003100:	4818      	ldr	r0, [pc, #96]	; (8003164 <MX_TIM4_Init+0xe4>)
 8003102:	f001 fc8e 	bl	8004a22 <HAL_TIM_PWM_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800310c:	f000 fa0e 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003118:	f107 0320 	add.w	r3, r7, #32
 800311c:	4619      	mov	r1, r3
 800311e:	4811      	ldr	r0, [pc, #68]	; (8003164 <MX_TIM4_Init+0xe4>)
 8003120:	f002 faac 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800312a:	f000 f9ff 	bl	800352c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312e:	2360      	movs	r3, #96	; 0x60
 8003130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	4807      	ldr	r0, [pc, #28]	; (8003164 <MX_TIM4_Init+0xe4>)
 8003146:	f001 fe27 	bl	8004d98 <HAL_TIM_PWM_ConfigChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003150:	f000 f9ec 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <MX_TIM4_Init+0xe4>)
 8003156:	f000 fa41 	bl	80035dc <HAL_TIM_MspPostInit>

}
 800315a:	bf00      	nop
 800315c:	3738      	adds	r7, #56	; 0x38
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000044c 	.word	0x2000044c
 8003168:	40000800 	.word	0x40000800

0800316c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <MX_USART1_UART_Init+0x60>)
 8003174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003178:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800317c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003192:	220c      	movs	r2, #12
 8003194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800319c:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a2:	4809      	ldr	r0, [pc, #36]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 80031a4:	f002 faec 	bl	8005780 <HAL_UART_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031ae:	f000 f9bd 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC); // TX Flag
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); // RX Flag
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <MX_USART1_UART_Init+0x5c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200006e4 	.word	0x200006e4
 80031cc:	40011000 	.word	0x40011000

080031d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <MX_USART2_UART_Init+0x50>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <MX_USART2_UART_Init+0x4c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_USART2_UART_Init+0x4c>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003206:	4805      	ldr	r0, [pc, #20]	; (800321c <MX_USART2_UART_Init+0x4c>)
 8003208:	f002 faba 	bl	8005780 <HAL_UART_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003212:	f000 f98b 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000728 	.word	0x20000728
 8003220:	40004400 	.word	0x40004400

08003224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <MX_GPIO_Init+0xe8>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a32      	ldr	r2, [pc, #200]	; (800330c <MX_GPIO_Init+0xe8>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <MX_GPIO_Init+0xe8>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <MX_GPIO_Init+0xe8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a2b      	ldr	r2, [pc, #172]	; (800330c <MX_GPIO_Init+0xe8>)
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <MX_GPIO_Init+0xe8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <MX_GPIO_Init+0xe8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a24      	ldr	r2, [pc, #144]	; (800330c <MX_GPIO_Init+0xe8>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <MX_GPIO_Init+0xe8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <MX_GPIO_Init+0xe8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <MX_GPIO_Init+0xe8>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <MX_GPIO_Init+0xe8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2120      	movs	r1, #32
 80032ae:	4818      	ldr	r0, [pc, #96]	; (8003310 <MX_GPIO_Init+0xec>)
 80032b0:	f000 fea2 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <MX_GPIO_Init+0xf0>)
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4813      	ldr	r0, [pc, #76]	; (8003318 <MX_GPIO_Init+0xf4>)
 80032ca:	f000 fcfb 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80032ce:	2320      	movs	r3, #32
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	480a      	ldr	r0, [pc, #40]	; (8003310 <MX_GPIO_Init+0xec>)
 80032e6:	f000 fced 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_In_Pin */
  GPIO_InitStruct.Pin = IR_In_Pin;
 80032ea:	2320      	movs	r3, #32
 80032ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_In_GPIO_Port, &GPIO_InitStruct);
 80032f6:	f107 0314 	add.w	r3, r7, #20
 80032fa:	4619      	mov	r1, r3
 80032fc:	4807      	ldr	r0, [pc, #28]	; (800331c <MX_GPIO_Init+0xf8>)
 80032fe:	f000 fce1 	bl	8003cc4 <HAL_GPIO_Init>

}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	10210000 	.word	0x10210000
 8003318:	40020800 	.word	0x40020800
 800331c:	40020400 	.word	0x40020400

08003320 <reset>:

/* USER CODE BEGIN 4 */
void reset() {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	mode = NONE;
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <reset+0x44>)
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
	protocol = UNUSED;
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <reset+0x48>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	601a      	str	r2, [r3, #0]
	protocolBits = 0;
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <reset+0x4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
	protocolCode = 0;
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <reset+0x50>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
	if (rawData) {
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <reset+0x54>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <reset+0x30>
		free(rawData);
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <reset+0x54>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 f98e 	bl	800666c <free>
	}
	rawLen = 0;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <reset+0x58>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	should_receive = 1;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <reset+0x5c>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
	my_disable();
 800335c:	f7ff fa90 	bl	8002880 <my_disable>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000004 	.word	0x20000004
 8003368:	20000000 	.word	0x20000000
 800336c:	2000021c 	.word	0x2000021c
 8003370:	20000218 	.word	0x20000218
 8003374:	20000210 	.word	0x20000210
 8003378:	20000214 	.word	0x20000214
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_UART_RxCpltCallback>:
// Only use recBuffer here. Otherwise it wouldnt be complete.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a59      	ldr	r2, [pc, #356]	; (80034f4 <HAL_UART_RxCpltCallback+0x174>)
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 80ad 	bne.w	80034ee <HAL_UART_RxCpltCallback+0x16e>
		int is_ok = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
		char message[5] = "OK";
 8003398:	f644 334f 	movw	r3, #19279	; 0x4b4f
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	2300      	movs	r3, #0
 80033a0:	743b      	strb	r3, [r7, #16]

		if (mode == NONE) {
 80033a2:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <HAL_UART_RxCpltCallback+0x178>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d129      	bne.n	80033fe <HAL_UART_RxCpltCallback+0x7e>
			if (protocol != UNUSED) {
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <HAL_UART_RxCpltCallback+0x17c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d024      	beq.n	80033fe <HAL_UART_RxCpltCallback+0x7e>
				memset(trans_str, 0, STR_LEN);
 80033b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033b8:	2100      	movs	r1, #0
 80033ba:	4851      	ldr	r0, [pc, #324]	; (8003500 <HAL_UART_RxCpltCallback+0x180>)
 80033bc:	f003 f969 	bl	8006692 <memset>
				len = strlen(recBuffer);
 80033c0:	4850      	ldr	r0, [pc, #320]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 80033c2:	f7fc ff17 	bl	80001f4 <strlen>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <HAL_UART_RxCpltCallback+0x188>)
 80033cc:	601a      	str	r2, [r3, #0]
				memcpy(trans_str, recBuffer, sizeof(char) * len);
 80033ce:	4b4e      	ldr	r3, [pc, #312]	; (8003508 <HAL_UART_RxCpltCallback+0x188>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	494b      	ldr	r1, [pc, #300]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 80033d6:	484a      	ldr	r0, [pc, #296]	; (8003500 <HAL_UART_RxCpltCallback+0x180>)
 80033d8:	f003 f950 	bl	800667c <memcpy>
				mode = DECODE;
 80033dc:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_UART_RxCpltCallback+0x178>)
 80033de:	2203      	movs	r2, #3
 80033e0:	701a      	strb	r2, [r3, #0]
				memset(recBuffer, 0, STR_LEN);
 80033e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033e6:	2100      	movs	r1, #0
 80033e8:	4846      	ldr	r0, [pc, #280]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 80033ea:	f003 f952 	bl	8006692 <memset>
				HAL_UART_Transmit(&huart1, message, 2, 10);
 80033ee:	f107 010c 	add.w	r1, r7, #12
 80033f2:	230a      	movs	r3, #10
 80033f4:	2202      	movs	r2, #2
 80033f6:	4845      	ldr	r0, [pc, #276]	; (800350c <HAL_UART_RxCpltCallback+0x18c>)
 80033f8:	f002 fa0f 	bl	800581a <HAL_UART_Transmit>
 80033fc:	e077      	b.n	80034ee <HAL_UART_RxCpltCallback+0x16e>
				return;
			}
		}

		if (strcmp(recBuffer, "RUOK") == 0) {
 80033fe:	4944      	ldr	r1, [pc, #272]	; (8003510 <HAL_UART_RxCpltCallback+0x190>)
 8003400:	4840      	ldr	r0, [pc, #256]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 8003402:	f7fc feed 	bl	80001e0 <strcmp>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_UART_RxCpltCallback+0x9a>
			// Are you ok message.
			protocol = UNUSED;
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_UART_RxCpltCallback+0x17c>)
 800340e:	f04f 32ff 	mov.w	r2, #4294967295
 8003412:	601a      	str	r2, [r3, #0]
			is_ok = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	e057      	b.n	80034ca <HAL_UART_RxCpltCallback+0x14a>
		}
		else if (strcmp(recBuffer, "RSET") == 0) {
 800341a:	493e      	ldr	r1, [pc, #248]	; (8003514 <HAL_UART_RxCpltCallback+0x194>)
 800341c:	4839      	ldr	r0, [pc, #228]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 800341e:	f7fc fedf 	bl	80001e0 <strcmp>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_UART_RxCpltCallback+0xb2>
			// Reset message. Reset everything.
			reset();
 8003428:	f7ff ff7a 	bl	8003320 <reset>
			is_ok = 1;
 800342c:	2301      	movs	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e04b      	b.n	80034ca <HAL_UART_RxCpltCallback+0x14a>
		}
		else if (strcmp(recBuffer, "RECV") == 0) {
 8003432:	4939      	ldr	r1, [pc, #228]	; (8003518 <HAL_UART_RxCpltCallback+0x198>)
 8003434:	4833      	ldr	r0, [pc, #204]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 8003436:	f7fc fed3 	bl	80001e0 <strcmp>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_UART_RxCpltCallback+0xcc>
			mode = RECV;
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_UART_RxCpltCallback+0x178>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
			is_ok = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e03e      	b.n	80034ca <HAL_UART_RxCpltCallback+0x14a>
		}
		else if (recBuffer[0] == 'R' && recBuffer[1] == 'W') {
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b52      	cmp	r3, #82	; 0x52
 8003452:	d11f      	bne.n	8003494 <HAL_UART_RxCpltCallback+0x114>
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b57      	cmp	r3, #87	; 0x57
 800345a:	d11b      	bne.n	8003494 <HAL_UART_RxCpltCallback+0x114>
			// Raw command being sent. Prepare to receive raw timings array
			int len = atoi(&recBuffer[2]);
 800345c:	482f      	ldr	r0, [pc, #188]	; (800351c <HAL_UART_RxCpltCallback+0x19c>)
 800345e:	f003 f8c7 	bl	80065f0 <atoi>
 8003462:	61b8      	str	r0, [r7, #24]
			if (len > 0 && len < 100) {
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	dd08      	ble.n	800347c <HAL_UART_RxCpltCallback+0xfc>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b63      	cmp	r3, #99	; 0x63
 800346e:	dc05      	bgt.n	800347c <HAL_UART_RxCpltCallback+0xfc>
				protocol = UNKNOWN;
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_UART_RxCpltCallback+0x17c>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
				rawLen = len;
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4a29      	ldr	r2, [pc, #164]	; (8003520 <HAL_UART_RxCpltCallback+0x1a0>)
 800347a:	6013      	str	r3, [r2, #0]
			}
			should_receive = 0;
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_UART_RxCpltCallback+0x1a4>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, recBuffer, STR_LEN);
 8003482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003486:	491f      	ldr	r1, [pc, #124]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 8003488:	4820      	ldr	r0, [pc, #128]	; (800350c <HAL_UART_RxCpltCallback+0x18c>)
 800348a:	f002 fa5f 	bl	800594c <HAL_UART_Receive_IT>
			is_ok = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
		else if (recBuffer[0] == 'R' && recBuffer[1] == 'W') {
 8003492:	e01a      	b.n	80034ca <HAL_UART_RxCpltCallback+0x14a>
		}
		else if (recBuffer[0] == 'R') {
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b52      	cmp	r3, #82	; 0x52
 800349a:	d116      	bne.n	80034ca <HAL_UART_RxCpltCallback+0x14a>
			// Raw command being sent. Prepare to receive raw timings array
			int prot = atoi(&recBuffer[1]);
 800349c:	4822      	ldr	r0, [pc, #136]	; (8003528 <HAL_UART_RxCpltCallback+0x1a8>)
 800349e:	f003 f8a7 	bl	80065f0 <atoi>
 80034a2:	6178      	str	r0, [r7, #20]
			if (prot > 0 && prot < 100) {
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dd05      	ble.n	80034b6 <HAL_UART_RxCpltCallback+0x136>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b63      	cmp	r3, #99	; 0x63
 80034ae:	dc02      	bgt.n	80034b6 <HAL_UART_RxCpltCallback+0x136>
				protocol = prot;
 80034b0:	4a12      	ldr	r2, [pc, #72]	; (80034fc <HAL_UART_RxCpltCallback+0x17c>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6013      	str	r3, [r2, #0]
			}
			should_receive = 0;
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_UART_RxCpltCallback+0x1a4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, recBuffer, SHORT_STR_LEN);
 80034bc:	2232      	movs	r2, #50	; 0x32
 80034be:	4911      	ldr	r1, [pc, #68]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 80034c0:	4812      	ldr	r0, [pc, #72]	; (800350c <HAL_UART_RxCpltCallback+0x18c>)
 80034c2:	f002 fa43 	bl	800594c <HAL_UART_Receive_IT>
			is_ok = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
		}
		memset(recBuffer, 0, STR_LEN);
 80034ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ce:	2100      	movs	r1, #0
 80034d0:	480c      	ldr	r0, [pc, #48]	; (8003504 <HAL_UART_RxCpltCallback+0x184>)
 80034d2:	f003 f8de 	bl	8006692 <memset>
		if (is_ok == 0) {
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_UART_RxCpltCallback+0x160>
			HAL_NVIC_SystemReset();
 80034dc:	f000 fbbf 	bl	8003c5e <HAL_NVIC_SystemReset>
		}
		HAL_UART_Transmit(&huart1, message, 2, 10);
 80034e0:	f107 010c 	add.w	r1, r7, #12
 80034e4:	230a      	movs	r3, #10
 80034e6:	2202      	movs	r2, #2
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <HAL_UART_RxCpltCallback+0x18c>)
 80034ea:	f002 f996 	bl	800581a <HAL_UART_Transmit>
	}
}
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40011000 	.word	0x40011000
 80034f8:	20000004 	.word	0x20000004
 80034fc:	20000000 	.word	0x20000000
 8003500:	2000048c 	.word	0x2000048c
 8003504:	200005b8 	.word	0x200005b8
 8003508:	20000220 	.word	0x20000220
 800350c:	200006e4 	.word	0x200006e4
 8003510:	08007218 	.word	0x08007218
 8003514:	08007220 	.word	0x08007220
 8003518:	08007228 	.word	0x08007228
 800351c:	200005ba 	.word	0x200005ba
 8003520:	20000214 	.word	0x20000214
 8003524:	20000008 	.word	0x20000008
 8003528:	200005b9 	.word	0x200005b9

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_MspInit+0x4c>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_MspInit+0x4c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_MspInit+0x4c>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x4c>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800357a:	2007      	movs	r0, #7
 800357c:	f000 fb2c 	bl	8003bd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_TIM_Base_MspInit+0x48>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d115      	bne.n	80035ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_TIM_Base_MspInit+0x4c>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2100      	movs	r1, #0
 80035be:	201e      	movs	r0, #30
 80035c0:	f000 fb15 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c4:	201e      	movs	r0, #30
 80035c6:	f000 fb2e 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_TIM_MspPostInit+0x68>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d11d      	bne.n	800363a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_TIM_MspPostInit+0x6c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_TIM_MspPostInit+0x6c>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_TIM_MspPostInit+0x6c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800361a:	2340      	movs	r3, #64	; 0x40
 800361c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800362a:	2302      	movs	r3, #2
 800362c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	4619      	mov	r1, r3
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <HAL_TIM_MspPostInit+0x70>)
 8003636:	f000 fb45 	bl	8003cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40000800 	.word	0x40000800
 8003648:	40023800 	.word	0x40023800
 800364c:	40020400 	.word	0x40020400

08003650 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_TIM_Base_MspDeInit+0x2c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d108      	bne.n	8003674 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_TIM_Base_MspDeInit+0x30>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a06      	ldr	r2, [pc, #24]	; (8003680 <HAL_TIM_Base_MspDeInit+0x30>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800366e:	201e      	movs	r0, #30
 8003670:	f000 fae7 	bl	8003c42 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40000800 	.word	0x40000800
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_UART_MspInit+0xf8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d135      	bne.n	8003712 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036b0:	f043 0310 	orr.w	r3, r3, #16
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_UART_MspInit+0xfc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ec:	2303      	movs	r3, #3
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036f0:	2307      	movs	r3, #7
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	4619      	mov	r1, r3
 80036fa:	4822      	ldr	r0, [pc, #136]	; (8003784 <HAL_UART_MspInit+0x100>)
 80036fc:	f000 fae2 	bl	8003cc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2100      	movs	r1, #0
 8003704:	2025      	movs	r0, #37	; 0x25
 8003706:	f000 fa72 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800370a:	2025      	movs	r0, #37	; 0x25
 800370c:	f000 fa8b 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003710:	e030      	b.n	8003774 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <HAL_UART_MspInit+0x104>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d12b      	bne.n	8003774 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_UART_MspInit+0xfc>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_UART_MspInit+0xfc>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_UART_MspInit+0xfc>)
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_UART_MspInit+0xfc>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <HAL_UART_MspInit+0xfc>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6313      	str	r3, [r2, #48]	; 0x30
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_UART_MspInit+0xfc>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003754:	230c      	movs	r3, #12
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003764:	2307      	movs	r3, #7
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	f107 031c 	add.w	r3, r7, #28
 800376c:	4619      	mov	r1, r3
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <HAL_UART_MspInit+0x100>)
 8003770:	f000 faa8 	bl	8003cc4 <HAL_GPIO_Init>
}
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40011000 	.word	0x40011000
 8003780:	40023800 	.word	0x40023800
 8003784:	40020000 	.word	0x40020000
 8003788:	40004400 	.word	0x40004400

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler+0x4>

080037a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <MemManage_Handler+0x4>

080037a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <BusFault_Handler+0x4>

080037ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <UsageFault_Handler+0x4>

080037b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e0:	f000 f8d4 	bl	800398c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <TIM4_IRQHandler+0x10>)
 80037ee:	f001 f9cb 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000044c 	.word	0x2000044c

080037fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <USART1_IRQHandler+0x10>)
 8003802:	f002 f8f9 	bl	80059f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200006e4 	.word	0x200006e4

08003810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <_sbrk+0x50>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <_sbrk+0x16>
		heap_end = &end;
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <_sbrk+0x50>)
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <_sbrk+0x54>)
 8003824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <_sbrk+0x50>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <_sbrk+0x50>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	466a      	mov	r2, sp
 8003836:	4293      	cmp	r3, r2
 8003838:	d907      	bls.n	800384a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800383a:	f002 fee5 	bl	8006608 <__errno>
 800383e:	4602      	mov	r2, r0
 8003840:	230c      	movs	r3, #12
 8003842:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003844:	f04f 33ff 	mov.w	r3, #4294967295
 8003848:	e006      	b.n	8003858 <_sbrk+0x48>
	}

	heap_end += incr;
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <_sbrk+0x50>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	4a03      	ldr	r2, [pc, #12]	; (8003860 <_sbrk+0x50>)
 8003854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000224 	.word	0x20000224
 8003864:	20000770 	.word	0x20000770

08003868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <SystemInit+0x28>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <SystemInit+0x28>)
 8003874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SystemInit+0x28>)
 800387e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003882:	609a      	str	r2, [r3, #8]
#endif
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800389a:	e003      	b.n	80038a4 <LoopCopyDataInit>

0800389c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800389e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038a2:	3104      	adds	r1, #4

080038a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038a4:	480b      	ldr	r0, [pc, #44]	; (80038d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038ac:	d3f6      	bcc.n	800389c <CopyDataInit>
  ldr  r2, =_sbss
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038b0:	e002      	b.n	80038b8 <LoopFillZerobss>

080038b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038b4:	f842 3b04 	str.w	r3, [r2], #4

080038b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038bc:	d3f9      	bcc.n	80038b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038be:	f7ff ffd3 	bl	8003868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c2:	f002 fea7 	bl	8006614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c6:	f7ff fa41 	bl	8002d4c <main>
  bx  lr    
 80038ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80038d0:	08007398 	.word	0x08007398
  ldr  r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038d8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80038dc:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80038e0:	20000770 	.word	0x20000770

080038e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC_IRQHandler>
	...

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f961 	bl	8003bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	2000      	movs	r0, #0
 8003918:	f000 f808 	bl	800392c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f7ff fe0e 	bl	800353c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_InitTick+0x54>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_InitTick+0x58>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4619      	mov	r1, r3
 800393e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003942:	fbb3 f3f1 	udiv	r3, r3, r1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f98b 	bl	8003c66 <HAL_SYSTICK_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00e      	b.n	8003978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d80a      	bhi.n	8003976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f000 f941 	bl	8003bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800396c:	4a06      	ldr	r2, [pc, #24]	; (8003988 <HAL_InitTick+0x5c>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000010 	.word	0x20000010
 8003984:	20000018 	.word	0x20000018
 8003988:	20000014 	.word	0x20000014

0800398c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x20>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_IncTick+0x24>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_IncTick+0x24>)
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000018 	.word	0x20000018
 80039b0:	20000768 	.word	0x20000768

080039b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return uwTick;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_GetTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000768 	.word	0x20000768

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4907      	ldr	r1, [pc, #28]	; (8003a68 <__NVIC_EnableIRQ+0x38>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	db10      	blt.n	8003aa0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	f003 021f 	and.w	r2, r3, #31
 8003a84:	4909      	ldr	r1, [pc, #36]	; (8003aac <__NVIC_DisableIRQ+0x40>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a92:	3320      	adds	r3, #32
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	; (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003b70:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <__NVIC_SystemReset+0x20>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <__NVIC_SystemReset+0x20>)
 8003b7e:	4b04      	ldr	r3, [pc, #16]	; (8003b90 <__NVIC_SystemReset+0x24>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
 8003b84:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <__NVIC_SystemReset+0x1c>
 8003b8c:	e000ed00 	.word	0xe000ed00
 8003b90:	05fa0004 	.word	0x05fa0004

08003b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d301      	bcc.n	8003baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <SysTick_Config+0x40>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f7ff ff7a 	bl	8003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SysTick_Config+0x40>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SysTick_Config+0x40>)
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010

08003bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fef3 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c00:	f7ff ff08 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f7ff ff7a 	bl	8003b04 <NVIC_EncodePriority>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff49 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fefb 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff0b 	bl	8003a6c <__NVIC_DisableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003c62:	f7ff ff83 	bl	8003b6c <__NVIC_SystemReset>

08003c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff90 	bl	8003b94 <SysTick_Config>
 8003c74:	4603      	mov	r3, r0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d004      	beq.n	8003c9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e00c      	b.n	8003cb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2205      	movs	r2, #5
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e159      	b.n	8003f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	f040 8148 	bne.w	8003f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00b      	beq.n	8003d1e <HAL_GPIO_Init+0x5a>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d007      	beq.n	8003d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d12:	2b11      	cmp	r3, #17
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0xfc>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d123      	bne.n	8003e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0203 	and.w	r2, r3, #3
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80a2 	beq.w	8003f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <HAL_GPIO_Init+0x2e4>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4a55      	ldr	r2, [pc, #340]	; (8003fa8 <HAL_GPIO_Init+0x2e4>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e58:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5a:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_GPIO_Init+0x2e4>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e66:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_GPIO_Init+0x2e8>)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a48      	ldr	r2, [pc, #288]	; (8003fb0 <HAL_GPIO_Init+0x2ec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_Init+0x202>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_GPIO_Init+0x2f0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_Init+0x1fe>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_GPIO_Init+0x2f4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_Init+0x1fa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_GPIO_Init+0x2f8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x1f6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a44      	ldr	r2, [pc, #272]	; (8003fc0 <HAL_GPIO_Init+0x2fc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_Init+0x1f2>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x204>
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x204>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x204>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x204>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x204>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	f002 0203 	and.w	r2, r2, #3
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed8:	4934      	ldr	r1, [pc, #208]	; (8003fac <HAL_GPIO_Init+0x2e8>)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f0a:	4a2e      	ldr	r2, [pc, #184]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f5e:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f64:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_GPIO_Init+0x300>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	f67f aea2 	bls.w	8003ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3724      	adds	r7, #36	; 0x24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40013c00 	.word	0x40013c00

08003fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e001      	b.n	8003fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004014:	e003      	b.n	800401e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	401a      	ands	r2, r3
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	429a      	cmp	r2, r3
 8004042:	d104      	bne.n	800404e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	041a      	lsls	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800404c:	e002      	b.n	8004054 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e25b      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d075      	beq.n	800416a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407e:	4ba3      	ldr	r3, [pc, #652]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b04      	cmp	r3, #4
 8004088:	d00c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408a:	4ba0      	ldr	r3, [pc, #640]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d112      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b9d      	ldr	r3, [pc, #628]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a2:	d10b      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	4b99      	ldr	r3, [pc, #612]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d05b      	beq.n	8004168 <HAL_RCC_OscConfig+0x108>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d157      	bne.n	8004168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e236      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCC_OscConfig+0x74>
 80040c6:	4b91      	ldr	r3, [pc, #580]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a90      	ldr	r2, [pc, #576]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e01d      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x98>
 80040de:	4b8b      	ldr	r3, [pc, #556]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a8a      	ldr	r2, [pc, #552]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b88      	ldr	r3, [pc, #544]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a87      	ldr	r2, [pc, #540]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040f8:	4b84      	ldr	r3, [pc, #528]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a83      	ldr	r2, [pc, #524]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b81      	ldr	r3, [pc, #516]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a80      	ldr	r2, [pc, #512]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 800410a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7ff fc4c 	bl	80039b4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004120:	f7ff fc48 	bl	80039b4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1fb      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xc0>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7ff fc38 	bl	80039b4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004148:	f7ff fc34 	bl	80039b4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e1e7      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415a:	4b6c      	ldr	r3, [pc, #432]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0xe8>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d063      	beq.n	800423e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004176:	4b65      	ldr	r3, [pc, #404]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004182:	4b62      	ldr	r3, [pc, #392]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418a:	2b08      	cmp	r3, #8
 800418c:	d11c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b5f      	ldr	r3, [pc, #380]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	4b5c      	ldr	r3, [pc, #368]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x152>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e1bb      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b56      	ldr	r3, [pc, #344]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4952      	ldr	r1, [pc, #328]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	e03a      	b.n	800423e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_OscConfig+0x2b0>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7ff fbed 	bl	80039b4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041de:	f7ff fbe9 	bl	80039b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e19c      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	4b43      	ldr	r3, [pc, #268]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4940      	ldr	r1, [pc, #256]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004212:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <HAL_RCC_OscConfig+0x2b0>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7ff fbcc 	bl	80039b4 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004220:	f7ff fbc8 	bl	80039b4 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e17b      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d030      	beq.n	80042ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b30      	ldr	r3, [pc, #192]	; (8004314 <HAL_RCC_OscConfig+0x2b4>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7ff fbac 	bl	80039b4 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004260:	f7ff fba8 	bl	80039b4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e15b      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x200>
 800427e:	e015      	b.n	80042ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCC_OscConfig+0x2b4>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7ff fb95 	bl	80039b4 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428e:	f7ff fb91 	bl	80039b4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e144      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a0 	beq.w	80043fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a0e      	ldr	r2, [pc, #56]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_OscConfig+0x2b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d121      	bne.n	800433a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <HAL_RCC_OscConfig+0x2b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a07      	ldr	r2, [pc, #28]	; (8004318 <HAL_RCC_OscConfig+0x2b8>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004302:	f7ff fb57 	bl	80039b4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	e011      	b.n	800432e <HAL_RCC_OscConfig+0x2ce>
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	42470000 	.word	0x42470000
 8004314:	42470e80 	.word	0x42470e80
 8004318:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7ff fb4a 	bl	80039b4 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0fd      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_OscConfig+0x4d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x2f0>
 8004342:	4b7d      	ldr	r3, [pc, #500]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	e01c      	b.n	800438a <HAL_RCC_OscConfig+0x32a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x312>
 8004358:	4b77      	ldr	r3, [pc, #476]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	4a76      	ldr	r2, [pc, #472]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	6713      	str	r3, [r2, #112]	; 0x70
 8004364:	4b74      	ldr	r3, [pc, #464]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	4a73      	ldr	r2, [pc, #460]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
 8004370:	e00b      	b.n	800438a <HAL_RCC_OscConfig+0x32a>
 8004372:	4b71      	ldr	r3, [pc, #452]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a70      	ldr	r2, [pc, #448]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	4b6e      	ldr	r3, [pc, #440]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a6d      	ldr	r2, [pc, #436]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d015      	beq.n	80043be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004392:	f7ff fb0f 	bl	80039b4 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7ff fb0b 	bl	80039b4 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0bc      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCC_OscConfig+0x33a>
 80043bc:	e014      	b.n	80043e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7ff faf9 	bl	80039b4 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7ff faf5 	bl	80039b4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0a6      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	4b56      	ldr	r3, [pc, #344]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ee      	bne.n	80043c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b52      	ldr	r3, [pc, #328]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8092 	beq.w	8004528 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004404:	4b4c      	ldr	r3, [pc, #304]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d05c      	beq.n	80044ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d141      	bne.n	800449c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004418:	4b48      	ldr	r3, [pc, #288]	; (800453c <HAL_RCC_OscConfig+0x4dc>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7ff fac9 	bl	80039b4 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004426:	f7ff fac5 	bl	80039b4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e078      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004438:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	019b      	lsls	r3, r3, #6
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	3b01      	subs	r3, #1
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	4933      	ldr	r1, [pc, #204]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_RCC_OscConfig+0x4dc>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7ff fa9e 	bl	80039b4 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447c:	f7ff fa9a 	bl	80039b4 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e04d      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x41c>
 800449a:	e045      	b.n	8004528 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x4dc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7ff fa87 	bl	80039b4 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044aa:	f7ff fa83 	bl	80039b4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e036      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x44a>
 80044c8:	e02e      	b.n	8004528 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e029      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d6:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_RCC_OscConfig+0x4d8>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d11c      	bne.n	8004524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d115      	bne.n	8004524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044fe:	4013      	ands	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004504:	4293      	cmp	r3, r2
 8004506:	d10d      	bne.n	8004524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d106      	bne.n	8004524 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40007000 	.word	0x40007000
 8004538:	40023800 	.word	0x40023800
 800453c:	42470060 	.word	0x42470060

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cc      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d90c      	bls.n	800457c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b65      	ldr	r3, [pc, #404]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800459e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d044      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d119      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b3f      	ldr	r3, [pc, #252]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e067      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4934      	ldr	r1, [pc, #208]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7ff f9c0 	bl	80039b4 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7ff f9bc 	bl	80039b4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2b      	ldr	r3, [pc, #172]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d20c      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4601      	mov	r1, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	fa21 f303 	lsr.w	r3, r1, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff f920 	bl	800392c <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023c00 	.word	0x40023c00
 80046fc:	40023800 	.word	0x40023800
 8004700:	08007230 	.word	0x08007230
 8004704:	20000010 	.word	0x20000010
 8004708:	20000014 	.word	0x20000014

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004722:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b04      	cmp	r3, #4
 800472c:	d007      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x32>
 800472e:	2b08      	cmp	r3, #8
 8004730:	d008      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x38>
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 80b4 	bne.w	80048a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800473a:	60bb      	str	r3, [r7, #8]
       break;
 800473c:	e0b3      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b5e      	ldr	r3, [pc, #376]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004740:	60bb      	str	r3, [r7, #8]
      break;
 8004742:	e0b0      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474e:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04a      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	ea03 0501 	and.w	r5, r3, r1
 8004770:	ea04 0602 	and.w	r6, r4, r2
 8004774:	4629      	mov	r1, r5
 8004776:	4632      	mov	r2, r6
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	0154      	lsls	r4, r2, #5
 8004782:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004786:	014b      	lsls	r3, r1, #5
 8004788:	4619      	mov	r1, r3
 800478a:	4622      	mov	r2, r4
 800478c:	1b49      	subs	r1, r1, r5
 800478e:	eb62 0206 	sbc.w	r2, r2, r6
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f04f 0400 	mov.w	r4, #0
 800479a:	0194      	lsls	r4, r2, #6
 800479c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047a0:	018b      	lsls	r3, r1, #6
 80047a2:	1a5b      	subs	r3, r3, r1
 80047a4:	eb64 0402 	sbc.w	r4, r4, r2
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	00e2      	lsls	r2, r4, #3
 80047b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047b6:	00d9      	lsls	r1, r3, #3
 80047b8:	460b      	mov	r3, r1
 80047ba:	4614      	mov	r4, r2
 80047bc:	195b      	adds	r3, r3, r5
 80047be:	eb44 0406 	adc.w	r4, r4, r6
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	0262      	lsls	r2, r4, #9
 80047cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047d0:	0259      	lsls	r1, r3, #9
 80047d2:	460b      	mov	r3, r1
 80047d4:	4614      	mov	r4, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	4621      	mov	r1, r4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f04f 0400 	mov.w	r4, #0
 80047e0:	461a      	mov	r2, r3
 80047e2:	4623      	mov	r3, r4
 80047e4:	f7fc f9e2 	bl	8000bac <__aeabi_uldivmod>
 80047e8:	4603      	mov	r3, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e049      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f0:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	ea03 0501 	and.w	r5, r3, r1
 8004806:	ea04 0602 	and.w	r6, r4, r2
 800480a:	4629      	mov	r1, r5
 800480c:	4632      	mov	r2, r6
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f04f 0400 	mov.w	r4, #0
 8004816:	0154      	lsls	r4, r2, #5
 8004818:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800481c:	014b      	lsls	r3, r1, #5
 800481e:	4619      	mov	r1, r3
 8004820:	4622      	mov	r2, r4
 8004822:	1b49      	subs	r1, r1, r5
 8004824:	eb62 0206 	sbc.w	r2, r2, r6
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	0194      	lsls	r4, r2, #6
 8004832:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004836:	018b      	lsls	r3, r1, #6
 8004838:	1a5b      	subs	r3, r3, r1
 800483a:	eb64 0402 	sbc.w	r4, r4, r2
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	00e2      	lsls	r2, r4, #3
 8004848:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800484c:	00d9      	lsls	r1, r3, #3
 800484e:	460b      	mov	r3, r1
 8004850:	4614      	mov	r4, r2
 8004852:	195b      	adds	r3, r3, r5
 8004854:	eb44 0406 	adc.w	r4, r4, r6
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	02a2      	lsls	r2, r4, #10
 8004862:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004866:	0299      	lsls	r1, r3, #10
 8004868:	460b      	mov	r3, r1
 800486a:	4614      	mov	r4, r2
 800486c:	4618      	mov	r0, r3
 800486e:	4621      	mov	r1, r4
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	461a      	mov	r2, r3
 8004878:	4623      	mov	r3, r4
 800487a:	f7fc f997 	bl	8000bac <__aeabi_uldivmod>
 800487e:	4603      	mov	r3, r0
 8004880:	460c      	mov	r4, r1
 8004882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	3301      	adds	r3, #1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	60bb      	str	r3, [r7, #8]
      break;
 800489e:	e002      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a0:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048a2:	60bb      	str	r3, [r7, #8]
      break;
 80048a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a6:	68bb      	ldr	r3, [r7, #8]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	00f42400 	.word	0x00f42400
 80048b8:	007a1200 	.word	0x007a1200

080048bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000010 	.word	0x20000010

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d8:	f7ff fff0 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80048dc:	4601      	mov	r1, r0
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0a9b      	lsrs	r3, r3, #10
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4a03      	ldr	r2, [pc, #12]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	08007240 	.word	0x08007240

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004900:	f7ff ffdc 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 8004904:	4601      	mov	r1, r0
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	0b5b      	lsrs	r3, r3, #13
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40023800 	.word	0x40023800
 8004920:	08007240 	.word	0x08007240

08004924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01d      	b.n	8004972 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fe fe1e 	bl	800358c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fbbe 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f241 1311 	movw	r3, #4369	; 0x1111
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <HAL_TIM_Base_DeInit+0x40>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f240 4344 	movw	r3, #1092	; 0x444
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_Base_DeInit+0x40>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe fe48 	bl	8003650 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b06      	cmp	r3, #6
 8004a02:	d007      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e01d      	b.n	8004a70 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f815 	bl	8004a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f000 fb3f 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fdc6 	bl	8005630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a10      	ldr	r2, [pc, #64]	; (8004aec <HAL_TIM_PWM_Start+0x60>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000

08004af0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd94 	bl	8005630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <HAL_TIM_PWM_Stop+0x94>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d117      	bne.n	8004b42 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <HAL_TIM_PWM_Stop+0x52>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	f240 4344 	movw	r3, #1092	; 0x444
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_PWM_Stop+0x52>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <HAL_TIM_PWM_Stop+0x82>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	f240 4344 	movw	r3, #1092	; 0x444
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d107      	bne.n	8004b72 <HAL_TIM_PWM_Stop+0x82>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40010000 	.word	0x40010000

08004b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0202 	mvn.w	r2, #2
 8004bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa6b 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa5d 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fa6e 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0204 	mvn.w	r2, #4
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa41 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa33 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa44 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0208 	mvn.w	r2, #8
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2204      	movs	r2, #4
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa17 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa09 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa1a 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0210 	mvn.w	r2, #16
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9ed 	bl	80050a6 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9df 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f9f0 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fd fbb6 	bl	8002478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b80      	cmp	r3, #128	; 0x80
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fd1a 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9b5 	bl	80050ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0220 	mvn.w	r2, #32
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fce4 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0b4      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	f200 809f 	bhi.w	8004f08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004dca:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004f09 	.word	0x08004f09
 8004dd8:	08004f09 	.word	0x08004f09
 8004ddc:	08004f09 	.word	0x08004f09
 8004de0:	08004e45 	.word	0x08004e45
 8004de4:	08004f09 	.word	0x08004f09
 8004de8:	08004f09 	.word	0x08004f09
 8004dec:	08004f09 	.word	0x08004f09
 8004df0:	08004e87 	.word	0x08004e87
 8004df4:	08004f09 	.word	0x08004f09
 8004df8:	08004f09 	.word	0x08004f09
 8004dfc:	08004f09 	.word	0x08004f09
 8004e00:	08004ec7 	.word	0x08004ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f9ea 	bl	80051e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0208 	orr.w	r2, r2, #8
 8004e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6999      	ldr	r1, [r3, #24]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	619a      	str	r2, [r3, #24]
      break;
 8004e42:	e062      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fa30 	bl	80052b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	021a      	lsls	r2, r3, #8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	619a      	str	r2, [r3, #24]
      break;
 8004e84:	e041      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fa7b 	bl	8005388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0208 	orr.w	r2, r2, #8
 8004ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0204 	bic.w	r2, r2, #4
 8004eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69d9      	ldr	r1, [r3, #28]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	61da      	str	r2, [r3, #28]
      break;
 8004ec4:	e021      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fac5 	bl	800545c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69d9      	ldr	r1, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	021a      	lsls	r2, r3, #8
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	61da      	str	r2, [r3, #28]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIM_ConfigClockSource+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e0a6      	b.n	800508a <HAL_TIM_ConfigClockSource+0x166>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d067      	beq.n	8005044 <HAL_TIM_ConfigClockSource+0x120>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d80b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x6c>
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d073      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x140>
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d802      	bhi.n	8004f86 <HAL_TIM_ConfigClockSource+0x62>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d06f      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f84:	e078      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d06c      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x140>
 8004f8a:	2b30      	cmp	r3, #48	; 0x30
 8004f8c:	d06a      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f8e:	e073      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f90:	2b70      	cmp	r3, #112	; 0x70
 8004f92:	d00d      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0x8c>
 8004f94:	2b70      	cmp	r3, #112	; 0x70
 8004f96:	d804      	bhi.n	8004fa2 <HAL_TIM_ConfigClockSource+0x7e>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d033      	beq.n	8005004 <HAL_TIM_ConfigClockSource+0xe0>
 8004f9c:	2b60      	cmp	r3, #96	; 0x60
 8004f9e:	d041      	beq.n	8005024 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004fa0:	e06a      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa6:	d066      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x152>
 8004fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fac:	d017      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004fae:	e063      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f000 fb16 	bl	80055f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
      break;
 8004fdc:	e04c      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6899      	ldr	r1, [r3, #8]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f000 faff 	bl	80055f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005000:	609a      	str	r2, [r3, #8]
      break;
 8005002:	e039      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	461a      	mov	r2, r3
 8005012:	f000 fa73 	bl	80054fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2150      	movs	r1, #80	; 0x50
 800501c:	4618      	mov	r0, r3
 800501e:	f000 facc 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8005022:	e029      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	461a      	mov	r2, r3
 8005032:	f000 fa92 	bl	800555a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2160      	movs	r1, #96	; 0x60
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fabc 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8005042:	e019      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	461a      	mov	r2, r3
 8005052:	f000 fa53 	bl	80054fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2140      	movs	r1, #64	; 0x40
 800505c:	4618      	mov	r0, r3
 800505e:	f000 faac 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8005062:	e009      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 faa3 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8005074:	e000      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <TIM_Base_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0x38>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a31      	ldr	r2, [pc, #196]	; (80051cc <TIM_Base_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0x38>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a30      	ldr	r2, [pc, #192]	; (80051d0 <TIM_Base_SetConfig+0xec>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0x38>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <TIM_Base_SetConfig+0xf0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d108      	bne.n	800512e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a25      	ldr	r2, [pc, #148]	; (80051c8 <TIM_Base_SetConfig+0xe4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01b      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d017      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <TIM_Base_SetConfig+0xe8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <TIM_Base_SetConfig+0xec>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00f      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <TIM_Base_SetConfig+0xf0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00b      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <TIM_Base_SetConfig+0xf4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1e      	ldr	r2, [pc, #120]	; (80051dc <TIM_Base_SetConfig+0xf8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d003      	beq.n	800516e <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <TIM_Base_SetConfig+0xfc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d108      	bne.n	8005180 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a08      	ldr	r2, [pc, #32]	; (80051c8 <TIM_Base_SetConfig+0xe4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d103      	bne.n	80051b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	615a      	str	r2, [r3, #20]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800

080051e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0302 	bic.w	r3, r3, #2
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <TIM_OC1_SetConfig+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10c      	bne.n	800525a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0308 	bic.w	r3, r3, #8
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <TIM_OC1_SetConfig+0xc8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d111      	bne.n	8005286 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	40010000 	.word	0x40010000

080052b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0320 	bic.w	r3, r3, #32
 80052fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <TIM_OC2_SetConfig+0xd4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10d      	bne.n	800532c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a15      	ldr	r2, [pc, #84]	; (8005384 <TIM_OC2_SetConfig+0xd4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d113      	bne.n	800535c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000

08005388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <TIM_OC3_SetConfig+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a14      	ldr	r2, [pc, #80]	; (8005458 <TIM_OC3_SetConfig+0xd0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d113      	bne.n	8005432 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40010000 	.word	0x40010000

0800545c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	031b      	lsls	r3, r3, #12
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <TIM_OC4_SetConfig+0x9c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000

080054fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 030a 	bic.w	r3, r3, #10
 8005538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555a:	b480      	push	{r7}
 800555c:	b087      	sub	sp, #28
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0210 	bic.w	r2, r3, #16
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005596:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f043 0307 	orr.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800560a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	431a      	orrs	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2201      	movs	r2, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e050      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d013      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40014000 	.word	0x40014000

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e03f      	b.n	8005812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd ff6c 	bl	8003684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fb97 	bl	8005ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b088      	sub	sp, #32
 800581e:	af02      	add	r7, sp, #8
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	f040 8083 	bne.w	8005942 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_UART_Transmit+0x2e>
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e07b      	b.n	8005944 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x40>
 8005856:	2302      	movs	r3, #2
 8005858:	e074      	b.n	8005944 <HAL_UART_Transmit+0x12a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2221      	movs	r2, #33	; 0x21
 800586c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005870:	f7fe f8a0 	bl	80039b4 <HAL_GetTick>
 8005874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800588a:	e042      	b.n	8005912 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d122      	bne.n	80058ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	2180      	movs	r1, #128	; 0x80
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f9b6 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e042      	b.n	8005944 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3302      	adds	r3, #2
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	e017      	b.n	8005912 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	e013      	b.n	8005912 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f993 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e01f      	b.n	8005944 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	60ba      	str	r2, [r7, #8]
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1b7      	bne.n	800588c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	2140      	movs	r1, #64	; 0x40
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f97a 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e006      	b.n	8005944 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b20      	cmp	r3, #32
 8005964:	d140      	bne.n	80059e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_UART_Receive_IT+0x26>
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e039      	b.n	80059ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_UART_Receive_IT+0x38>
 8005980:	2302      	movs	r3, #2
 8005982:	e032      	b.n	80059ea <HAL_UART_Receive_IT+0x9e>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2222      	movs	r2, #34	; 0x22
 80059a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695a      	ldr	r2, [r3, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0220 	orr.w	r2, r2, #32
 80059e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9d6 	bl	8005df4 <UART_Receive_IT>
      return;
 8005a48:	e0d1      	b.n	8005bee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80b0 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x1ba>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <HAL_UART_IRQHandler+0x70>
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a5 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	f043 0201 	orr.w	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	f043 0202 	orr.w	r2, r3, #2
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_IRQHandler+0xee>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	f043 0208 	orr.w	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d078      	beq.n	8005bec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f970 	bl	8005df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <HAL_UART_IRQHandler+0x144>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d031      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8b9 	bl	8005cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d123      	bne.n	8005b98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695a      	ldr	r2, [r3, #20]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_UART_IRQHandler+0x1fc>)
 8005b6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe f882 	bl	8003c7e <HAL_DMA_Abort_IT>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d016      	beq.n	8005bae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8e:	e00e      	b.n	8005bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f83b 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b96:	e00a      	b.n	8005bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f837 	bl	8005c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9e:	e006      	b.n	8005bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f833 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005bac:	e01e      	b.n	8005bec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	bf00      	nop
    return;
 8005bb0:	e01c      	b.n	8005bec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x1d6>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8a6 	bl	8005d18 <UART_Transmit_IT>
    return;
 8005bcc:	e00f      	b.n	8005bee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_UART_IRQHandler+0x1f6>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8ee 	bl	8005dc4 <UART_EndTransmit_IT>
    return;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <HAL_UART_IRQHandler+0x1f6>
    return;
 8005bec:	bf00      	nop
  }
}
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	08005cf1 	.word	0x08005cf1

08005bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c30:	e02c      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d028      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c40:	f7fd feb8 	bl	80039b4 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d21d      	bcs.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e00f      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d0c3      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff7e 	bl	8005c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b21      	cmp	r3, #33	; 0x21
 8005d2a:	d144      	bne.n	8005db6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d11a      	bne.n	8005d6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d105      	bne.n	8005d60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	1c9a      	adds	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]
 8005d5e:	e00e      	b.n	8005d7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]
 8005d6a:	e008      	b.n	8005d7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6211      	str	r1, [r2, #32]
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff07 	bl	8005bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	d171      	bne.n	8005eec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d123      	bne.n	8005e5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10e      	bne.n	8005e3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	1c9a      	adds	r2, r3, #2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e3c:	e029      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
 8005e58:	e01b      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6858      	ldr	r0, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6291      	str	r1, [r2, #40]	; 0x28
 8005e72:	b2c2      	uxtb	r2, r0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e00c      	b.n	8005e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	1c58      	adds	r0, r3, #1
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	6288      	str	r0, [r1, #40]	; 0x28
 8005e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d120      	bne.n	8005ee8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0220 	bic.w	r2, r2, #32
 8005eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fd fa4e 	bl	8003380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e002      	b.n	8005eee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f3a:	f023 030c 	bic.w	r3, r3, #12
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	430b      	orrs	r3, r1
 8005f46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f66:	f040 818b 	bne.w	8006280 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4ac1      	ldr	r2, [pc, #772]	; (8006274 <UART_SetConfig+0x37c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d005      	beq.n	8005f80 <UART_SetConfig+0x88>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4abf      	ldr	r2, [pc, #764]	; (8006278 <UART_SetConfig+0x380>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	f040 80bd 	bne.w	80060fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f80:	f7fe fcbc 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 8005f84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f04f 0600 	mov.w	r6, #0
 8005f8e:	46a8      	mov	r8, r5
 8005f90:	46b1      	mov	r9, r6
 8005f92:	eb18 0308 	adds.w	r3, r8, r8
 8005f96:	eb49 0409 	adc.w	r4, r9, r9
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	46a1      	mov	r9, r4
 8005f9e:	eb18 0805 	adds.w	r8, r8, r5
 8005fa2:	eb49 0906 	adc.w	r9, r9, r6
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fba:	4688      	mov	r8, r1
 8005fbc:	4691      	mov	r9, r2
 8005fbe:	eb18 0005 	adds.w	r0, r8, r5
 8005fc2:	eb49 0106 	adc.w	r1, r9, r6
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	461d      	mov	r5, r3
 8005fcc:	f04f 0600 	mov.w	r6, #0
 8005fd0:	196b      	adds	r3, r5, r5
 8005fd2:	eb46 0406 	adc.w	r4, r6, r6
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	f7fa fde7 	bl	8000bac <__aeabi_uldivmod>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4ba5      	ldr	r3, [pc, #660]	; (800627c <UART_SetConfig+0x384>)
 8005fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	f04f 0600 	mov.w	r6, #0
 8005ff8:	46a9      	mov	r9, r5
 8005ffa:	46b2      	mov	sl, r6
 8005ffc:	eb19 0309 	adds.w	r3, r9, r9
 8006000:	eb4a 040a 	adc.w	r4, sl, sl
 8006004:	4699      	mov	r9, r3
 8006006:	46a2      	mov	sl, r4
 8006008:	eb19 0905 	adds.w	r9, r9, r5
 800600c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800601c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006020:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006024:	4689      	mov	r9, r1
 8006026:	4692      	mov	sl, r2
 8006028:	eb19 0005 	adds.w	r0, r9, r5
 800602c:	eb4a 0106 	adc.w	r1, sl, r6
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	461d      	mov	r5, r3
 8006036:	f04f 0600 	mov.w	r6, #0
 800603a:	196b      	adds	r3, r5, r5
 800603c:	eb46 0406 	adc.w	r4, r6, r6
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	f7fa fdb2 	bl	8000bac <__aeabi_uldivmod>
 8006048:	4603      	mov	r3, r0
 800604a:	460c      	mov	r4, r1
 800604c:	461a      	mov	r2, r3
 800604e:	4b8b      	ldr	r3, [pc, #556]	; (800627c <UART_SetConfig+0x384>)
 8006050:	fba3 1302 	umull	r1, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	2164      	movs	r1, #100	; 0x64
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	3332      	adds	r3, #50	; 0x32
 8006062:	4a86      	ldr	r2, [pc, #536]	; (800627c <UART_SetConfig+0x384>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006070:	4498      	add	r8, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	461d      	mov	r5, r3
 8006076:	f04f 0600 	mov.w	r6, #0
 800607a:	46a9      	mov	r9, r5
 800607c:	46b2      	mov	sl, r6
 800607e:	eb19 0309 	adds.w	r3, r9, r9
 8006082:	eb4a 040a 	adc.w	r4, sl, sl
 8006086:	4699      	mov	r9, r3
 8006088:	46a2      	mov	sl, r4
 800608a:	eb19 0905 	adds.w	r9, r9, r5
 800608e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a6:	4689      	mov	r9, r1
 80060a8:	4692      	mov	sl, r2
 80060aa:	eb19 0005 	adds.w	r0, r9, r5
 80060ae:	eb4a 0106 	adc.w	r1, sl, r6
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	461d      	mov	r5, r3
 80060b8:	f04f 0600 	mov.w	r6, #0
 80060bc:	196b      	adds	r3, r5, r5
 80060be:	eb46 0406 	adc.w	r4, r6, r6
 80060c2:	461a      	mov	r2, r3
 80060c4:	4623      	mov	r3, r4
 80060c6:	f7fa fd71 	bl	8000bac <__aeabi_uldivmod>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	461a      	mov	r2, r3
 80060d0:	4b6a      	ldr	r3, [pc, #424]	; (800627c <UART_SetConfig+0x384>)
 80060d2:	fba3 1302 	umull	r1, r3, r3, r2
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	2164      	movs	r1, #100	; 0x64
 80060da:	fb01 f303 	mul.w	r3, r1, r3
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	3332      	adds	r3, #50	; 0x32
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <UART_SetConfig+0x384>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	f003 0207 	and.w	r2, r3, #7
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4442      	add	r2, r8
 80060f6:	609a      	str	r2, [r3, #8]
 80060f8:	e26f      	b.n	80065da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fe fbeb 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80060fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	461d      	mov	r5, r3
 8006104:	f04f 0600 	mov.w	r6, #0
 8006108:	46a8      	mov	r8, r5
 800610a:	46b1      	mov	r9, r6
 800610c:	eb18 0308 	adds.w	r3, r8, r8
 8006110:	eb49 0409 	adc.w	r4, r9, r9
 8006114:	4698      	mov	r8, r3
 8006116:	46a1      	mov	r9, r4
 8006118:	eb18 0805 	adds.w	r8, r8, r5
 800611c:	eb49 0906 	adc.w	r9, r9, r6
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800612c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006130:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006134:	4688      	mov	r8, r1
 8006136:	4691      	mov	r9, r2
 8006138:	eb18 0005 	adds.w	r0, r8, r5
 800613c:	eb49 0106 	adc.w	r1, r9, r6
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	461d      	mov	r5, r3
 8006146:	f04f 0600 	mov.w	r6, #0
 800614a:	196b      	adds	r3, r5, r5
 800614c:	eb46 0406 	adc.w	r4, r6, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4623      	mov	r3, r4
 8006154:	f7fa fd2a 	bl	8000bac <__aeabi_uldivmod>
 8006158:	4603      	mov	r3, r0
 800615a:	460c      	mov	r4, r1
 800615c:	461a      	mov	r2, r3
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <UART_SetConfig+0x384>)
 8006160:	fba3 2302 	umull	r2, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	461d      	mov	r5, r3
 800616e:	f04f 0600 	mov.w	r6, #0
 8006172:	46a9      	mov	r9, r5
 8006174:	46b2      	mov	sl, r6
 8006176:	eb19 0309 	adds.w	r3, r9, r9
 800617a:	eb4a 040a 	adc.w	r4, sl, sl
 800617e:	4699      	mov	r9, r3
 8006180:	46a2      	mov	sl, r4
 8006182:	eb19 0905 	adds.w	r9, r9, r5
 8006186:	eb4a 0a06 	adc.w	sl, sl, r6
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800619a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619e:	4689      	mov	r9, r1
 80061a0:	4692      	mov	sl, r2
 80061a2:	eb19 0005 	adds.w	r0, r9, r5
 80061a6:	eb4a 0106 	adc.w	r1, sl, r6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	461d      	mov	r5, r3
 80061b0:	f04f 0600 	mov.w	r6, #0
 80061b4:	196b      	adds	r3, r5, r5
 80061b6:	eb46 0406 	adc.w	r4, r6, r6
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	f7fa fcf5 	bl	8000bac <__aeabi_uldivmod>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b2c      	ldr	r3, [pc, #176]	; (800627c <UART_SetConfig+0x384>)
 80061ca:	fba3 1302 	umull	r1, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2164      	movs	r1, #100	; 0x64
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a27      	ldr	r2, [pc, #156]	; (800627c <UART_SetConfig+0x384>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ea:	4498      	add	r8, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	461d      	mov	r5, r3
 80061f0:	f04f 0600 	mov.w	r6, #0
 80061f4:	46a9      	mov	r9, r5
 80061f6:	46b2      	mov	sl, r6
 80061f8:	eb19 0309 	adds.w	r3, r9, r9
 80061fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006200:	4699      	mov	r9, r3
 8006202:	46a2      	mov	sl, r4
 8006204:	eb19 0905 	adds.w	r9, r9, r5
 8006208:	eb4a 0a06 	adc.w	sl, sl, r6
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800621c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006220:	4689      	mov	r9, r1
 8006222:	4692      	mov	sl, r2
 8006224:	eb19 0005 	adds.w	r0, r9, r5
 8006228:	eb4a 0106 	adc.w	r1, sl, r6
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	461d      	mov	r5, r3
 8006232:	f04f 0600 	mov.w	r6, #0
 8006236:	196b      	adds	r3, r5, r5
 8006238:	eb46 0406 	adc.w	r4, r6, r6
 800623c:	461a      	mov	r2, r3
 800623e:	4623      	mov	r3, r4
 8006240:	f7fa fcb4 	bl	8000bac <__aeabi_uldivmod>
 8006244:	4603      	mov	r3, r0
 8006246:	460c      	mov	r4, r1
 8006248:	461a      	mov	r2, r3
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <UART_SetConfig+0x384>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	; 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	3332      	adds	r3, #50	; 0x32
 800625e:	4a07      	ldr	r2, [pc, #28]	; (800627c <UART_SetConfig+0x384>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 0207 	and.w	r2, r3, #7
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4442      	add	r2, r8
 8006270:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006272:	e1b2      	b.n	80065da <UART_SetConfig+0x6e2>
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4ad7      	ldr	r2, [pc, #860]	; (80065e4 <UART_SetConfig+0x6ec>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d005      	beq.n	8006296 <UART_SetConfig+0x39e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4ad6      	ldr	r2, [pc, #856]	; (80065e8 <UART_SetConfig+0x6f0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	f040 80d1 	bne.w	8006438 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006296:	f7fe fb31 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 800629a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	469a      	mov	sl, r3
 80062a0:	f04f 0b00 	mov.w	fp, #0
 80062a4:	46d0      	mov	r8, sl
 80062a6:	46d9      	mov	r9, fp
 80062a8:	eb18 0308 	adds.w	r3, r8, r8
 80062ac:	eb49 0409 	adc.w	r4, r9, r9
 80062b0:	4698      	mov	r8, r3
 80062b2:	46a1      	mov	r9, r4
 80062b4:	eb18 080a 	adds.w	r8, r8, sl
 80062b8:	eb49 090b 	adc.w	r9, r9, fp
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062d0:	4688      	mov	r8, r1
 80062d2:	4691      	mov	r9, r2
 80062d4:	eb1a 0508 	adds.w	r5, sl, r8
 80062d8:	eb4b 0609 	adc.w	r6, fp, r9
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	0094      	lsls	r4, r2, #2
 80062f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f4:	008b      	lsls	r3, r1, #2
 80062f6:	461a      	mov	r2, r3
 80062f8:	4623      	mov	r3, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	4631      	mov	r1, r6
 80062fe:	f7fa fc55 	bl	8000bac <__aeabi_uldivmod>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461a      	mov	r2, r3
 8006308:	4bb8      	ldr	r3, [pc, #736]	; (80065ec <UART_SetConfig+0x6f4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	469b      	mov	fp, r3
 8006318:	f04f 0c00 	mov.w	ip, #0
 800631c:	46d9      	mov	r9, fp
 800631e:	46e2      	mov	sl, ip
 8006320:	eb19 0309 	adds.w	r3, r9, r9
 8006324:	eb4a 040a 	adc.w	r4, sl, sl
 8006328:	4699      	mov	r9, r3
 800632a:	46a2      	mov	sl, r4
 800632c:	eb19 090b 	adds.w	r9, r9, fp
 8006330:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006348:	4689      	mov	r9, r1
 800634a:	4692      	mov	sl, r2
 800634c:	eb1b 0509 	adds.w	r5, fp, r9
 8006350:	eb4c 060a 	adc.w	r6, ip, sl
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4619      	mov	r1, r3
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	f04f 0400 	mov.w	r4, #0
 8006366:	0094      	lsls	r4, r2, #2
 8006368:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800636c:	008b      	lsls	r3, r1, #2
 800636e:	461a      	mov	r2, r3
 8006370:	4623      	mov	r3, r4
 8006372:	4628      	mov	r0, r5
 8006374:	4631      	mov	r1, r6
 8006376:	f7fa fc19 	bl	8000bac <__aeabi_uldivmod>
 800637a:	4603      	mov	r3, r0
 800637c:	460c      	mov	r4, r1
 800637e:	461a      	mov	r2, r3
 8006380:	4b9a      	ldr	r3, [pc, #616]	; (80065ec <UART_SetConfig+0x6f4>)
 8006382:	fba3 1302 	umull	r1, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2164      	movs	r1, #100	; 0x64
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a95      	ldr	r2, [pc, #596]	; (80065ec <UART_SetConfig+0x6f4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a0:	4498      	add	r8, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	469b      	mov	fp, r3
 80063a6:	f04f 0c00 	mov.w	ip, #0
 80063aa:	46d9      	mov	r9, fp
 80063ac:	46e2      	mov	sl, ip
 80063ae:	eb19 0309 	adds.w	r3, r9, r9
 80063b2:	eb4a 040a 	adc.w	r4, sl, sl
 80063b6:	4699      	mov	r9, r3
 80063b8:	46a2      	mov	sl, r4
 80063ba:	eb19 090b 	adds.w	r9, r9, fp
 80063be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063d6:	4689      	mov	r9, r1
 80063d8:	4692      	mov	sl, r2
 80063da:	eb1b 0509 	adds.w	r5, fp, r9
 80063de:	eb4c 060a 	adc.w	r6, ip, sl
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4619      	mov	r1, r3
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	f04f 0400 	mov.w	r4, #0
 80063f4:	0094      	lsls	r4, r2, #2
 80063f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063fa:	008b      	lsls	r3, r1, #2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	4628      	mov	r0, r5
 8006402:	4631      	mov	r1, r6
 8006404:	f7fa fbd2 	bl	8000bac <__aeabi_uldivmod>
 8006408:	4603      	mov	r3, r0
 800640a:	460c      	mov	r4, r1
 800640c:	461a      	mov	r2, r3
 800640e:	4b77      	ldr	r3, [pc, #476]	; (80065ec <UART_SetConfig+0x6f4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a72      	ldr	r2, [pc, #456]	; (80065ec <UART_SetConfig+0x6f4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4442      	add	r2, r8
 8006434:	609a      	str	r2, [r3, #8]
 8006436:	e0d0      	b.n	80065da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fe fa4c 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 800643c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	469a      	mov	sl, r3
 8006442:	f04f 0b00 	mov.w	fp, #0
 8006446:	46d0      	mov	r8, sl
 8006448:	46d9      	mov	r9, fp
 800644a:	eb18 0308 	adds.w	r3, r8, r8
 800644e:	eb49 0409 	adc.w	r4, r9, r9
 8006452:	4698      	mov	r8, r3
 8006454:	46a1      	mov	r9, r4
 8006456:	eb18 080a 	adds.w	r8, r8, sl
 800645a:	eb49 090b 	adc.w	r9, r9, fp
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800646a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800646e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006472:	4688      	mov	r8, r1
 8006474:	4691      	mov	r9, r2
 8006476:	eb1a 0508 	adds.w	r5, sl, r8
 800647a:	eb4b 0609 	adc.w	r6, fp, r9
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4619      	mov	r1, r3
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	f04f 0400 	mov.w	r4, #0
 8006490:	0094      	lsls	r4, r2, #2
 8006492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006496:	008b      	lsls	r3, r1, #2
 8006498:	461a      	mov	r2, r3
 800649a:	4623      	mov	r3, r4
 800649c:	4628      	mov	r0, r5
 800649e:	4631      	mov	r1, r6
 80064a0:	f7fa fb84 	bl	8000bac <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b50      	ldr	r3, [pc, #320]	; (80065ec <UART_SetConfig+0x6f4>)
 80064ac:	fba3 2302 	umull	r2, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	469b      	mov	fp, r3
 80064ba:	f04f 0c00 	mov.w	ip, #0
 80064be:	46d9      	mov	r9, fp
 80064c0:	46e2      	mov	sl, ip
 80064c2:	eb19 0309 	adds.w	r3, r9, r9
 80064c6:	eb4a 040a 	adc.w	r4, sl, sl
 80064ca:	4699      	mov	r9, r3
 80064cc:	46a2      	mov	sl, r4
 80064ce:	eb19 090b 	adds.w	r9, r9, fp
 80064d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ea:	4689      	mov	r9, r1
 80064ec:	4692      	mov	sl, r2
 80064ee:	eb1b 0509 	adds.w	r5, fp, r9
 80064f2:	eb4c 060a 	adc.w	r6, ip, sl
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4619      	mov	r1, r3
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	0094      	lsls	r4, r2, #2
 800650a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800650e:	008b      	lsls	r3, r1, #2
 8006510:	461a      	mov	r2, r3
 8006512:	4623      	mov	r3, r4
 8006514:	4628      	mov	r0, r5
 8006516:	4631      	mov	r1, r6
 8006518:	f7fa fb48 	bl	8000bac <__aeabi_uldivmod>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461a      	mov	r2, r3
 8006522:	4b32      	ldr	r3, [pc, #200]	; (80065ec <UART_SetConfig+0x6f4>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <UART_SetConfig+0x6f4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006542:	4498      	add	r8, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	469b      	mov	fp, r3
 8006548:	f04f 0c00 	mov.w	ip, #0
 800654c:	46d9      	mov	r9, fp
 800654e:	46e2      	mov	sl, ip
 8006550:	eb19 0309 	adds.w	r3, r9, r9
 8006554:	eb4a 040a 	adc.w	r4, sl, sl
 8006558:	4699      	mov	r9, r3
 800655a:	46a2      	mov	sl, r4
 800655c:	eb19 090b 	adds.w	r9, r9, fp
 8006560:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006578:	4689      	mov	r9, r1
 800657a:	4692      	mov	sl, r2
 800657c:	eb1b 0509 	adds.w	r5, fp, r9
 8006580:	eb4c 060a 	adc.w	r6, ip, sl
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4619      	mov	r1, r3
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f04f 0400 	mov.w	r4, #0
 8006596:	0094      	lsls	r4, r2, #2
 8006598:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	461a      	mov	r2, r3
 80065a0:	4623      	mov	r3, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	4631      	mov	r1, r6
 80065a6:	f7fa fb01 	bl	8000bac <__aeabi_uldivmod>
 80065aa:	4603      	mov	r3, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	461a      	mov	r2, r3
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <UART_SetConfig+0x6f4>)
 80065b2:	fba3 1302 	umull	r1, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2164      	movs	r1, #100	; 0x64
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	4a09      	ldr	r2, [pc, #36]	; (80065ec <UART_SetConfig+0x6f4>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4442      	add	r2, r8
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	e7ff      	b.n	80065da <UART_SetConfig+0x6e2>
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	40011000 	.word	0x40011000
 80065e8:	40011400 	.word	0x40011400
 80065ec:	51eb851f 	.word	0x51eb851f

080065f0 <atoi>:
 80065f0:	220a      	movs	r2, #10
 80065f2:	2100      	movs	r1, #0
 80065f4:	f000 ba0c 	b.w	8006a10 <strtol>

080065f8 <calloc>:
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <calloc+0xc>)
 80065fa:	460a      	mov	r2, r1
 80065fc:	4601      	mov	r1, r0
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	f000 b84f 	b.w	80066a2 <_calloc_r>
 8006604:	2000001c 	.word	0x2000001c

08006608 <__errno>:
 8006608:	4b01      	ldr	r3, [pc, #4]	; (8006610 <__errno+0x8>)
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	2000001c 	.word	0x2000001c

08006614 <__libc_init_array>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	4e0d      	ldr	r6, [pc, #52]	; (800664c <__libc_init_array+0x38>)
 8006618:	4c0d      	ldr	r4, [pc, #52]	; (8006650 <__libc_init_array+0x3c>)
 800661a:	1ba4      	subs	r4, r4, r6
 800661c:	10a4      	asrs	r4, r4, #2
 800661e:	2500      	movs	r5, #0
 8006620:	42a5      	cmp	r5, r4
 8006622:	d109      	bne.n	8006638 <__libc_init_array+0x24>
 8006624:	4e0b      	ldr	r6, [pc, #44]	; (8006654 <__libc_init_array+0x40>)
 8006626:	4c0c      	ldr	r4, [pc, #48]	; (8006658 <__libc_init_array+0x44>)
 8006628:	f000 fdde 	bl	80071e8 <_init>
 800662c:	1ba4      	subs	r4, r4, r6
 800662e:	10a4      	asrs	r4, r4, #2
 8006630:	2500      	movs	r5, #0
 8006632:	42a5      	cmp	r5, r4
 8006634:	d105      	bne.n	8006642 <__libc_init_array+0x2e>
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800663c:	4798      	blx	r3
 800663e:	3501      	adds	r5, #1
 8006640:	e7ee      	b.n	8006620 <__libc_init_array+0xc>
 8006642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006646:	4798      	blx	r3
 8006648:	3501      	adds	r5, #1
 800664a:	e7f2      	b.n	8006632 <__libc_init_array+0x1e>
 800664c:	08007390 	.word	0x08007390
 8006650:	08007390 	.word	0x08007390
 8006654:	08007390 	.word	0x08007390
 8006658:	08007394 	.word	0x08007394

0800665c <malloc>:
 800665c:	4b02      	ldr	r3, [pc, #8]	; (8006668 <malloc+0xc>)
 800665e:	4601      	mov	r1, r0
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f000 b87b 	b.w	800675c <_malloc_r>
 8006666:	bf00      	nop
 8006668:	2000001c 	.word	0x2000001c

0800666c <free>:
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <free+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f000 b825 	b.w	80066c0 <_free_r>
 8006676:	bf00      	nop
 8006678:	2000001c 	.word	0x2000001c

0800667c <memcpy>:
 800667c:	b510      	push	{r4, lr}
 800667e:	1e43      	subs	r3, r0, #1
 8006680:	440a      	add	r2, r1
 8006682:	4291      	cmp	r1, r2
 8006684:	d100      	bne.n	8006688 <memcpy+0xc>
 8006686:	bd10      	pop	{r4, pc}
 8006688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006690:	e7f7      	b.n	8006682 <memcpy+0x6>

08006692 <memset>:
 8006692:	4402      	add	r2, r0
 8006694:	4603      	mov	r3, r0
 8006696:	4293      	cmp	r3, r2
 8006698:	d100      	bne.n	800669c <memset+0xa>
 800669a:	4770      	bx	lr
 800669c:	f803 1b01 	strb.w	r1, [r3], #1
 80066a0:	e7f9      	b.n	8006696 <memset+0x4>

080066a2 <_calloc_r>:
 80066a2:	b538      	push	{r3, r4, r5, lr}
 80066a4:	fb02 f401 	mul.w	r4, r2, r1
 80066a8:	4621      	mov	r1, r4
 80066aa:	f000 f857 	bl	800675c <_malloc_r>
 80066ae:	4605      	mov	r5, r0
 80066b0:	b118      	cbz	r0, 80066ba <_calloc_r+0x18>
 80066b2:	4622      	mov	r2, r4
 80066b4:	2100      	movs	r1, #0
 80066b6:	f7ff ffec 	bl	8006692 <memset>
 80066ba:	4628      	mov	r0, r5
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080066c0 <_free_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d045      	beq.n	8006754 <_free_r+0x94>
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f0c      	subs	r4, r1, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfb8      	it	lt
 80066d2:	18e4      	addlt	r4, r4, r3
 80066d4:	f000 fa57 	bl	8006b86 <__malloc_lock>
 80066d8:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <_free_r+0x98>)
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	4610      	mov	r0, r2
 80066de:	b933      	cbnz	r3, 80066ee <_free_r+0x2e>
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	6014      	str	r4, [r2, #0]
 80066e4:	4628      	mov	r0, r5
 80066e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ea:	f000 ba4d 	b.w	8006b88 <__malloc_unlock>
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	d90c      	bls.n	800670c <_free_r+0x4c>
 80066f2:	6821      	ldr	r1, [r4, #0]
 80066f4:	1862      	adds	r2, r4, r1
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf04      	itt	eq
 80066fa:	681a      	ldreq	r2, [r3, #0]
 80066fc:	685b      	ldreq	r3, [r3, #4]
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	bf04      	itt	eq
 8006702:	1852      	addeq	r2, r2, r1
 8006704:	6022      	streq	r2, [r4, #0]
 8006706:	6004      	str	r4, [r0, #0]
 8006708:	e7ec      	b.n	80066e4 <_free_r+0x24>
 800670a:	4613      	mov	r3, r2
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	b10a      	cbz	r2, 8006714 <_free_r+0x54>
 8006710:	42a2      	cmp	r2, r4
 8006712:	d9fa      	bls.n	800670a <_free_r+0x4a>
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	1858      	adds	r0, r3, r1
 8006718:	42a0      	cmp	r0, r4
 800671a:	d10b      	bne.n	8006734 <_free_r+0x74>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	4401      	add	r1, r0
 8006720:	1858      	adds	r0, r3, r1
 8006722:	4282      	cmp	r2, r0
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	d1dd      	bne.n	80066e4 <_free_r+0x24>
 8006728:	6810      	ldr	r0, [r2, #0]
 800672a:	6852      	ldr	r2, [r2, #4]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	4401      	add	r1, r0
 8006730:	6019      	str	r1, [r3, #0]
 8006732:	e7d7      	b.n	80066e4 <_free_r+0x24>
 8006734:	d902      	bls.n	800673c <_free_r+0x7c>
 8006736:	230c      	movs	r3, #12
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	e7d3      	b.n	80066e4 <_free_r+0x24>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	1821      	adds	r1, r4, r0
 8006740:	428a      	cmp	r2, r1
 8006742:	bf04      	itt	eq
 8006744:	6811      	ldreq	r1, [r2, #0]
 8006746:	6852      	ldreq	r2, [r2, #4]
 8006748:	6062      	str	r2, [r4, #4]
 800674a:	bf04      	itt	eq
 800674c:	1809      	addeq	r1, r1, r0
 800674e:	6021      	streq	r1, [r4, #0]
 8006750:	605c      	str	r4, [r3, #4]
 8006752:	e7c7      	b.n	80066e4 <_free_r+0x24>
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	20000228 	.word	0x20000228

0800675c <_malloc_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	1ccd      	adds	r5, r1, #3
 8006760:	f025 0503 	bic.w	r5, r5, #3
 8006764:	3508      	adds	r5, #8
 8006766:	2d0c      	cmp	r5, #12
 8006768:	bf38      	it	cc
 800676a:	250c      	movcc	r5, #12
 800676c:	2d00      	cmp	r5, #0
 800676e:	4606      	mov	r6, r0
 8006770:	db01      	blt.n	8006776 <_malloc_r+0x1a>
 8006772:	42a9      	cmp	r1, r5
 8006774:	d903      	bls.n	800677e <_malloc_r+0x22>
 8006776:	230c      	movs	r3, #12
 8006778:	6033      	str	r3, [r6, #0]
 800677a:	2000      	movs	r0, #0
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	f000 fa02 	bl	8006b86 <__malloc_lock>
 8006782:	4a21      	ldr	r2, [pc, #132]	; (8006808 <_malloc_r+0xac>)
 8006784:	6814      	ldr	r4, [r2, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	b991      	cbnz	r1, 80067b0 <_malloc_r+0x54>
 800678a:	4c20      	ldr	r4, [pc, #128]	; (800680c <_malloc_r+0xb0>)
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	b91b      	cbnz	r3, 8006798 <_malloc_r+0x3c>
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f83d 	bl	8006810 <_sbrk_r>
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f000 f838 	bl	8006810 <_sbrk_r>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d124      	bne.n	80067ee <_malloc_r+0x92>
 80067a4:	230c      	movs	r3, #12
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f9ed 	bl	8006b88 <__malloc_unlock>
 80067ae:	e7e4      	b.n	800677a <_malloc_r+0x1e>
 80067b0:	680b      	ldr	r3, [r1, #0]
 80067b2:	1b5b      	subs	r3, r3, r5
 80067b4:	d418      	bmi.n	80067e8 <_malloc_r+0x8c>
 80067b6:	2b0b      	cmp	r3, #11
 80067b8:	d90f      	bls.n	80067da <_malloc_r+0x7e>
 80067ba:	600b      	str	r3, [r1, #0]
 80067bc:	50cd      	str	r5, [r1, r3]
 80067be:	18cc      	adds	r4, r1, r3
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f9e1 	bl	8006b88 <__malloc_unlock>
 80067c6:	f104 000b 	add.w	r0, r4, #11
 80067ca:	1d23      	adds	r3, r4, #4
 80067cc:	f020 0007 	bic.w	r0, r0, #7
 80067d0:	1ac3      	subs	r3, r0, r3
 80067d2:	d0d3      	beq.n	800677c <_malloc_r+0x20>
 80067d4:	425a      	negs	r2, r3
 80067d6:	50e2      	str	r2, [r4, r3]
 80067d8:	e7d0      	b.n	800677c <_malloc_r+0x20>
 80067da:	428c      	cmp	r4, r1
 80067dc:	684b      	ldr	r3, [r1, #4]
 80067de:	bf16      	itet	ne
 80067e0:	6063      	strne	r3, [r4, #4]
 80067e2:	6013      	streq	r3, [r2, #0]
 80067e4:	460c      	movne	r4, r1
 80067e6:	e7eb      	b.n	80067c0 <_malloc_r+0x64>
 80067e8:	460c      	mov	r4, r1
 80067ea:	6849      	ldr	r1, [r1, #4]
 80067ec:	e7cc      	b.n	8006788 <_malloc_r+0x2c>
 80067ee:	1cc4      	adds	r4, r0, #3
 80067f0:	f024 0403 	bic.w	r4, r4, #3
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d005      	beq.n	8006804 <_malloc_r+0xa8>
 80067f8:	1a21      	subs	r1, r4, r0
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 f808 	bl	8006810 <_sbrk_r>
 8006800:	3001      	adds	r0, #1
 8006802:	d0cf      	beq.n	80067a4 <_malloc_r+0x48>
 8006804:	6025      	str	r5, [r4, #0]
 8006806:	e7db      	b.n	80067c0 <_malloc_r+0x64>
 8006808:	20000228 	.word	0x20000228
 800680c:	2000022c 	.word	0x2000022c

08006810 <_sbrk_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4c06      	ldr	r4, [pc, #24]	; (800682c <_sbrk_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4605      	mov	r5, r0
 8006818:	4608      	mov	r0, r1
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	f7fc fff8 	bl	8003810 <_sbrk>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_sbrk_r+0x1a>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	b103      	cbz	r3, 800682a <_sbrk_r+0x1a>
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2000076c 	.word	0x2000076c

08006830 <siprintf>:
 8006830:	b40e      	push	{r1, r2, r3}
 8006832:	b500      	push	{lr}
 8006834:	b09c      	sub	sp, #112	; 0x70
 8006836:	ab1d      	add	r3, sp, #116	; 0x74
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	9006      	str	r0, [sp, #24]
 800683c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006840:	4809      	ldr	r0, [pc, #36]	; (8006868 <siprintf+0x38>)
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	9104      	str	r1, [sp, #16]
 8006846:	4909      	ldr	r1, [pc, #36]	; (800686c <siprintf+0x3c>)
 8006848:	f853 2b04 	ldr.w	r2, [r3], #4
 800684c:	9105      	str	r1, [sp, #20]
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	a902      	add	r1, sp, #8
 8006854:	f000 f9f4 	bl	8006c40 <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	b01c      	add	sp, #112	; 0x70
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b003      	add	sp, #12
 8006866:	4770      	bx	lr
 8006868:	2000001c 	.word	0x2000001c
 800686c:	ffff0208 	.word	0xffff0208

08006870 <strtok>:
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <strtok+0x50>)
 8006872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006876:	681d      	ldr	r5, [r3, #0]
 8006878:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	b9b4      	cbnz	r4, 80068ae <strtok+0x3e>
 8006880:	2050      	movs	r0, #80	; 0x50
 8006882:	f7ff feeb 	bl	800665c <malloc>
 8006886:	65a8      	str	r0, [r5, #88]	; 0x58
 8006888:	e9c0 4400 	strd	r4, r4, [r0]
 800688c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006890:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006894:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006898:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800689c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80068a0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068a4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068a8:	6184      	str	r4, [r0, #24]
 80068aa:	7704      	strb	r4, [r0, #28]
 80068ac:	6244      	str	r4, [r0, #36]	; 0x24
 80068ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	2301      	movs	r3, #1
 80068b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	f000 b803 	b.w	80068c4 <__strtok_r>
 80068be:	bf00      	nop
 80068c0:	2000001c 	.word	0x2000001c

080068c4 <__strtok_r>:
 80068c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c6:	b918      	cbnz	r0, 80068d0 <__strtok_r+0xc>
 80068c8:	6810      	ldr	r0, [r2, #0]
 80068ca:	b908      	cbnz	r0, 80068d0 <__strtok_r+0xc>
 80068cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ce:	4620      	mov	r0, r4
 80068d0:	4604      	mov	r4, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068d8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068dc:	b91e      	cbnz	r6, 80068e6 <__strtok_r+0x22>
 80068de:	b96d      	cbnz	r5, 80068fc <__strtok_r+0x38>
 80068e0:	6015      	str	r5, [r2, #0]
 80068e2:	4628      	mov	r0, r5
 80068e4:	e7f2      	b.n	80068cc <__strtok_r+0x8>
 80068e6:	42b5      	cmp	r5, r6
 80068e8:	d1f6      	bne.n	80068d8 <__strtok_r+0x14>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ef      	bne.n	80068ce <__strtok_r+0xa>
 80068ee:	6014      	str	r4, [r2, #0]
 80068f0:	7003      	strb	r3, [r0, #0]
 80068f2:	e7eb      	b.n	80068cc <__strtok_r+0x8>
 80068f4:	462b      	mov	r3, r5
 80068f6:	e00d      	b.n	8006914 <__strtok_r+0x50>
 80068f8:	b926      	cbnz	r6, 8006904 <__strtok_r+0x40>
 80068fa:	461c      	mov	r4, r3
 80068fc:	4623      	mov	r3, r4
 80068fe:	460f      	mov	r7, r1
 8006900:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006904:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006908:	42b5      	cmp	r5, r6
 800690a:	d1f5      	bne.n	80068f8 <__strtok_r+0x34>
 800690c:	2d00      	cmp	r5, #0
 800690e:	d0f1      	beq.n	80068f4 <__strtok_r+0x30>
 8006910:	2100      	movs	r1, #0
 8006912:	7021      	strb	r1, [r4, #0]
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e7d9      	b.n	80068cc <__strtok_r+0x8>

08006918 <_strtol_l.isra.0>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4680      	mov	r8, r0
 800691e:	4689      	mov	r9, r1
 8006920:	4692      	mov	sl, r2
 8006922:	461e      	mov	r6, r3
 8006924:	460f      	mov	r7, r1
 8006926:	463d      	mov	r5, r7
 8006928:	9808      	ldr	r0, [sp, #32]
 800692a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800692e:	f000 f915 	bl	8006b5c <__locale_ctype_ptr_l>
 8006932:	4420      	add	r0, r4
 8006934:	7843      	ldrb	r3, [r0, #1]
 8006936:	f013 0308 	ands.w	r3, r3, #8
 800693a:	d132      	bne.n	80069a2 <_strtol_l.isra.0+0x8a>
 800693c:	2c2d      	cmp	r4, #45	; 0x2d
 800693e:	d132      	bne.n	80069a6 <_strtol_l.isra.0+0x8e>
 8006940:	787c      	ldrb	r4, [r7, #1]
 8006942:	1cbd      	adds	r5, r7, #2
 8006944:	2201      	movs	r2, #1
 8006946:	2e00      	cmp	r6, #0
 8006948:	d05d      	beq.n	8006a06 <_strtol_l.isra.0+0xee>
 800694a:	2e10      	cmp	r6, #16
 800694c:	d109      	bne.n	8006962 <_strtol_l.isra.0+0x4a>
 800694e:	2c30      	cmp	r4, #48	; 0x30
 8006950:	d107      	bne.n	8006962 <_strtol_l.isra.0+0x4a>
 8006952:	782b      	ldrb	r3, [r5, #0]
 8006954:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006958:	2b58      	cmp	r3, #88	; 0x58
 800695a:	d14f      	bne.n	80069fc <_strtol_l.isra.0+0xe4>
 800695c:	786c      	ldrb	r4, [r5, #1]
 800695e:	2610      	movs	r6, #16
 8006960:	3502      	adds	r5, #2
 8006962:	2a00      	cmp	r2, #0
 8006964:	bf14      	ite	ne
 8006966:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800696a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800696e:	2700      	movs	r7, #0
 8006970:	fbb1 fcf6 	udiv	ip, r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	fb06 1e1c 	mls	lr, r6, ip, r1
 800697a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d817      	bhi.n	80069b2 <_strtol_l.isra.0+0x9a>
 8006982:	461c      	mov	r4, r3
 8006984:	42a6      	cmp	r6, r4
 8006986:	dd23      	ble.n	80069d0 <_strtol_l.isra.0+0xb8>
 8006988:	1c7b      	adds	r3, r7, #1
 800698a:	d007      	beq.n	800699c <_strtol_l.isra.0+0x84>
 800698c:	4584      	cmp	ip, r0
 800698e:	d31c      	bcc.n	80069ca <_strtol_l.isra.0+0xb2>
 8006990:	d101      	bne.n	8006996 <_strtol_l.isra.0+0x7e>
 8006992:	45a6      	cmp	lr, r4
 8006994:	db19      	blt.n	80069ca <_strtol_l.isra.0+0xb2>
 8006996:	fb00 4006 	mla	r0, r0, r6, r4
 800699a:	2701      	movs	r7, #1
 800699c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a0:	e7eb      	b.n	800697a <_strtol_l.isra.0+0x62>
 80069a2:	462f      	mov	r7, r5
 80069a4:	e7bf      	b.n	8006926 <_strtol_l.isra.0+0xe>
 80069a6:	2c2b      	cmp	r4, #43	; 0x2b
 80069a8:	bf04      	itt	eq
 80069aa:	1cbd      	addeq	r5, r7, #2
 80069ac:	787c      	ldrbeq	r4, [r7, #1]
 80069ae:	461a      	mov	r2, r3
 80069b0:	e7c9      	b.n	8006946 <_strtol_l.isra.0+0x2e>
 80069b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80069b6:	2b19      	cmp	r3, #25
 80069b8:	d801      	bhi.n	80069be <_strtol_l.isra.0+0xa6>
 80069ba:	3c37      	subs	r4, #55	; 0x37
 80069bc:	e7e2      	b.n	8006984 <_strtol_l.isra.0+0x6c>
 80069be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80069c2:	2b19      	cmp	r3, #25
 80069c4:	d804      	bhi.n	80069d0 <_strtol_l.isra.0+0xb8>
 80069c6:	3c57      	subs	r4, #87	; 0x57
 80069c8:	e7dc      	b.n	8006984 <_strtol_l.isra.0+0x6c>
 80069ca:	f04f 37ff 	mov.w	r7, #4294967295
 80069ce:	e7e5      	b.n	800699c <_strtol_l.isra.0+0x84>
 80069d0:	1c7b      	adds	r3, r7, #1
 80069d2:	d108      	bne.n	80069e6 <_strtol_l.isra.0+0xce>
 80069d4:	2322      	movs	r3, #34	; 0x22
 80069d6:	f8c8 3000 	str.w	r3, [r8]
 80069da:	4608      	mov	r0, r1
 80069dc:	f1ba 0f00 	cmp.w	sl, #0
 80069e0:	d107      	bne.n	80069f2 <_strtol_l.isra.0+0xda>
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	b102      	cbz	r2, 80069ea <_strtol_l.isra.0+0xd2>
 80069e8:	4240      	negs	r0, r0
 80069ea:	f1ba 0f00 	cmp.w	sl, #0
 80069ee:	d0f8      	beq.n	80069e2 <_strtol_l.isra.0+0xca>
 80069f0:	b10f      	cbz	r7, 80069f6 <_strtol_l.isra.0+0xde>
 80069f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80069f6:	f8ca 9000 	str.w	r9, [sl]
 80069fa:	e7f2      	b.n	80069e2 <_strtol_l.isra.0+0xca>
 80069fc:	2430      	movs	r4, #48	; 0x30
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d1af      	bne.n	8006962 <_strtol_l.isra.0+0x4a>
 8006a02:	2608      	movs	r6, #8
 8006a04:	e7ad      	b.n	8006962 <_strtol_l.isra.0+0x4a>
 8006a06:	2c30      	cmp	r4, #48	; 0x30
 8006a08:	d0a3      	beq.n	8006952 <_strtol_l.isra.0+0x3a>
 8006a0a:	260a      	movs	r6, #10
 8006a0c:	e7a9      	b.n	8006962 <_strtol_l.isra.0+0x4a>
	...

08006a10 <strtol>:
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <strtol+0x24>)
 8006a12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a14:	681c      	ldr	r4, [r3, #0]
 8006a16:	4d08      	ldr	r5, [pc, #32]	; (8006a38 <strtol+0x28>)
 8006a18:	6a23      	ldr	r3, [r4, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf08      	it	eq
 8006a1e:	462b      	moveq	r3, r5
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	460a      	mov	r2, r1
 8006a26:	4601      	mov	r1, r0
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f7ff ff75 	bl	8006918 <_strtol_l.isra.0>
 8006a2e:	b003      	add	sp, #12
 8006a30:	bd30      	pop	{r4, r5, pc}
 8006a32:	bf00      	nop
 8006a34:	2000001c 	.word	0x2000001c
 8006a38:	20000080 	.word	0x20000080

08006a3c <_strtoul_l.isra.0>:
 8006a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a40:	4680      	mov	r8, r0
 8006a42:	4689      	mov	r9, r1
 8006a44:	4692      	mov	sl, r2
 8006a46:	461e      	mov	r6, r3
 8006a48:	460f      	mov	r7, r1
 8006a4a:	463d      	mov	r5, r7
 8006a4c:	9808      	ldr	r0, [sp, #32]
 8006a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a52:	f000 f883 	bl	8006b5c <__locale_ctype_ptr_l>
 8006a56:	4420      	add	r0, r4
 8006a58:	7843      	ldrb	r3, [r0, #1]
 8006a5a:	f013 0308 	ands.w	r3, r3, #8
 8006a5e:	d130      	bne.n	8006ac2 <_strtoul_l.isra.0+0x86>
 8006a60:	2c2d      	cmp	r4, #45	; 0x2d
 8006a62:	d130      	bne.n	8006ac6 <_strtoul_l.isra.0+0x8a>
 8006a64:	787c      	ldrb	r4, [r7, #1]
 8006a66:	1cbd      	adds	r5, r7, #2
 8006a68:	2101      	movs	r1, #1
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d05c      	beq.n	8006b28 <_strtoul_l.isra.0+0xec>
 8006a6e:	2e10      	cmp	r6, #16
 8006a70:	d109      	bne.n	8006a86 <_strtoul_l.isra.0+0x4a>
 8006a72:	2c30      	cmp	r4, #48	; 0x30
 8006a74:	d107      	bne.n	8006a86 <_strtoul_l.isra.0+0x4a>
 8006a76:	782b      	ldrb	r3, [r5, #0]
 8006a78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a7c:	2b58      	cmp	r3, #88	; 0x58
 8006a7e:	d14e      	bne.n	8006b1e <_strtoul_l.isra.0+0xe2>
 8006a80:	786c      	ldrb	r4, [r5, #1]
 8006a82:	2610      	movs	r6, #16
 8006a84:	3502      	adds	r5, #2
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	fbb2 f2f6 	udiv	r2, r2, r6
 8006a90:	fb06 fc02 	mul.w	ip, r6, r2
 8006a94:	ea6f 0c0c 	mvn.w	ip, ip
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006a9e:	2f09      	cmp	r7, #9
 8006aa0:	d817      	bhi.n	8006ad2 <_strtoul_l.isra.0+0x96>
 8006aa2:	463c      	mov	r4, r7
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	dd23      	ble.n	8006af0 <_strtoul_l.isra.0+0xb4>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	db1e      	blt.n	8006aea <_strtoul_l.isra.0+0xae>
 8006aac:	4282      	cmp	r2, r0
 8006aae:	d31c      	bcc.n	8006aea <_strtoul_l.isra.0+0xae>
 8006ab0:	d101      	bne.n	8006ab6 <_strtoul_l.isra.0+0x7a>
 8006ab2:	45a4      	cmp	ip, r4
 8006ab4:	db19      	blt.n	8006aea <_strtoul_l.isra.0+0xae>
 8006ab6:	fb00 4006 	mla	r0, r0, r6, r4
 8006aba:	2301      	movs	r3, #1
 8006abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ac0:	e7eb      	b.n	8006a9a <_strtoul_l.isra.0+0x5e>
 8006ac2:	462f      	mov	r7, r5
 8006ac4:	e7c1      	b.n	8006a4a <_strtoul_l.isra.0+0xe>
 8006ac6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ac8:	bf04      	itt	eq
 8006aca:	1cbd      	addeq	r5, r7, #2
 8006acc:	787c      	ldrbeq	r4, [r7, #1]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	e7cb      	b.n	8006a6a <_strtoul_l.isra.0+0x2e>
 8006ad2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006ad6:	2f19      	cmp	r7, #25
 8006ad8:	d801      	bhi.n	8006ade <_strtoul_l.isra.0+0xa2>
 8006ada:	3c37      	subs	r4, #55	; 0x37
 8006adc:	e7e2      	b.n	8006aa4 <_strtoul_l.isra.0+0x68>
 8006ade:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006ae2:	2f19      	cmp	r7, #25
 8006ae4:	d804      	bhi.n	8006af0 <_strtoul_l.isra.0+0xb4>
 8006ae6:	3c57      	subs	r4, #87	; 0x57
 8006ae8:	e7dc      	b.n	8006aa4 <_strtoul_l.isra.0+0x68>
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	e7e5      	b.n	8006abc <_strtoul_l.isra.0+0x80>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da09      	bge.n	8006b08 <_strtoul_l.isra.0+0xcc>
 8006af4:	2322      	movs	r3, #34	; 0x22
 8006af6:	f8c8 3000 	str.w	r3, [r8]
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	f1ba 0f00 	cmp.w	sl, #0
 8006b02:	d107      	bne.n	8006b14 <_strtoul_l.isra.0+0xd8>
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	b101      	cbz	r1, 8006b0c <_strtoul_l.isra.0+0xd0>
 8006b0a:	4240      	negs	r0, r0
 8006b0c:	f1ba 0f00 	cmp.w	sl, #0
 8006b10:	d0f8      	beq.n	8006b04 <_strtoul_l.isra.0+0xc8>
 8006b12:	b10b      	cbz	r3, 8006b18 <_strtoul_l.isra.0+0xdc>
 8006b14:	f105 39ff 	add.w	r9, r5, #4294967295
 8006b18:	f8ca 9000 	str.w	r9, [sl]
 8006b1c:	e7f2      	b.n	8006b04 <_strtoul_l.isra.0+0xc8>
 8006b1e:	2430      	movs	r4, #48	; 0x30
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d1b0      	bne.n	8006a86 <_strtoul_l.isra.0+0x4a>
 8006b24:	2608      	movs	r6, #8
 8006b26:	e7ae      	b.n	8006a86 <_strtoul_l.isra.0+0x4a>
 8006b28:	2c30      	cmp	r4, #48	; 0x30
 8006b2a:	d0a4      	beq.n	8006a76 <_strtoul_l.isra.0+0x3a>
 8006b2c:	260a      	movs	r6, #10
 8006b2e:	e7aa      	b.n	8006a86 <_strtoul_l.isra.0+0x4a>

08006b30 <strtoul>:
 8006b30:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <strtoul+0x24>)
 8006b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b34:	681c      	ldr	r4, [r3, #0]
 8006b36:	4d08      	ldr	r5, [pc, #32]	; (8006b58 <strtoul+0x28>)
 8006b38:	6a23      	ldr	r3, [r4, #32]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bf08      	it	eq
 8006b3e:	462b      	moveq	r3, r5
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4613      	mov	r3, r2
 8006b44:	460a      	mov	r2, r1
 8006b46:	4601      	mov	r1, r0
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff ff77 	bl	8006a3c <_strtoul_l.isra.0>
 8006b4e:	b003      	add	sp, #12
 8006b50:	bd30      	pop	{r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	2000001c 	.word	0x2000001c
 8006b58:	20000080 	.word	0x20000080

08006b5c <__locale_ctype_ptr_l>:
 8006b5c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006b60:	4770      	bx	lr

08006b62 <__ascii_mbtowc>:
 8006b62:	b082      	sub	sp, #8
 8006b64:	b901      	cbnz	r1, 8006b68 <__ascii_mbtowc+0x6>
 8006b66:	a901      	add	r1, sp, #4
 8006b68:	b142      	cbz	r2, 8006b7c <__ascii_mbtowc+0x1a>
 8006b6a:	b14b      	cbz	r3, 8006b80 <__ascii_mbtowc+0x1e>
 8006b6c:	7813      	ldrb	r3, [r2, #0]
 8006b6e:	600b      	str	r3, [r1, #0]
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	1c10      	adds	r0, r2, #0
 8006b74:	bf18      	it	ne
 8006b76:	2001      	movne	r0, #1
 8006b78:	b002      	add	sp, #8
 8006b7a:	4770      	bx	lr
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	e7fb      	b.n	8006b78 <__ascii_mbtowc+0x16>
 8006b80:	f06f 0001 	mvn.w	r0, #1
 8006b84:	e7f8      	b.n	8006b78 <__ascii_mbtowc+0x16>

08006b86 <__malloc_lock>:
 8006b86:	4770      	bx	lr

08006b88 <__malloc_unlock>:
 8006b88:	4770      	bx	lr

08006b8a <__ssputs_r>:
 8006b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8e:	688e      	ldr	r6, [r1, #8]
 8006b90:	429e      	cmp	r6, r3
 8006b92:	4682      	mov	sl, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	4690      	mov	r8, r2
 8006b98:	4699      	mov	r9, r3
 8006b9a:	d837      	bhi.n	8006c0c <__ssputs_r+0x82>
 8006b9c:	898a      	ldrh	r2, [r1, #12]
 8006b9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba2:	d031      	beq.n	8006c08 <__ssputs_r+0x7e>
 8006ba4:	6825      	ldr	r5, [r4, #0]
 8006ba6:	6909      	ldr	r1, [r1, #16]
 8006ba8:	1a6f      	subs	r7, r5, r1
 8006baa:	6965      	ldr	r5, [r4, #20]
 8006bac:	2302      	movs	r3, #2
 8006bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb2:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bb6:	f109 0301 	add.w	r3, r9, #1
 8006bba:	443b      	add	r3, r7
 8006bbc:	429d      	cmp	r5, r3
 8006bbe:	bf38      	it	cc
 8006bc0:	461d      	movcc	r5, r3
 8006bc2:	0553      	lsls	r3, r2, #21
 8006bc4:	d530      	bpl.n	8006c28 <__ssputs_r+0x9e>
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7ff fdc8 	bl	800675c <_malloc_r>
 8006bcc:	4606      	mov	r6, r0
 8006bce:	b950      	cbnz	r0, 8006be6 <__ssputs_r+0x5c>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	f8ca 3000 	str.w	r3, [sl]
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295
 8006be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be6:	463a      	mov	r2, r7
 8006be8:	6921      	ldr	r1, [r4, #16]
 8006bea:	f7ff fd47 	bl	800667c <memcpy>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	6126      	str	r6, [r4, #16]
 8006bfc:	6165      	str	r5, [r4, #20]
 8006bfe:	443e      	add	r6, r7
 8006c00:	1bed      	subs	r5, r5, r7
 8006c02:	6026      	str	r6, [r4, #0]
 8006c04:	60a5      	str	r5, [r4, #8]
 8006c06:	464e      	mov	r6, r9
 8006c08:	454e      	cmp	r6, r9
 8006c0a:	d900      	bls.n	8006c0e <__ssputs_r+0x84>
 8006c0c:	464e      	mov	r6, r9
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4641      	mov	r1, r8
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	f000 faa1 	bl	800715a <memmove>
 8006c18:	68a3      	ldr	r3, [r4, #8]
 8006c1a:	1b9b      	subs	r3, r3, r6
 8006c1c:	60a3      	str	r3, [r4, #8]
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	441e      	add	r6, r3
 8006c22:	6026      	str	r6, [r4, #0]
 8006c24:	2000      	movs	r0, #0
 8006c26:	e7dc      	b.n	8006be2 <__ssputs_r+0x58>
 8006c28:	462a      	mov	r2, r5
 8006c2a:	f000 faaf 	bl	800718c <_realloc_r>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d1e2      	bne.n	8006bfa <__ssputs_r+0x70>
 8006c34:	6921      	ldr	r1, [r4, #16]
 8006c36:	4650      	mov	r0, sl
 8006c38:	f7ff fd42 	bl	80066c0 <_free_r>
 8006c3c:	e7c8      	b.n	8006bd0 <__ssputs_r+0x46>
	...

08006c40 <_svfiprintf_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	461d      	mov	r5, r3
 8006c46:	898b      	ldrh	r3, [r1, #12]
 8006c48:	061f      	lsls	r7, r3, #24
 8006c4a:	b09d      	sub	sp, #116	; 0x74
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4616      	mov	r6, r2
 8006c52:	d50f      	bpl.n	8006c74 <_svfiprintf_r+0x34>
 8006c54:	690b      	ldr	r3, [r1, #16]
 8006c56:	b96b      	cbnz	r3, 8006c74 <_svfiprintf_r+0x34>
 8006c58:	2140      	movs	r1, #64	; 0x40
 8006c5a:	f7ff fd7f 	bl	800675c <_malloc_r>
 8006c5e:	6020      	str	r0, [r4, #0]
 8006c60:	6120      	str	r0, [r4, #16]
 8006c62:	b928      	cbnz	r0, 8006c70 <_svfiprintf_r+0x30>
 8006c64:	230c      	movs	r3, #12
 8006c66:	f8c8 3000 	str.w	r3, [r8]
 8006c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6e:	e0c8      	b.n	8006e02 <_svfiprintf_r+0x1c2>
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9309      	str	r3, [sp, #36]	; 0x24
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c7e:	2330      	movs	r3, #48	; 0x30
 8006c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c84:	9503      	str	r5, [sp, #12]
 8006c86:	f04f 0b01 	mov.w	fp, #1
 8006c8a:	4637      	mov	r7, r6
 8006c8c:	463d      	mov	r5, r7
 8006c8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c92:	b10b      	cbz	r3, 8006c98 <_svfiprintf_r+0x58>
 8006c94:	2b25      	cmp	r3, #37	; 0x25
 8006c96:	d13e      	bne.n	8006d16 <_svfiprintf_r+0xd6>
 8006c98:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c9c:	d00b      	beq.n	8006cb6 <_svfiprintf_r+0x76>
 8006c9e:	4653      	mov	r3, sl
 8006ca0:	4632      	mov	r2, r6
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	f7ff ff70 	bl	8006b8a <__ssputs_r>
 8006caa:	3001      	adds	r0, #1
 8006cac:	f000 80a4 	beq.w	8006df8 <_svfiprintf_r+0x1b8>
 8006cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb2:	4453      	add	r3, sl
 8006cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb6:	783b      	ldrb	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 809d 	beq.w	8006df8 <_svfiprintf_r+0x1b8>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	9307      	str	r3, [sp, #28]
 8006ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd2:	462f      	mov	r7, r5
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cda:	4850      	ldr	r0, [pc, #320]	; (8006e1c <_svfiprintf_r+0x1dc>)
 8006cdc:	f7f9 fa98 	bl	8000210 <memchr>
 8006ce0:	9b04      	ldr	r3, [sp, #16]
 8006ce2:	b9d0      	cbnz	r0, 8006d1a <_svfiprintf_r+0xda>
 8006ce4:	06d9      	lsls	r1, r3, #27
 8006ce6:	bf44      	itt	mi
 8006ce8:	2220      	movmi	r2, #32
 8006cea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cee:	071a      	lsls	r2, r3, #28
 8006cf0:	bf44      	itt	mi
 8006cf2:	222b      	movmi	r2, #43	; 0x2b
 8006cf4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cf8:	782a      	ldrb	r2, [r5, #0]
 8006cfa:	2a2a      	cmp	r2, #42	; 0x2a
 8006cfc:	d015      	beq.n	8006d2a <_svfiprintf_r+0xea>
 8006cfe:	9a07      	ldr	r2, [sp, #28]
 8006d00:	462f      	mov	r7, r5
 8006d02:	2000      	movs	r0, #0
 8006d04:	250a      	movs	r5, #10
 8006d06:	4639      	mov	r1, r7
 8006d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0c:	3b30      	subs	r3, #48	; 0x30
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	d94d      	bls.n	8006dae <_svfiprintf_r+0x16e>
 8006d12:	b1b8      	cbz	r0, 8006d44 <_svfiprintf_r+0x104>
 8006d14:	e00f      	b.n	8006d36 <_svfiprintf_r+0xf6>
 8006d16:	462f      	mov	r7, r5
 8006d18:	e7b8      	b.n	8006c8c <_svfiprintf_r+0x4c>
 8006d1a:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <_svfiprintf_r+0x1dc>)
 8006d1c:	1a80      	subs	r0, r0, r2
 8006d1e:	fa0b f000 	lsl.w	r0, fp, r0
 8006d22:	4318      	orrs	r0, r3
 8006d24:	9004      	str	r0, [sp, #16]
 8006d26:	463d      	mov	r5, r7
 8006d28:	e7d3      	b.n	8006cd2 <_svfiprintf_r+0x92>
 8006d2a:	9a03      	ldr	r2, [sp, #12]
 8006d2c:	1d11      	adds	r1, r2, #4
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	9103      	str	r1, [sp, #12]
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	db01      	blt.n	8006d3a <_svfiprintf_r+0xfa>
 8006d36:	9207      	str	r2, [sp, #28]
 8006d38:	e004      	b.n	8006d44 <_svfiprintf_r+0x104>
 8006d3a:	4252      	negs	r2, r2
 8006d3c:	f043 0302 	orr.w	r3, r3, #2
 8006d40:	9207      	str	r2, [sp, #28]
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	783b      	ldrb	r3, [r7, #0]
 8006d46:	2b2e      	cmp	r3, #46	; 0x2e
 8006d48:	d10c      	bne.n	8006d64 <_svfiprintf_r+0x124>
 8006d4a:	787b      	ldrb	r3, [r7, #1]
 8006d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4e:	d133      	bne.n	8006db8 <_svfiprintf_r+0x178>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	9203      	str	r2, [sp, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bfb8      	it	lt
 8006d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d60:	3702      	adds	r7, #2
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	4d2e      	ldr	r5, [pc, #184]	; (8006e20 <_svfiprintf_r+0x1e0>)
 8006d66:	7839      	ldrb	r1, [r7, #0]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7f9 fa50 	bl	8000210 <memchr>
 8006d70:	b138      	cbz	r0, 8006d82 <_svfiprintf_r+0x142>
 8006d72:	2340      	movs	r3, #64	; 0x40
 8006d74:	1b40      	subs	r0, r0, r5
 8006d76:	fa03 f000 	lsl.w	r0, r3, r0
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	4303      	orrs	r3, r0
 8006d7e:	3701      	adds	r7, #1
 8006d80:	9304      	str	r3, [sp, #16]
 8006d82:	7839      	ldrb	r1, [r7, #0]
 8006d84:	4827      	ldr	r0, [pc, #156]	; (8006e24 <_svfiprintf_r+0x1e4>)
 8006d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d8a:	2206      	movs	r2, #6
 8006d8c:	1c7e      	adds	r6, r7, #1
 8006d8e:	f7f9 fa3f 	bl	8000210 <memchr>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d038      	beq.n	8006e08 <_svfiprintf_r+0x1c8>
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <_svfiprintf_r+0x1e8>)
 8006d98:	bb13      	cbnz	r3, 8006de0 <_svfiprintf_r+0x1a0>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	3307      	adds	r3, #7
 8006d9e:	f023 0307 	bic.w	r3, r3, #7
 8006da2:	3308      	adds	r3, #8
 8006da4:	9303      	str	r3, [sp, #12]
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	444b      	add	r3, r9
 8006daa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dac:	e76d      	b.n	8006c8a <_svfiprintf_r+0x4a>
 8006dae:	fb05 3202 	mla	r2, r5, r2, r3
 8006db2:	2001      	movs	r0, #1
 8006db4:	460f      	mov	r7, r1
 8006db6:	e7a6      	b.n	8006d06 <_svfiprintf_r+0xc6>
 8006db8:	2300      	movs	r3, #0
 8006dba:	3701      	adds	r7, #1
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	250a      	movs	r5, #10
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc8:	3a30      	subs	r2, #48	; 0x30
 8006dca:	2a09      	cmp	r2, #9
 8006dcc:	d903      	bls.n	8006dd6 <_svfiprintf_r+0x196>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0c8      	beq.n	8006d64 <_svfiprintf_r+0x124>
 8006dd2:	9105      	str	r1, [sp, #20]
 8006dd4:	e7c6      	b.n	8006d64 <_svfiprintf_r+0x124>
 8006dd6:	fb05 2101 	mla	r1, r5, r1, r2
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4607      	mov	r7, r0
 8006dde:	e7f0      	b.n	8006dc2 <_svfiprintf_r+0x182>
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	4622      	mov	r2, r4
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <_svfiprintf_r+0x1ec>)
 8006de8:	a904      	add	r1, sp, #16
 8006dea:	4640      	mov	r0, r8
 8006dec:	f3af 8000 	nop.w
 8006df0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006df4:	4681      	mov	r9, r0
 8006df6:	d1d6      	bne.n	8006da6 <_svfiprintf_r+0x166>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	065b      	lsls	r3, r3, #25
 8006dfc:	f53f af35 	bmi.w	8006c6a <_svfiprintf_r+0x2a>
 8006e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e02:	b01d      	add	sp, #116	; 0x74
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	ab03      	add	r3, sp, #12
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <_svfiprintf_r+0x1ec>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	4640      	mov	r0, r8
 8006e14:	f000 f882 	bl	8006f1c <_printf_i>
 8006e18:	e7ea      	b.n	8006df0 <_svfiprintf_r+0x1b0>
 8006e1a:	bf00      	nop
 8006e1c:	08007252 	.word	0x08007252
 8006e20:	08007258 	.word	0x08007258
 8006e24:	0800725c 	.word	0x0800725c
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	08006b8b 	.word	0x08006b8b

08006e30 <_printf_common>:
 8006e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	4691      	mov	r9, r2
 8006e36:	461f      	mov	r7, r3
 8006e38:	688a      	ldr	r2, [r1, #8]
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e40:	4293      	cmp	r3, r2
 8006e42:	bfb8      	it	lt
 8006e44:	4613      	movlt	r3, r2
 8006e46:	f8c9 3000 	str.w	r3, [r9]
 8006e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	b112      	cbz	r2, 8006e5a <_printf_common+0x2a>
 8006e54:	3301      	adds	r3, #1
 8006e56:	f8c9 3000 	str.w	r3, [r9]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	0699      	lsls	r1, r3, #26
 8006e5e:	bf42      	ittt	mi
 8006e60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e64:	3302      	addmi	r3, #2
 8006e66:	f8c9 3000 	strmi.w	r3, [r9]
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	f015 0506 	ands.w	r5, r5, #6
 8006e70:	d107      	bne.n	8006e82 <_printf_common+0x52>
 8006e72:	f104 0a19 	add.w	sl, r4, #25
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	f8d9 2000 	ldr.w	r2, [r9]
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	42ab      	cmp	r3, r5
 8006e80:	dc28      	bgt.n	8006ed4 <_printf_common+0xa4>
 8006e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	3300      	adds	r3, #0
 8006e8a:	bf18      	it	ne
 8006e8c:	2301      	movne	r3, #1
 8006e8e:	0692      	lsls	r2, r2, #26
 8006e90:	d42d      	bmi.n	8006eee <_printf_common+0xbe>
 8006e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e96:	4639      	mov	r1, r7
 8006e98:	4630      	mov	r0, r6
 8006e9a:	47c0      	blx	r8
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d020      	beq.n	8006ee2 <_printf_common+0xb2>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	68e5      	ldr	r5, [r4, #12]
 8006ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ea8:	f003 0306 	and.w	r3, r3, #6
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	bf08      	it	eq
 8006eb0:	1aad      	subeq	r5, r5, r2
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	6922      	ldr	r2, [r4, #16]
 8006eb6:	bf0c      	ite	eq
 8006eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ebc:	2500      	movne	r5, #0
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	bfc4      	itt	gt
 8006ec2:	1a9b      	subgt	r3, r3, r2
 8006ec4:	18ed      	addgt	r5, r5, r3
 8006ec6:	f04f 0900 	mov.w	r9, #0
 8006eca:	341a      	adds	r4, #26
 8006ecc:	454d      	cmp	r5, r9
 8006ece:	d11a      	bne.n	8006f06 <_printf_common+0xd6>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e008      	b.n	8006ee6 <_printf_common+0xb6>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4652      	mov	r2, sl
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	47c0      	blx	r8
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d103      	bne.n	8006eea <_printf_common+0xba>
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	3501      	adds	r5, #1
 8006eec:	e7c3      	b.n	8006e76 <_printf_common+0x46>
 8006eee:	18e1      	adds	r1, r4, r3
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	2030      	movs	r0, #48	; 0x30
 8006ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef8:	4422      	add	r2, r4
 8006efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f02:	3302      	adds	r3, #2
 8006f04:	e7c5      	b.n	8006e92 <_printf_common+0x62>
 8006f06:	2301      	movs	r3, #1
 8006f08:	4622      	mov	r2, r4
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	47c0      	blx	r8
 8006f10:	3001      	adds	r0, #1
 8006f12:	d0e6      	beq.n	8006ee2 <_printf_common+0xb2>
 8006f14:	f109 0901 	add.w	r9, r9, #1
 8006f18:	e7d8      	b.n	8006ecc <_printf_common+0x9c>
	...

08006f1c <_printf_i>:
 8006f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f24:	460c      	mov	r4, r1
 8006f26:	7e09      	ldrb	r1, [r1, #24]
 8006f28:	b085      	sub	sp, #20
 8006f2a:	296e      	cmp	r1, #110	; 0x6e
 8006f2c:	4617      	mov	r7, r2
 8006f2e:	4606      	mov	r6, r0
 8006f30:	4698      	mov	r8, r3
 8006f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f34:	f000 80b3 	beq.w	800709e <_printf_i+0x182>
 8006f38:	d822      	bhi.n	8006f80 <_printf_i+0x64>
 8006f3a:	2963      	cmp	r1, #99	; 0x63
 8006f3c:	d036      	beq.n	8006fac <_printf_i+0x90>
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x3a>
 8006f40:	2900      	cmp	r1, #0
 8006f42:	f000 80b9 	beq.w	80070b8 <_printf_i+0x19c>
 8006f46:	2958      	cmp	r1, #88	; 0x58
 8006f48:	f000 8083 	beq.w	8007052 <_printf_i+0x136>
 8006f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f54:	e032      	b.n	8006fbc <_printf_i+0xa0>
 8006f56:	2964      	cmp	r1, #100	; 0x64
 8006f58:	d001      	beq.n	8006f5e <_printf_i+0x42>
 8006f5a:	2969      	cmp	r1, #105	; 0x69
 8006f5c:	d1f6      	bne.n	8006f4c <_printf_i+0x30>
 8006f5e:	6820      	ldr	r0, [r4, #0]
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	0605      	lsls	r5, r0, #24
 8006f64:	f103 0104 	add.w	r1, r3, #4
 8006f68:	d52a      	bpl.n	8006fc0 <_printf_i+0xa4>
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da03      	bge.n	8006f7a <_printf_i+0x5e>
 8006f72:	222d      	movs	r2, #45	; 0x2d
 8006f74:	425b      	negs	r3, r3
 8006f76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f7a:	486f      	ldr	r0, [pc, #444]	; (8007138 <_printf_i+0x21c>)
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	e039      	b.n	8006ff4 <_printf_i+0xd8>
 8006f80:	2973      	cmp	r1, #115	; 0x73
 8006f82:	f000 809d 	beq.w	80070c0 <_printf_i+0x1a4>
 8006f86:	d808      	bhi.n	8006f9a <_printf_i+0x7e>
 8006f88:	296f      	cmp	r1, #111	; 0x6f
 8006f8a:	d020      	beq.n	8006fce <_printf_i+0xb2>
 8006f8c:	2970      	cmp	r1, #112	; 0x70
 8006f8e:	d1dd      	bne.n	8006f4c <_printf_i+0x30>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	f043 0320 	orr.w	r3, r3, #32
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	e003      	b.n	8006fa2 <_printf_i+0x86>
 8006f9a:	2975      	cmp	r1, #117	; 0x75
 8006f9c:	d017      	beq.n	8006fce <_printf_i+0xb2>
 8006f9e:	2978      	cmp	r1, #120	; 0x78
 8006fa0:	d1d4      	bne.n	8006f4c <_printf_i+0x30>
 8006fa2:	2378      	movs	r3, #120	; 0x78
 8006fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fa8:	4864      	ldr	r0, [pc, #400]	; (800713c <_printf_i+0x220>)
 8006faa:	e055      	b.n	8007058 <_printf_i+0x13c>
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	1d19      	adds	r1, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6011      	str	r1, [r2, #0]
 8006fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e08c      	b.n	80070da <_printf_i+0x1be>
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6011      	str	r1, [r2, #0]
 8006fc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fc8:	bf18      	it	ne
 8006fca:	b21b      	sxthne	r3, r3
 8006fcc:	e7cf      	b.n	8006f6e <_printf_i+0x52>
 8006fce:	6813      	ldr	r3, [r2, #0]
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	1d18      	adds	r0, r3, #4
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	0628      	lsls	r0, r5, #24
 8006fd8:	d501      	bpl.n	8006fde <_printf_i+0xc2>
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	e002      	b.n	8006fe4 <_printf_i+0xc8>
 8006fde:	0668      	lsls	r0, r5, #25
 8006fe0:	d5fb      	bpl.n	8006fda <_printf_i+0xbe>
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	4854      	ldr	r0, [pc, #336]	; (8007138 <_printf_i+0x21c>)
 8006fe6:	296f      	cmp	r1, #111	; 0x6f
 8006fe8:	bf14      	ite	ne
 8006fea:	220a      	movne	r2, #10
 8006fec:	2208      	moveq	r2, #8
 8006fee:	2100      	movs	r1, #0
 8006ff0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ff4:	6865      	ldr	r5, [r4, #4]
 8006ff6:	60a5      	str	r5, [r4, #8]
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	f2c0 8095 	blt.w	8007128 <_printf_i+0x20c>
 8006ffe:	6821      	ldr	r1, [r4, #0]
 8007000:	f021 0104 	bic.w	r1, r1, #4
 8007004:	6021      	str	r1, [r4, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d13d      	bne.n	8007086 <_printf_i+0x16a>
 800700a:	2d00      	cmp	r5, #0
 800700c:	f040 808e 	bne.w	800712c <_printf_i+0x210>
 8007010:	4665      	mov	r5, ip
 8007012:	2a08      	cmp	r2, #8
 8007014:	d10b      	bne.n	800702e <_printf_i+0x112>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	07db      	lsls	r3, r3, #31
 800701a:	d508      	bpl.n	800702e <_printf_i+0x112>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	6862      	ldr	r2, [r4, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	bfde      	ittt	le
 8007024:	2330      	movle	r3, #48	; 0x30
 8007026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800702a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800702e:	ebac 0305 	sub.w	r3, ip, r5
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	f8cd 8000 	str.w	r8, [sp]
 8007038:	463b      	mov	r3, r7
 800703a:	aa03      	add	r2, sp, #12
 800703c:	4621      	mov	r1, r4
 800703e:	4630      	mov	r0, r6
 8007040:	f7ff fef6 	bl	8006e30 <_printf_common>
 8007044:	3001      	adds	r0, #1
 8007046:	d14d      	bne.n	80070e4 <_printf_i+0x1c8>
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
 800704c:	b005      	add	sp, #20
 800704e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007052:	4839      	ldr	r0, [pc, #228]	; (8007138 <_printf_i+0x21c>)
 8007054:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	1d1d      	adds	r5, r3, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6015      	str	r5, [r2, #0]
 8007062:	060a      	lsls	r2, r1, #24
 8007064:	d50b      	bpl.n	800707e <_printf_i+0x162>
 8007066:	07ca      	lsls	r2, r1, #31
 8007068:	bf44      	itt	mi
 800706a:	f041 0120 	orrmi.w	r1, r1, #32
 800706e:	6021      	strmi	r1, [r4, #0]
 8007070:	b91b      	cbnz	r3, 800707a <_printf_i+0x15e>
 8007072:	6822      	ldr	r2, [r4, #0]
 8007074:	f022 0220 	bic.w	r2, r2, #32
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	2210      	movs	r2, #16
 800707c:	e7b7      	b.n	8006fee <_printf_i+0xd2>
 800707e:	064d      	lsls	r5, r1, #25
 8007080:	bf48      	it	mi
 8007082:	b29b      	uxthmi	r3, r3
 8007084:	e7ef      	b.n	8007066 <_printf_i+0x14a>
 8007086:	4665      	mov	r5, ip
 8007088:	fbb3 f1f2 	udiv	r1, r3, r2
 800708c:	fb02 3311 	mls	r3, r2, r1, r3
 8007090:	5cc3      	ldrb	r3, [r0, r3]
 8007092:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007096:	460b      	mov	r3, r1
 8007098:	2900      	cmp	r1, #0
 800709a:	d1f5      	bne.n	8007088 <_printf_i+0x16c>
 800709c:	e7b9      	b.n	8007012 <_printf_i+0xf6>
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	6825      	ldr	r5, [r4, #0]
 80070a2:	6961      	ldr	r1, [r4, #20]
 80070a4:	1d18      	adds	r0, r3, #4
 80070a6:	6010      	str	r0, [r2, #0]
 80070a8:	0628      	lsls	r0, r5, #24
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	d501      	bpl.n	80070b2 <_printf_i+0x196>
 80070ae:	6019      	str	r1, [r3, #0]
 80070b0:	e002      	b.n	80070b8 <_printf_i+0x19c>
 80070b2:	066a      	lsls	r2, r5, #25
 80070b4:	d5fb      	bpl.n	80070ae <_printf_i+0x192>
 80070b6:	8019      	strh	r1, [r3, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	4665      	mov	r5, ip
 80070be:	e7b9      	b.n	8007034 <_printf_i+0x118>
 80070c0:	6813      	ldr	r3, [r2, #0]
 80070c2:	1d19      	adds	r1, r3, #4
 80070c4:	6011      	str	r1, [r2, #0]
 80070c6:	681d      	ldr	r5, [r3, #0]
 80070c8:	6862      	ldr	r2, [r4, #4]
 80070ca:	2100      	movs	r1, #0
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7f9 f89f 	bl	8000210 <memchr>
 80070d2:	b108      	cbz	r0, 80070d8 <_printf_i+0x1bc>
 80070d4:	1b40      	subs	r0, r0, r5
 80070d6:	6060      	str	r0, [r4, #4]
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	6123      	str	r3, [r4, #16]
 80070dc:	2300      	movs	r3, #0
 80070de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e2:	e7a7      	b.n	8007034 <_printf_i+0x118>
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	462a      	mov	r2, r5
 80070e8:	4639      	mov	r1, r7
 80070ea:	4630      	mov	r0, r6
 80070ec:	47c0      	blx	r8
 80070ee:	3001      	adds	r0, #1
 80070f0:	d0aa      	beq.n	8007048 <_printf_i+0x12c>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	079b      	lsls	r3, r3, #30
 80070f6:	d413      	bmi.n	8007120 <_printf_i+0x204>
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	4298      	cmp	r0, r3
 80070fe:	bfb8      	it	lt
 8007100:	4618      	movlt	r0, r3
 8007102:	e7a3      	b.n	800704c <_printf_i+0x130>
 8007104:	2301      	movs	r3, #1
 8007106:	464a      	mov	r2, r9
 8007108:	4639      	mov	r1, r7
 800710a:	4630      	mov	r0, r6
 800710c:	47c0      	blx	r8
 800710e:	3001      	adds	r0, #1
 8007110:	d09a      	beq.n	8007048 <_printf_i+0x12c>
 8007112:	3501      	adds	r5, #1
 8007114:	68e3      	ldr	r3, [r4, #12]
 8007116:	9a03      	ldr	r2, [sp, #12]
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	42ab      	cmp	r3, r5
 800711c:	dcf2      	bgt.n	8007104 <_printf_i+0x1e8>
 800711e:	e7eb      	b.n	80070f8 <_printf_i+0x1dc>
 8007120:	2500      	movs	r5, #0
 8007122:	f104 0919 	add.w	r9, r4, #25
 8007126:	e7f5      	b.n	8007114 <_printf_i+0x1f8>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1ac      	bne.n	8007086 <_printf_i+0x16a>
 800712c:	7803      	ldrb	r3, [r0, #0]
 800712e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007136:	e76c      	b.n	8007012 <_printf_i+0xf6>
 8007138:	08007263 	.word	0x08007263
 800713c:	08007274 	.word	0x08007274

08007140 <__ascii_wctomb>:
 8007140:	b149      	cbz	r1, 8007156 <__ascii_wctomb+0x16>
 8007142:	2aff      	cmp	r2, #255	; 0xff
 8007144:	bf85      	ittet	hi
 8007146:	238a      	movhi	r3, #138	; 0x8a
 8007148:	6003      	strhi	r3, [r0, #0]
 800714a:	700a      	strbls	r2, [r1, #0]
 800714c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007150:	bf98      	it	ls
 8007152:	2001      	movls	r0, #1
 8007154:	4770      	bx	lr
 8007156:	4608      	mov	r0, r1
 8007158:	4770      	bx	lr

0800715a <memmove>:
 800715a:	4288      	cmp	r0, r1
 800715c:	b510      	push	{r4, lr}
 800715e:	eb01 0302 	add.w	r3, r1, r2
 8007162:	d807      	bhi.n	8007174 <memmove+0x1a>
 8007164:	1e42      	subs	r2, r0, #1
 8007166:	4299      	cmp	r1, r3
 8007168:	d00a      	beq.n	8007180 <memmove+0x26>
 800716a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007172:	e7f8      	b.n	8007166 <memmove+0xc>
 8007174:	4283      	cmp	r3, r0
 8007176:	d9f5      	bls.n	8007164 <memmove+0xa>
 8007178:	1881      	adds	r1, r0, r2
 800717a:	1ad2      	subs	r2, r2, r3
 800717c:	42d3      	cmn	r3, r2
 800717e:	d100      	bne.n	8007182 <memmove+0x28>
 8007180:	bd10      	pop	{r4, pc}
 8007182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007186:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800718a:	e7f7      	b.n	800717c <memmove+0x22>

0800718c <_realloc_r>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	4607      	mov	r7, r0
 8007190:	4614      	mov	r4, r2
 8007192:	460e      	mov	r6, r1
 8007194:	b921      	cbnz	r1, 80071a0 <_realloc_r+0x14>
 8007196:	4611      	mov	r1, r2
 8007198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800719c:	f7ff bade 	b.w	800675c <_malloc_r>
 80071a0:	b922      	cbnz	r2, 80071ac <_realloc_r+0x20>
 80071a2:	f7ff fa8d 	bl	80066c0 <_free_r>
 80071a6:	4625      	mov	r5, r4
 80071a8:	4628      	mov	r0, r5
 80071aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ac:	f000 f814 	bl	80071d8 <_malloc_usable_size_r>
 80071b0:	42a0      	cmp	r0, r4
 80071b2:	d20f      	bcs.n	80071d4 <_realloc_r+0x48>
 80071b4:	4621      	mov	r1, r4
 80071b6:	4638      	mov	r0, r7
 80071b8:	f7ff fad0 	bl	800675c <_malloc_r>
 80071bc:	4605      	mov	r5, r0
 80071be:	2800      	cmp	r0, #0
 80071c0:	d0f2      	beq.n	80071a8 <_realloc_r+0x1c>
 80071c2:	4631      	mov	r1, r6
 80071c4:	4622      	mov	r2, r4
 80071c6:	f7ff fa59 	bl	800667c <memcpy>
 80071ca:	4631      	mov	r1, r6
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff fa77 	bl	80066c0 <_free_r>
 80071d2:	e7e9      	b.n	80071a8 <_realloc_r+0x1c>
 80071d4:	4635      	mov	r5, r6
 80071d6:	e7e7      	b.n	80071a8 <_realloc_r+0x1c>

080071d8 <_malloc_usable_size_r>:
 80071d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071dc:	1f18      	subs	r0, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfbc      	itt	lt
 80071e2:	580b      	ldrlt	r3, [r1, r0]
 80071e4:	18c0      	addlt	r0, r0, r3
 80071e6:	4770      	bx	lr

080071e8 <_init>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	bf00      	nop
 80071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ee:	bc08      	pop	{r3}
 80071f0:	469e      	mov	lr, r3
 80071f2:	4770      	bx	lr

080071f4 <_fini>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	bf00      	nop
 80071f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fa:	bc08      	pop	{r3}
 80071fc:	469e      	mov	lr, r3
 80071fe:	4770      	bx	lr
