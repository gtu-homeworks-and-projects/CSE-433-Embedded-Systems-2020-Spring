
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb0  08005bb0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200000b8  08005c70  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08005c70  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f842  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027e5  00000000  00000000  0002f92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00032110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000170b9  00000000  00000000  00033948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb0d  00000000  00000000  0004aa01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d415  00000000  00000000  0005650e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000e39a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a6c 	.word	0x08005a6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08005a6c 	.word	0x08005a6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	long data   = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK))
 8000e9c:	4b64      	ldr	r3, [pc, #400]	; (8001030 <decodeJVC+0x1a4>)
 8000e9e:	785b      	ldrb	r3, [r3, #1]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b22      	cmp	r3, #34	; 0x22
 8000ea4:	d12e      	bne.n	8000f04 <decodeJVC+0x78>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fe7d 	bl	8001bb8 <MATCH_MARK>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d01f      	beq.n	8000f04 <decodeJVC+0x78>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	4b59      	ldr	r3, [pc, #356]	; (8001030 <decodeJVC+0x1a4>)
 8000eca:	785b      	ldrb	r3, [r3, #1]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fe69 	bl	8001bb8 <MATCH_MARK>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <decodeJVC+0x78>
	{
		results->bits = 0;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2206      	movs	r2, #6
 8000efe:	701a      	strb	r2, [r3, #0]
		return true;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e090      	b.n	8001026 <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1c59      	adds	r1, r3, #1
 8000f0c:	6139      	str	r1, [r7, #16]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fe4c 	bl	8001bb8 <MATCH_MARK>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <decodeJVC+0x9e>
 8000f26:	2300      	movs	r3, #0
 8000f28:	e07d      	b.n	8001026 <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 8000f2a:	4b41      	ldr	r3, [pc, #260]	; (8001030 <decodeJVC+0x1a4>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b20      	cmp	r3, #32
 8000f32:	d801      	bhi.n	8000f38 <decodeJVC+0xac>
 8000f34:	2300      	movs	r3, #0
 8000f36:	e076      	b.n	8001026 <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1c59      	adds	r1, r3, #1
 8000f40:	6139      	str	r1, [r7, #16]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe40 	bl	8001bd4 <MATCH_SPACE>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <decodeJVC+0xd2>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e063      	b.n	8001026 <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e042      	b.n	8000fea <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1c59      	adds	r1, r3, #1
 8000f6c:	6139      	str	r1, [r7, #16]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fe1c 	bl	8001bb8 <MATCH_MARK>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <decodeJVC+0xfe>
 8000f86:	2300      	movs	r3, #0
 8000f88:	e04d      	b.n	8001026 <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fe19 	bl	8001bd4 <MATCH_SPACE>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <decodeJVC+0x128>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e014      	b.n	8000fde <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f240 2126 	movw	r1, #550	; 0x226
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fe04 	bl	8001bd4 <MATCH_SPACE>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <decodeJVC+0x14e>
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e001      	b.n	8000fde <decodeJVC+0x152>
		else return false ;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e023      	b.n	8001026 <decodeJVC+0x19a>
		offset++;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	ddb9      	ble.n	8000f64 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fdd8 	bl	8001bb8 <MATCH_MARK>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <decodeJVC+0x186>
 800100e:	2300      	movs	r3, #0
 8001010:	e009      	b.n	8001026 <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2210      	movs	r2, #16
 8001016:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]

	return true;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000e0 	.word	0x200000e0

08001034 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <decodeLG+0x13c>)
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b38      	cmp	r3, #56	; 0x38
 800104c:	d801      	bhi.n	8001052 <decodeLG+0x1e>
 800104e:	2300      	movs	r3, #0
 8001050:	e089      	b.n	8001166 <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	6139      	str	r1, [r7, #16]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fda5 	bl	8001bb8 <MATCH_MARK>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <decodeLG+0x44>
 8001074:	2300      	movs	r3, #0
 8001076:	e076      	b.n	8001166 <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1c59      	adds	r1, r3, #1
 8001080:	6139      	str	r1, [r7, #16]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fda0 	bl	8001bd4 <MATCH_SPACE>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <decodeLG+0x6a>
 800109a:	2300      	movs	r3, #0
 800109c:	e063      	b.n	8001166 <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e042      	b.n	800112a <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1c59      	adds	r1, r3, #1
 80010ac:	6139      	str	r1, [r7, #16]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd7c 	bl	8001bb8 <MATCH_MARK>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <decodeLG+0x96>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e04d      	b.n	8001166 <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fd79 	bl	8001bd4 <MATCH_SPACE>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <decodeLG+0xc0>
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e014      	b.n	800111e <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
 8001102:	f240 2126 	movw	r1, #550	; 0x226
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd64 	bl	8001bd4 <MATCH_SPACE>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <decodeLG+0xe6>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e001      	b.n	800111e <decodeLG+0xea>
        else                                                           return false ;
 800111a:	2300      	movs	r3, #0
 800111c:	e023      	b.n	8001166 <decodeLG+0x132>
        offset++;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3301      	adds	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b1b      	cmp	r3, #27
 800112e:	ddb9      	ble.n	80010a4 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fd38 	bl	8001bb8 <MATCH_MARK>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <decodeLG+0x11e>
 800114e:	2300      	movs	r3, #0
 8001150:	e009      	b.n	8001166 <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	221c      	movs	r2, #28
 8001156:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	220a      	movs	r2, #10
 8001162:	701a      	strb	r2, [r3, #0]
    return true;
 8001164:	2301      	movs	r3, #1
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000e0 	.word	0x200000e0

08001174 <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f242 3128 	movw	r1, #9000	; 0x2328
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd0e 	bl	8001bb8 <MATCH_MARK>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <decodeNEC+0x32>
 80011a2:	2300      	movs	r3, #0
 80011a4:	e0a1      	b.n	80012ea <decodeNEC+0x176>
	offset++;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	3301      	adds	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <decodeNEC+0x180>)
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d12a      	bne.n	800120c <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fd03 	bl	8001bd4 <MATCH_SPACE>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01b      	beq.n	800120c <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	3301      	adds	r3, #1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f44f 710c 	mov.w	r1, #560	; 0x230
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fce5 	bl	8001bb8 <MATCH_MARK>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	701a      	strb	r2, [r3, #0]
		return true;
 8001208:	2301      	movs	r3, #1
 800120a:	e06e      	b.n	80012ea <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <decodeNEC+0x180>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b43      	cmp	r3, #67	; 0x43
 8001214:	d801      	bhi.n	800121a <decodeNEC+0xa6>
 8001216:	2300      	movs	r3, #0
 8001218:	e067      	b.n	80012ea <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	f241 1194 	movw	r1, #4500	; 0x1194
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fcd1 	bl	8001bd4 <MATCH_SPACE>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <decodeNEC+0xc8>
 8001238:	2300      	movs	r3, #0
 800123a:	e056      	b.n	80012ea <decodeNEC+0x176>
	offset++;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3301      	adds	r3, #1
 8001240:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	e043      	b.n	80012d0 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f44f 710c 	mov.w	r1, #560	; 0x230
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fcac 	bl	8001bb8 <MATCH_MARK>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <decodeNEC+0xf6>
 8001266:	2300      	movs	r3, #0
 8001268:	e03f      	b.n	80012ea <decodeNEC+0x176>
		offset++;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	f240 619a 	movw	r1, #1690	; 0x69a
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fca6 	bl	8001bd4 <MATCH_SPACE>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <decodeNEC+0x126>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e014      	b.n	80012c4 <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f44f 710c 	mov.w	r1, #560	; 0x230
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fc91 	bl	8001bd4 <MATCH_SPACE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <decodeNEC+0x14c>
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e001      	b.n	80012c4 <decodeNEC+0x150>
		else                                                            return false ;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e012      	b.n	80012ea <decodeNEC+0x176>
		offset++;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3301      	adds	r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b1f      	cmp	r3, #31
 80012d4:	ddb8      	ble.n	8001248 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2220      	movs	r2, #32
 80012da:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	701a      	strb	r2, [r3, #0]

	return true;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000e0 	.word	0x200000e0

080012f8 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001310:	4293      	cmp	r3, r2
 8001312:	db01      	blt.n	8001318 <getRClevel+0x20>
 8001314:	2301      	movs	r3, #1
 8001316:	e05b      	b.n	80013d0 <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <getRClevel+0x50>
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	e001      	b.n	800134c <getRClevel+0x54>
 8001348:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800134c:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4413      	add	r3, r2
 8001354:	4619      	mov	r1, r3
 8001356:	69b8      	ldr	r0, [r7, #24]
 8001358:	f000 fbda 	bl	8001b10 <MATCH>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <getRClevel+0x70>
 8001362:	2301      	movs	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e020      	b.n	80013aa <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	005a      	lsls	r2, r3, #1
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4413      	add	r3, r2
 8001370:	4619      	mov	r1, r3
 8001372:	69b8      	ldr	r0, [r7, #24]
 8001374:	f000 fbcc 	bl	8001b10 <MATCH>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <getRClevel+0x8c>
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e012      	b.n	80013aa <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	441a      	add	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	4619      	mov	r1, r3
 8001392:	69b8      	ldr	r0, [r7, #24]
 8001394:	f000 fbbc 	bl	8001b10 <MATCH>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <getRClevel+0xac>
 800139e:	2303      	movs	r3, #3
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e002      	b.n	80013aa <getRClevel+0xb2>
	else                                         return -1 ;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	e012      	b.n	80013d0 <getRClevel+0xd8>

	(*used)++;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dc07      	bgt.n	80013ce <getRClevel+0xd6>
		*used = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
		(*offset)++;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 80013ce:	697b      	ldr	r3, [r7, #20]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 80013e8:	2301      	movs	r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <decodeRC5+0x108>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d801      	bhi.n	80013fa <decodeRC5+0x22>
 80013f6:	2300      	movs	r3, #0
 80013f8:	e06d      	b.n	80014d6 <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	f107 0108 	add.w	r1, r7, #8
 8001402:	f240 3379 	movw	r3, #889	; 0x379
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff76 	bl	80012f8 <getRClevel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <decodeRC5+0x3e>
 8001412:	2300      	movs	r3, #0
 8001414:	e05f      	b.n	80014d6 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	f107 0108 	add.w	r1, r7, #8
 800141e:	f240 3379 	movw	r3, #889	; 0x379
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff68 	bl	80012f8 <getRClevel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <decodeRC5+0x5a>
 800142e:	2300      	movs	r3, #0
 8001430:	e051      	b.n	80014d6 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	f107 0108 	add.w	r1, r7, #8
 800143a:	f240 3379 	movw	r3, #889	; 0x379
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff5a 	bl	80012f8 <getRClevel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <decodeRC5+0x76>
 800144a:	2300      	movs	r3, #0
 800144c:	e043      	b.n	80014d6 <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	e02e      	b.n	80014b2 <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 8001454:	f107 020c 	add.w	r2, r7, #12
 8001458:	f107 0108 	add.w	r1, r7, #8
 800145c:	f240 3379 	movw	r3, #889	; 0x379
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff49 	bl	80012f8 <getRClevel>
 8001466:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	f107 0108 	add.w	r1, r7, #8
 8001470:	f240 3379 	movw	r3, #889	; 0x379
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff3f 	bl	80012f8 <getRClevel>
 800147a:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <decodeRC5+0xbc>
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <decodeRC5+0xbc>
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	e00b      	b.n	80014ac <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <decodeRC5+0xd0>
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d103      	bne.n	80014a8 <decodeRC5+0xd0>
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	e001      	b.n	80014ac <decodeRC5+0xd4>
		else                                              return false ;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e014      	b.n	80014d6 <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3301      	adds	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <decodeRC5+0x108>)
 80014b4:	785b      	ldrb	r3, [r3, #1]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dcc9      	bgt.n	8001454 <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	return true;
 80014d4:	2301      	movs	r3, #1
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200000e0 	.word	0x200000e0

080014e4 <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 80014f4:	2301      	movs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dc01      	bgt.n	8001506 <decodeRC6+0x22>
 8001502:	2300      	movs	r3, #0
 8001504:	e0a9      	b.n	800165a <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f640 216a 	movw	r1, #2666	; 0xa6a
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fb4b 	bl	8001bb8 <MATCH_MARK>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <decodeRC6+0x48>
 8001528:	2300      	movs	r3, #0
 800152a:	e096      	b.n	800165a <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c59      	adds	r1, r3, #1
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f240 3179 	movw	r1, #889	; 0x379
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fb46 	bl	8001bd4 <MATCH_SPACE>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <decodeRC6+0x6e>
 800154e:	2300      	movs	r3, #0
 8001550:	e083      	b.n	800165a <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 8001552:	f107 020c 	add.w	r2, r7, #12
 8001556:	f107 0108 	add.w	r1, r7, #8
 800155a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff feca 	bl	80012f8 <getRClevel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <decodeRC6+0x8a>
 800156a:	2300      	movs	r3, #0
 800156c:	e075      	b.n	800165a <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	f107 0108 	add.w	r1, r7, #8
 8001576:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff febc 	bl	80012f8 <getRClevel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <decodeRC6+0xa6>
 8001586:	2300      	movs	r3, #0
 8001588:	e067      	b.n	800165a <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e052      	b.n	8001636 <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	f107 0108 	add.w	r1, r7, #8
 8001598:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff feab 	bl	80012f8 <getRClevel>
 80015a2:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d10e      	bne.n	80015c8 <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fe9e 	bl	80012f8 <getRClevel>
 80015bc:	4602      	mov	r2, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d001      	beq.n	80015c8 <decodeRC6+0xe4>
 80015c4:	2300      	movs	r3, #0
 80015c6:	e048      	b.n	800165a <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 80015c8:	f107 020c 	add.w	r2, r7, #12
 80015cc:	f107 0108 	add.w	r1, r7, #8
 80015d0:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fe8f 	bl	80012f8 <getRClevel>
 80015da:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d10e      	bne.n	8001600 <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	f107 0108 	add.w	r1, r7, #8
 80015ea:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe82 	bl	80012f8 <getRClevel>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d001      	beq.n	8001600 <decodeRC6+0x11c>
 80015fc:	2300      	movs	r3, #0
 80015fe:	e02c      	b.n	800165a <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <decodeRC6+0x134>
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <decodeRC6+0x134>
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e00b      	b.n	8001630 <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <decodeRC6+0x148>
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <decodeRC6+0x148>
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	e001      	b.n	8001630 <decodeRC6+0x14c>
		else                                              return false ;            // Error
 800162c:	2300      	movs	r3, #0
 800162e:	e014      	b.n	800165a <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	3301      	adds	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	dca5      	bgt.n	8001590 <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	b21a      	sxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
	return true;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <sendSAMSUNG>:
#define SAMSUNG_RPT_SPACE   2250

//+=============================================================================
#if SEND_SAMSUNG
void sendSAMSUNG(unsigned long data,  int nbits)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	// Set IR carrier frequency
	enableIROut(38);
 800166c:	2026      	movs	r0, #38	; 0x26
 800166e:	f000 fc9d 	bl	8001fac <enableIROut>

	// Header
	mark(SAMSUNG_HDR_MARK);
 8001672:	f241 1094 	movw	r0, #4500	; 0x1194
 8001676:	f000 fc71 	bl	8001f5c <mark>
	space(SAMSUNG_HDR_SPACE);
 800167a:	f241 1094 	movw	r0, #4500	; 0x1194
 800167e:	f000 fc81 	bl	8001f84 <space>

	// Data
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	2201      	movs	r2, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e018      	b.n	80016c2 <sendSAMSUNG+0x60>
	{
		if (data & mask)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <sendSAMSUNG+0x4a>
		{
			mark(SAMSUNG_BIT_MARK);
 800169a:	f44f 700c 	mov.w	r0, #560	; 0x230
 800169e:	f000 fc5d 	bl	8001f5c <mark>
			space(SAMSUNG_ONE_SPACE);
 80016a2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80016a6:	f000 fc6d 	bl	8001f84 <space>
 80016aa:	e007      	b.n	80016bc <sendSAMSUNG+0x5a>
		}
		else
		{
			mark(SAMSUNG_BIT_MARK);
 80016ac:	f44f 700c 	mov.w	r0, #560	; 0x230
 80016b0:	f000 fc54 	bl	8001f5c <mark>
			space(SAMSUNG_ZERO_SPACE);
 80016b4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80016b8:	f000 fc64 	bl	8001f84 <space>
	for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e3      	bne.n	8001690 <sendSAMSUNG+0x2e>
		}
	}

	// Footer
	mark(SAMSUNG_BIT_MARK);
 80016c8:	f44f 700c 	mov.w	r0, #560	; 0x230
 80016cc:	f000 fc46 	bl	8001f5c <mark>
    space(0);  // Always end with the LED off
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 fc57 	bl	8001f84 <space>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f241 1194 	movw	r1, #4500	; 0x1194
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fa58 	bl	8001bb8 <MATCH_MARK>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <decodeSAMSUNG+0x32>
 800170e:	2300      	movs	r3, #0
 8001710:	e09f      	b.n	8001852 <decodeSAMSUNG+0x172>
	offset++;
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <decodeSAMSUNG+0x17c>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b04      	cmp	r3, #4
 8001720:	d12a      	bne.n	8001778 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fa4d 	bl	8001bd4 <MATCH_SPACE>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa2f 	bl	8001bb8 <MATCH_MARK>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2207      	movs	r2, #7
 8001772:	701a      	strb	r2, [r3, #0]
		return true;
 8001774:	2301      	movs	r3, #1
 8001776:	e06c      	b.n	8001852 <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <decodeSAMSUNG+0x17c>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b43      	cmp	r3, #67	; 0x43
 8001780:	d801      	bhi.n	8001786 <decodeSAMSUNG+0xa6>
 8001782:	2300      	movs	r3, #0
 8001784:	e065      	b.n	8001852 <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1c59      	adds	r1, r3, #1
 800178e:	6139      	str	r1, [r7, #16]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f241 1194 	movw	r1, #4500	; 0x1194
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fa19 	bl	8001bd4 <MATCH_SPACE>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <decodeSAMSUNG+0xcc>
 80017a8:	2300      	movs	r3, #0
 80017aa:	e052      	b.n	8001852 <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e042      	b.n	8001838 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1c59      	adds	r1, r3, #1
 80017ba:	6139      	str	r1, [r7, #16]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	f44f 710c 	mov.w	r1, #560	; 0x230
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f9f5 	bl	8001bb8 <MATCH_MARK>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <decodeSAMSUNG+0xf8>
 80017d4:	2300      	movs	r3, #0
 80017d6:	e03c      	b.n	8001852 <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f9f2 	bl	8001bd4 <MATCH_SPACE>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <decodeSAMSUNG+0x122>
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e014      	b.n	800182c <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f9dd 	bl	8001bd4 <MATCH_SPACE>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <decodeSAMSUNG+0x148>
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e001      	b.n	800182c <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 8001828:	2300      	movs	r3, #0
 800182a:	e012      	b.n	8001852 <decodeSAMSUNG+0x172>
		offset++;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3301      	adds	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b1f      	cmp	r3, #31
 800183c:	ddb9      	ble.n	80017b2 <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2207      	movs	r2, #7
 800184e:	701a      	strb	r2, [r3, #0]
	return true;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200000e0 	.word	0x200000e0

08001860 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <decodeSony+0x140>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b19      	cmp	r3, #25
 8001878:	d801      	bhi.n	800187e <decodeSony+0x1e>
 800187a:	2300      	movs	r3, #0
 800187c:	e08b      	b.n	8001996 <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001890:	d20b      	bcs.n	80018aa <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f04f 32ff 	mov.w	r2, #4294967295
 800189e:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	220b      	movs	r2, #11
 80018a4:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e075      	b.n	8001996 <decodeSony+0x136>
	}
	offset++;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c59      	adds	r1, r3, #1
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f976 	bl	8001bb8 <MATCH_MARK>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d13f      	bne.n	8001952 <decodeSony+0xf2>
 80018d2:	2300      	movs	r3, #0
 80018d4:	e05f      	b.n	8001996 <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1c59      	adds	r1, r3, #1
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f971 	bl	8001bd4 <MATCH_SPACE>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d034      	beq.n	8001962 <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f954 	bl	8001bb8 <MATCH_MARK>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <decodeSony+0xc2>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e014      	b.n	800194c <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f93f 	bl	8001bb8 <MATCH_MARK>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <decodeSony+0xe8>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e001      	b.n	800194c <decodeSony+0xec>
		else                                                           return false ;
 8001948:	2300      	movs	r3, #0
 800194a:	e024      	b.n	8001996 <decodeSony+0x136>
		offset++;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <decodeSony+0x140>)
 8001958:	7852      	ldrb	r2, [r2, #1]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4293      	cmp	r3, r2
 800195e:	dbba      	blt.n	80018d6 <decodeSony+0x76>
 8001960:	e000      	b.n	8001964 <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 8001962:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3b01      	subs	r3, #1
 8001968:	0fda      	lsrs	r2, r3, #31
 800196a:	4413      	add	r3, r2
 800196c:	105b      	asrs	r3, r3, #1
 800196e:	b21a      	sxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800197a:	2b0b      	cmp	r3, #11
 800197c:	dc04      	bgt.n	8001988 <decodeSony+0x128>
		results->bits = 0;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	811a      	strh	r2, [r3, #8]
		return false;
 8001984:	2300      	movs	r3, #0
 8001986:	e006      	b.n	8001996 <decodeSony+0x136>
	}
	results->value       = data;
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2204      	movs	r2, #4
 8001992:	701a      	strb	r2, [r3, #0]
	return true;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000e0 	.word	0x200000e0

080019a4 <HAL_TIM_PeriodElapsedCallback>:
#include "IR_Remote.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	f040 80a2 	bne.w	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
	{
		uint8_t irdata = RECIV_PIN;
 80019b6:	2120      	movs	r1, #32
 80019b8:	4853      	ldr	r0, [pc, #332]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80019ba:	f001 fb69 	bl	8003090 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]
		irparams.timer++;  // One more 10uS tick
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019c4:	885b      	ldrh	r3, [r3, #2]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019ce:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d2:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 80019d4:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	3b02      	subs	r3, #2
 80019dc:	2b04      	cmp	r3, #4
 80019de:	f200 808c 	bhi.w	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	080019fd 	.word	0x080019fd
 80019ec:	08001a53 	.word	0x08001a53
 80019f0:	08001a87 	.word	0x08001a87
 80019f4:	08001acf 	.word	0x08001acf
 80019f8:	08001add 	.word	0x08001add
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d174      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a0c:	d203      	bcs.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x72>
					{
						irparams.timer = 0;
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8001a14:	e06a      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x148>
						irparams.overflow = false;
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	b2d1      	uxtb	r1, r2
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a30:	7051      	strb	r1, [r2, #1]
 8001a32:	4618      	mov	r0, r3
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a36:	885b      	ldrh	r3, [r3, #2]
 8001a38:	b299      	uxth	r1, r3
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a3c:	0043      	lsls	r3, r0, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
			break;
 8001a50:	e04c      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x148>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d14b      	bne.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x14c>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a5a:	785b      	ldrb	r3, [r3, #1]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	b2d1      	uxtb	r1, r2
 8001a62:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a64:	7051      	strb	r1, [r2, #1]
 8001a66:	4618      	mov	r0, r3
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a70:	0043      	lsls	r3, r0, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a80:	2204      	movs	r2, #4
 8001a82:	701a      	strb	r2, [r3, #0]
				}

			break;
 8001a84:	e034      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d116      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x116>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	b2d1      	uxtb	r1, r2
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a98:	7051      	strb	r1, [r2, #1]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a9e:	885b      	ldrh	r3, [r3, #2]
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001aa4:	0043      	lsls	r3, r0, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8001ab8:	e01c      	b.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x150>
				else if(irparams.timer > GAP_TICKS) // Space
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac4:	d916      	bls.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x150>
					irparams.rcvstate = STATE_STOP;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ac8:	2205      	movs	r2, #5
 8001aca:	701a      	strb	r2, [r3, #0]
			break;
 8001acc:	e012      	b.n	8001af4 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d111      	bne.n	8001af8 <HAL_TIM_PeriodElapsedCallback+0x154>
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	805a      	strh	r2, [r3, #2]
			break;
 8001ada:	e00d      	b.n	8001af8 <HAL_TIM_PeriodElapsedCallback+0x154>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	701a      	strb	r2, [r3, #0]
			break;
 8001aea:	e006      	b.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8001aec:	bf00      	nop
 8001aee:	e004      	b.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8001af0:	bf00      	nop
 8001af2:	e002      	b.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8001af4:	bf00      	nop
 8001af6:	e000      	b.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x156>
			break;
 8001af8:	bf00      	nop
		}
	}
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200002fc 	.word	0x200002fc
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	200000e0 	.word	0x200000e0

08001b10 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 8001b1a:	6838      	ldr	r0, [r7, #0]
 8001b1c:	f7fe fd0a 	bl	8000534 <__aeabi_i2d>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <MATCH+0x98>)
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_dmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4621      	mov	r1, r4
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MATCH+0x9c>)
 8001b38:	f7fe fe90 	bl	800085c <__aeabi_ddiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f7fe fffa 	bl	8000b3c <__aeabi_d2iz>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	db25      	blt.n	8001b9c <MATCH+0x8c>
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f7fe fcef 	bl	8000534 <__aeabi_i2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MATCH+0xa0>)
 8001b5c:	f7fe fd54 	bl	8000608 <__aeabi_dmul>
 8001b60:	4603      	mov	r3, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	4618      	mov	r0, r3
 8001b66:	4621      	mov	r1, r4
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MATCH+0x9c>)
 8001b6e:	f7fe fe75 	bl	800085c <__aeabi_ddiv>
 8001b72:	4603      	mov	r3, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	4618      	mov	r0, r3
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MATCH+0xa4>)
 8001b80:	f7fe fb8c 	bl	800029c <__adddf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	460c      	mov	r4, r1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	f7fe ffd6 	bl	8000b3c <__aeabi_d2iz>
 8001b90:	4602      	mov	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	dc01      	bgt.n	8001b9c <MATCH+0x8c>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <MATCH+0x8e>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	3fe80000 	.word	0x3fe80000
 8001bac:	40240000 	.word	0x40240000
 8001bb0:	3ff40000 	.word	0x3ff40000
 8001bb4:	3ff00000 	.word	0x3ff00000

08001bb8 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	//return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
	return MATCH(measured_ticks, desired_us);
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffa3 	bl	8001b10 <MATCH>
 8001bca:	4603      	mov	r3, r0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	//return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
	return MATCH(measured_ticks, desired_us);
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff95 	bl	8001b10 <MATCH>
 8001be6:	4603      	mov	r3, r0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <my_decode+0xc4>)
 8001bfc:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <my_decode+0xc8>)
 8001c00:	785b      	ldrb	r3, [r3, #1]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	b21a      	sxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <my_decode+0xc8>)
 8001c0c:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <my_decode+0xc8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d001      	beq.n	8001c26 <my_decode+0x36>
 8001c22:	2300      	movs	r3, #0
 8001c24:	e042      	b.n	8001cac <my_decode+0xbc>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff faa4 	bl	8001174 <decodeNEC>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <my_decode+0x46>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e03a      	b.n	8001cac <my_decode+0xbc>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe12 	bl	8001860 <decodeSony>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <my_decode+0x56>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e032      	b.n	8001cac <my_decode+0xbc>
	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fbc6 	bl	80013d8 <decodeRC5>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <my_decode+0x66>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e02a      	b.n	8001cac <my_decode+0xbc>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fc44 	bl	80014e4 <decodeRC6>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <my_decode+0x76>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e022      	b.n	8001cac <my_decode+0xbc>
	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff f9e4 	bl	8001034 <decodeLG>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <my_decode+0x86>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e01a      	b.n	8001cac <my_decode+0xbc>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff f908 	bl	8000e8c <decodeJVC>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <my_decode+0x96>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e012      	b.n	8001cac <my_decode+0xbc>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fd2a 	bl	80016e0 <decodeSAMSUNG>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <my_decode+0xa6>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00a      	b.n	8001cac <my_decode+0xbc>

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
	#endif

	if(decodeHash(results)) return true;
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8ae 	bl	8001df8 <decodeHash>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <my_decode+0xb6>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e002      	b.n	8001cac <my_decode+0xbc>
	my_resume();
 8001ca6:	f000 f857 	bl	8001d58 <my_resume>
	return false;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200000e4 	.word	0x200000e4
 8001cb8:	200000e0 	.word	0x200000e0

08001cbc <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
	DWT_Init();
 8001cc2:	f000 f8e9 	bl	8001e98 <DWT_Init>

	HAL_TIM_Base_DeInit(&htim4);
 8001cc6:	4821      	ldr	r0, [pc, #132]	; (8001d4c <my_enableIRIn+0x90>)
 8001cc8:	f001 febb 	bl	8003a42 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]

	htim4.Instance = TIM4;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <my_enableIRIn+0x90>)
 8001ce4:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <my_enableIRIn+0x94>)
 8001ce6:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = MYPRESCALER;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <my_enableIRIn+0x90>)
 8001cea:	2247      	movs	r2, #71	; 0x47
 8001cec:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <my_enableIRIn+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = MYPERIOD;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <my_enableIRIn+0x90>)
 8001cf6:	2209      	movs	r2, #9
 8001cf8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <my_enableIRIn+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <my_enableIRIn+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <my_enableIRIn+0x90>)
 8001d08:	f001 fe70 	bl	80039ec <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <my_enableIRIn+0x90>)
 8001d1a:	f002 f967 	bl	8003fec <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001d26:	463b      	mov	r3, r7
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <my_enableIRIn+0x90>)
 8001d2c:	f002 fd18 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <my_enableIRIn+0x98>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <my_enableIRIn+0x98>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&htim4);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <my_enableIRIn+0x90>)
 8001d3e:	f001 feb0 	bl	8003aa2 <HAL_TIM_Base_Start_IT>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200002fc 	.word	0x200002fc
 8001d50:	40000800 	.word	0x40000800
 8001d54:	200000e0 	.word	0x200000e0

08001d58 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <my_resume+0x1c>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <my_resume+0x1c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	705a      	strb	r2, [r3, #1]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200000e0 	.word	0x200000e0

08001d78 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 8001d82:	6838      	ldr	r0, [r7, #0]
 8001d84:	f7fe fbc6 	bl	8000514 <__aeabi_ui2d>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fbc1 	bl	8000514 <__aeabi_ui2d>
 8001d92:	a317      	add	r3, pc, #92	; (adr r3, 8001df0 <compare+0x78>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc36 	bl	8000608 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fea2 	bl	8000aec <__aeabi_dcmplt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <compare+0x3a>
 8001dae:	2300      	movs	r3, #0
 8001db0:	e018      	b.n	8001de4 <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbae 	bl	8000514 <__aeabi_ui2d>
 8001db8:	4604      	mov	r4, r0
 8001dba:	460d      	mov	r5, r1
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f7fe fba9 	bl	8000514 <__aeabi_ui2d>
 8001dc2:	a30b      	add	r3, pc, #44	; (adr r3, 8001df0 <compare+0x78>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fc1e 	bl	8000608 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f7fe fe8a 	bl	8000aec <__aeabi_dcmplt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <compare+0x6a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e000      	b.n	8001de4 <compare+0x6c>
	else return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fe99999 	.word	0x3fe99999

08001df8 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <decodeHash+0x98>)
 8001e02:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	dc01      	bgt.n	8001e12 <decodeHash+0x1a>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e039      	b.n	8001e86 <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001e12:	2301      	movs	r3, #1
 8001e14:	817b      	strh	r3, [r7, #10]
 8001e16:	e024      	b.n	8001e62 <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e32:	3302      	adds	r3, #2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7ff ff9b 	bl	8001d78 <compare>
 8001e42:	4603      	mov	r3, r0
 8001e44:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <decodeHash+0x9c>)
 8001e4a:	fb02 f203 	mul.w	r2, r2, r3
 8001e4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e52:	4053      	eors	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8001e56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	817b      	strh	r3, [r7, #10]
 8001e62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e66:	3302      	adds	r3, #2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	dbd2      	blt.n	8001e18 <decodeHash+0x20>
	}

	results->value = hash;
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
	return true;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	811c9dc5 	.word	0x811c9dc5
 8001e94:	01000193 	.word	0x01000193

08001e98 <DWT_Init>:
#include <IR_Remote.h>

void DWT_Init()
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <DWT_Init+0x2c>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <DWT_Init+0x2c>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <DWT_Init+0x30>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <DWT_Init+0x30>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <DWT_Init+0x30>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000edf0 	.word	0xe000edf0
 8001ec8:	e0001000 	.word	0xe0001000

08001ecc <sendRaw>:
/////////////////////////////////////////////////////////////////////////////////


void sendRaw(uint16_t buf[], unsigned int len, uint8_t hz)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	71fb      	strb	r3, [r7, #7]
	enableIROut(hz);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f865 	bl	8001fac <enableIROut>
	int skipFirst = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
	if (buf[0] > 10000) {
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <sendRaw+0x2a>
		skipFirst = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
	}

	for(uint16_t i = skipFirst; i < len; i++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	827b      	strh	r3, [r7, #18]
 8001efa:	e023      	b.n	8001f44 <sendRaw+0x78>
	{
		if(i % 2 != skipFirst) space(buf[i]*USECPERTICK);
 8001efc:	8a7b      	ldrh	r3, [r7, #18]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d00d      	beq.n	8001f24 <sendRaw+0x58>
 8001f08:	8a7b      	ldrh	r3, [r7, #18]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f831 	bl	8001f84 <space>
 8001f22:	e00c      	b.n	8001f3e <sendRaw+0x72>
		else mark(buf[i]*USECPERTICK);
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f80f 	bl	8001f5c <mark>
	for(uint16_t i = skipFirst; i < len; i++)
 8001f3e:	8a7b      	ldrh	r3, [r7, #18]
 8001f40:	3301      	adds	r3, #1
 8001f42:	827b      	strh	r3, [r7, #18]
 8001f44:	8a7b      	ldrh	r3, [r7, #18]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8d7      	bhi.n	8001efc <sendRaw+0x30>
	}

	space(0);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 f819 	bl	8001f84 <space>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <mark>:

void mark(unsigned int time)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f64:	2100      	movs	r1, #0
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <mark+0x24>)
 8001f68:	f001 fdf4 	bl	8003b54 <HAL_TIM_PWM_Start>
	if (time > 0) custom_delay_usec(time);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <mark+0x1c>
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f896 	bl	80020a4 <custom_delay_usec>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200002fc 	.word	0x200002fc

08001f84 <space>:

void space(unsigned int time)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <space+0x24>)
 8001f90:	f001 fe12 	bl	8003bb8 <HAL_TIM_PWM_Stop>
	if(time > 0) custom_delay_usec(time);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <space+0x1c>
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f882 	bl	80020a4 <custom_delay_usec>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002fc 	.word	0x200002fc

08001fac <enableIROut>:

void enableIROut(uint8_t khz)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	; 0x40
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	uint16_t pwm_freq = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t pwm_pulse = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	pwm_freq = MYSYSCLOCK / (khz * 1000) - 1;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	4a32      	ldr	r2, [pc, #200]	; (8002094 <enableIROut+0xe8>)
 8001fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
	pwm_pulse = pwm_freq / 3;
 8001fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fd6:	4a30      	ldr	r2, [pc, #192]	; (8002098 <enableIROut+0xec>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	87bb      	strh	r3, [r7, #60]	; 0x3c

	HAL_TIM_Base_DeInit(&htim4);
 8001fe0:	482e      	ldr	r0, [pc, #184]	; (800209c <enableIROut+0xf0>)
 8001fe2:	f001 fd2e 	bl	8003a42 <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	615a      	str	r2, [r3, #20]
 8002010:	619a      	str	r2, [r3, #24]

	htim4.Instance = TIM4;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <enableIROut+0xf0>)
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <enableIROut+0xf4>)
 8002016:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <enableIROut+0xf0>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <enableIROut+0xf0>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = pwm_freq;
 8002024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <enableIROut+0xf0>)
 8002028:	60d3      	str	r3, [r2, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <enableIROut+0xf0>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <enableIROut+0xf0>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <enableIROut+0xf0>)
 8002038:	f001 fcd8 	bl	80039ec <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	4814      	ldr	r0, [pc, #80]	; (800209c <enableIROut+0xf0>)
 800204a:	f001 ffcf 	bl	8003fec <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim4);
 800204e:	4813      	ldr	r0, [pc, #76]	; (800209c <enableIROut+0xf0>)
 8002050:	f001 fd4b 	bl	8003aea <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <enableIROut+0xf0>)
 8002064:	f002 fb7c 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = pwm_pulse;
 800206c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800206e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	2200      	movs	r2, #0
 800207e:	4619      	mov	r1, r3
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <enableIROut+0xf0>)
 8002082:	f001 feed 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <enableIROut+0xf0>)
 8002088:	f000 fb6a 	bl	8002760 <HAL_TIM_MspPostInit>
}
 800208c:	bf00      	nop
 800208e:	3740      	adds	r7, #64	; 0x40
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	044aa200 	.word	0x044aa200
 8002098:	aaaaaaab 	.word	0xaaaaaaab
 800209c:	200002fc 	.word	0x200002fc
 80020a0:	40000800 	.word	0x40000800

080020a4 <custom_delay_usec>:

void custom_delay_usec(unsigned long us)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (HAL_RCC_GetSysClockFreq() / 1000000);
 80020ac:	f001 fb92 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <custom_delay_usec+0x38>)
 80020b4:	fba3 2302 	umull	r2, r3, r3, r2
 80020b8:	0c9a      	lsrs	r2, r3, #18
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <custom_delay_usec+0x3c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 80020c8:	bf00      	nop
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <custom_delay_usec+0x3c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8fa      	bhi.n	80020ca <custom_delay_usec+0x26>
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	e0001000 	.word	0xe0001000

080020e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80020ea:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint8_t count = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f2:	f000 fc75 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f6:	f000 f963 	bl	80023c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020fa:	f000 fa69 	bl	80025d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020fe:	f000 fa3d 	bl	800257c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002102:	f000 f9c5 	bl	8002490 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char trans_str[STR_LEN] = {0,};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4618      	mov	r0, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	461a      	mov	r2, r3
 8002110:	2100      	movs	r1, #0
 8002112:	f003 f898 	bl	8005246 <memset>
  my_enableIRIn();
 8002116:	f7ff fdd1 	bl	8001cbc <my_enableIRIn>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	static char *decode_str[] = {"UNUSED", "UNKNOWN", "RC5", "RC6", "NEC", "SONY", "PANASONIC", "JVC", "SAMSUNG", "WHYNTER", "AIWA_RC_T501", "LG", "SANYO", "MITSUBISHI", "DISH", "SHARP", "DENON", "PRONTO"};
	uint16_t * rawData = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	uint32_t value = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	int valBits = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	int usec_period = USECPERTICK;
 800212c:	230a      	movs	r3, #10
 800212e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
	unsigned int rawLen = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	int protocol=0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		int len=0;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
		pwm = HAL_TIM_PWM_GetState(&htim4);
 8002144:	4895      	ldr	r0, [pc, #596]	; (800239c <main+0x2b8>)
 8002146:	f002 f830 	bl	80041aa <HAL_TIM_PWM_GetState>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b94      	ldr	r3, [pc, #592]	; (80023a0 <main+0x2bc>)
 8002150:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET && rawLen > 0) {
 8002152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002156:	4893      	ldr	r0, [pc, #588]	; (80023a4 <main+0x2c0>)
 8002158:	f000 ff9a 	bl	8003090 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d12d      	bne.n	80021be <main+0xda>
 8002162:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d029      	beq.n	80021be <main+0xda>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800216a:	2120      	movs	r1, #32
 800216c:	488e      	ldr	r0, [pc, #568]	; (80023a8 <main+0x2c4>)
 800216e:	f000 ffc0 	bl	80030f2 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8002172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002176:	f000 fca5 	bl	8002ac4 <HAL_Delay>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800217a:	2120      	movs	r1, #32
 800217c:	488a      	ldr	r0, [pc, #552]	; (80023a8 <main+0x2c4>)
 800217e:	f000 ffb8 	bl	80030f2 <HAL_GPIO_TogglePin>

			if (protocol == 7){
 8002182:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002186:	2b07      	cmp	r3, #7
 8002188:	d106      	bne.n	8002198 <main+0xb4>
				sendSAMSUNG(value, valBits);
 800218a:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 800218e:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8002192:	f7ff fa66 	bl	8001662 <sendSAMSUNG>
 8002196:	e006      	b.n	80021a6 <main+0xc2>
			} else {
				sendRaw(rawData, rawLen, 38);
 8002198:	2226      	movs	r2, #38	; 0x26
 800219a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800219e:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80021a2:	f7ff fe93 	bl	8001ecc <sendRaw>
			}

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021a6:	2120      	movs	r1, #32
 80021a8:	487f      	ldr	r0, [pc, #508]	; (80023a8 <main+0x2c4>)
 80021aa:	f000 ffa2 	bl	80030f2 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80021ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b2:	f000 fc87 	bl	8002ac4 <HAL_Delay>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021b6:	2120      	movs	r1, #32
 80021b8:	487b      	ldr	r0, [pc, #492]	; (80023a8 <main+0x2c4>)
 80021ba:	f000 ff9a 	bl	80030f2 <HAL_GPIO_TogglePin>
		}

		if(my_decode(&results))
 80021be:	487b      	ldr	r0, [pc, #492]	; (80023ac <main+0x2c8>)
 80021c0:	f7ff fd16 	bl	8001bf0 <my_decode>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0b9      	beq.n	800213e <main+0x5a>
		{
			memset(trans_str, 0, STR_LEN);
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 f837 	bl	8005246 <memset>
			sprintf(trans_str, "Code: %lu | Type: %s | Bits: %d | RawLen: %d\r\n", results.value, decode_str[results.decode_type + 1], results.bits, results.rawlen);
 80021d8:	4b74      	ldr	r3, [pc, #464]	; (80023ac <main+0x2c8>)
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	4b73      	ldr	r3, [pc, #460]	; (80023ac <main+0x2c8>)
 80021de:	f993 3000 	ldrsb.w	r3, [r3]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <main+0x2cc>)
 80021e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ea:	4b70      	ldr	r3, [pc, #448]	; (80023ac <main+0x2c8>)
 80021ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021f0:	461c      	mov	r4, r3
 80021f2:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <main+0x2c8>)
 80021f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021f8:	1d38      	adds	r0, r7, #4
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	9400      	str	r4, [sp, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	460a      	mov	r2, r1
 8002202:	496c      	ldr	r1, [pc, #432]	; (80023b4 <main+0x2d0>)
 8002204:	f003 f8ee 	bl	80053e4 <siprintf>
			len = strlen(trans_str);
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f7fd ffe8 	bl	80001e0 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
			HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, len, 100);
 8002216:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800221a:	b29a      	uxth	r2, r3
 800221c:	1d39      	adds	r1, r7, #4
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	4865      	ldr	r0, [pc, #404]	; (80023b8 <main+0x2d4>)
 8002222:	f002 fb6c 	bl	80048fe <HAL_UART_Transmit>
			for (int i = 0; i < results.rawlen; i+=5) {
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 800222c:	e068      	b.n	8002300 <main+0x21c>
				memset(trans_str, 0, STR_LEN);
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f003 f805 	bl	8005246 <memset>
				sprintf(trans_str, "T[%d-%d]: %d %d %d %d %d\r\n", i, i+4, results.rawbuf[i]*usec_period, results.rawbuf[i+1]*usec_period, results.rawbuf[i+2]*usec_period, results.rawbuf[i+3]*usec_period, results.rawbuf[i+4]*usec_period);
 800223c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002240:	1d1e      	adds	r6, r3, #4
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <main+0x2c8>)
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002258:	fb03 f302 	mul.w	r3, r3, r2
 800225c:	4a53      	ldr	r2, [pc, #332]	; (80023ac <main+0x2c8>)
 800225e:	68d1      	ldr	r1, [r2, #12]
 8002260:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8002264:	3201      	adds	r2, #1
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	440a      	add	r2, r1
 800226a:	8812      	ldrh	r2, [r2, #0]
 800226c:	b292      	uxth	r2, r2
 800226e:	4611      	mov	r1, r2
 8002270:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002274:	fb02 f201 	mul.w	r2, r2, r1
 8002278:	494c      	ldr	r1, [pc, #304]	; (80023ac <main+0x2c8>)
 800227a:	68c8      	ldr	r0, [r1, #12]
 800227c:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	; 0x3f8
 8002280:	3102      	adds	r1, #2
 8002282:	0049      	lsls	r1, r1, #1
 8002284:	4401      	add	r1, r0
 8002286:	8809      	ldrh	r1, [r1, #0]
 8002288:	b289      	uxth	r1, r1
 800228a:	4608      	mov	r0, r1
 800228c:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8002290:	fb01 f100 	mul.w	r1, r1, r0
 8002294:	4845      	ldr	r0, [pc, #276]	; (80023ac <main+0x2c8>)
 8002296:	68c4      	ldr	r4, [r0, #12]
 8002298:	f8d7 03f8 	ldr.w	r0, [r7, #1016]	; 0x3f8
 800229c:	3003      	adds	r0, #3
 800229e:	0040      	lsls	r0, r0, #1
 80022a0:	4420      	add	r0, r4
 80022a2:	8800      	ldrh	r0, [r0, #0]
 80022a4:	b280      	uxth	r0, r0
 80022a6:	4604      	mov	r4, r0
 80022a8:	f8d7 03f0 	ldr.w	r0, [r7, #1008]	; 0x3f0
 80022ac:	fb00 f004 	mul.w	r0, r0, r4
 80022b0:	4c3e      	ldr	r4, [pc, #248]	; (80023ac <main+0x2c8>)
 80022b2:	68e5      	ldr	r5, [r4, #12]
 80022b4:	f8d7 43f8 	ldr.w	r4, [r7, #1016]	; 0x3f8
 80022b8:	3404      	adds	r4, #4
 80022ba:	0064      	lsls	r4, r4, #1
 80022bc:	442c      	add	r4, r5
 80022be:	8824      	ldrh	r4, [r4, #0]
 80022c0:	b2a4      	uxth	r4, r4
 80022c2:	4625      	mov	r5, r4
 80022c4:	f8d7 43f0 	ldr.w	r4, [r7, #1008]	; 0x3f0
 80022c8:	fb04 f405 	mul.w	r4, r4, r5
 80022cc:	1d3d      	adds	r5, r7, #4
 80022ce:	9404      	str	r4, [sp, #16]
 80022d0:	9003      	str	r0, [sp, #12]
 80022d2:	9102      	str	r1, [sp, #8]
 80022d4:	9201      	str	r2, [sp, #4]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4633      	mov	r3, r6
 80022da:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <main+0x2d8>)
 80022e0:	4628      	mov	r0, r5
 80022e2:	f003 f87f 	bl	80053e4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, len, 100);
 80022e6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	1d39      	adds	r1, r7, #4
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	4831      	ldr	r0, [pc, #196]	; (80023b8 <main+0x2d4>)
 80022f2:	f002 fb04 	bl	80048fe <HAL_UART_Transmit>
			for (int i = 0; i < results.rawlen; i+=5) {
 80022f6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80022fa:	3305      	adds	r3, #5
 80022fc:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <main+0x2c8>)
 8002302:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002306:	461a      	mov	r2, r3
 8002308:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 800230c:	4293      	cmp	r3, r2
 800230e:	db8e      	blt.n	800222e <main+0x14a>
			}

			if (rawData) {
 8002310:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <main+0x23c>
				free(rawData);
 8002318:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 800231c:	f002 ff80 	bl	8005220 <free>
			}
			rawData = (uint16_t *) calloc(results.rawlen, sizeof(uint16_t));
 8002320:	4b22      	ldr	r3, [pc, #136]	; (80023ac <main+0x2c8>)
 8002322:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002326:	2102      	movs	r1, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 ff47 	bl	80051bc <calloc>
 800232e:	4603      	mov	r3, r0
 8002330:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
			memcpy(rawData, results.rawbuf, sizeof(uint16_t) * results.rawlen);
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <main+0x2c8>)
 8002336:	68d9      	ldr	r1, [r3, #12]
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <main+0x2c8>)
 800233a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	461a      	mov	r2, r3
 8002342:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 8002346:	f002 ff73 	bl	8005230 <memcpy>
			rawLen = results.rawlen;
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <main+0x2c8>)
 800234c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002350:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
			value = results.value;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <main+0x2c8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
			protocol = results.decode_type;
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <main+0x2c8>)
 800235e:	f993 3000 	ldrsb.w	r3, [r3]
 8002362:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			valBits = results.bits;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <main+0x2c8>)
 8002368:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800236c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	2120      	movs	r1, #32
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <main+0x2c4>)
 8002376:	f000 fea3 	bl	80030c0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800237a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800237e:	f000 fba1 	bl	8002ac4 <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2120      	movs	r1, #32
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <main+0x2c4>)
 8002388:	f000 fe9a 	bl	80030c0 <HAL_GPIO_WritePin>

			HAL_Delay(300);
 800238c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002390:	f000 fb98 	bl	8002ac4 <HAL_Delay>
			my_resume(); // Resume receiving.
 8002394:	f7ff fce0 	bl	8001d58 <my_resume>
	{
 8002398:	e6d1      	b.n	800213e <main+0x5a>
 800239a:	bf00      	nop
 800239c:	200002fc 	.word	0x200002fc
 80023a0:	2000033c 	.word	0x2000033c
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020000 	.word	0x40020000
 80023ac:	200002e8 	.word	0x200002e8
 80023b0:	20000000 	.word	0x20000000
 80023b4:	08005a84 	.word	0x08005a84
 80023b8:	20000340 	.word	0x20000340
 80023bc:	08005ab4 	.word	0x08005ab4

080023c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b094      	sub	sp, #80	; 0x50
 80023c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	2230      	movs	r2, #48	; 0x30
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 ff39 	bl	8005246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <SystemClock_Config+0xc8>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <SystemClock_Config+0xc8>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <SystemClock_Config+0xc8>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <SystemClock_Config+0xcc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <SystemClock_Config+0xcc>)
 800240a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <SystemClock_Config+0xcc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800241c:	2302      	movs	r3, #2
 800241e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002424:	2310      	movs	r3, #16
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002430:	2308      	movs	r3, #8
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002434:	2348      	movs	r3, #72	; 0x48
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002438:	2302      	movs	r3, #2
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243c:	2304      	movs	r3, #4
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fe6f 	bl	8003128 <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002450:	f000 f92e 	bl	80026b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	230f      	movs	r3, #15
 8002456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002458:	2302      	movs	r3, #2
 800245a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f8c9 	bl	8003608 <HAL_RCC_ClockConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800247c:	f000 f918 	bl	80026b0 <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000

08002490 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0320 	add.w	r3, r7, #32
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024c0:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024c2:	4a2d      	ldr	r2, [pc, #180]	; (8002578 <MX_TIM4_Init+0xe8>)
 80024c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80024c6:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024c8:	2247      	movs	r2, #71	; 0x47
 80024ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80024d2:	4b28      	ldr	r3, [pc, #160]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024d4:	2209      	movs	r2, #9
 80024d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b25      	ldr	r3, [pc, #148]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024e4:	4823      	ldr	r0, [pc, #140]	; (8002574 <MX_TIM4_Init+0xe4>)
 80024e6:	f001 fa81 	bl	80039ec <HAL_TIM_Base_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80024f0:	f000 f8de 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fe:	4619      	mov	r1, r3
 8002500:	481c      	ldr	r0, [pc, #112]	; (8002574 <MX_TIM4_Init+0xe4>)
 8002502:	f001 fd73 	bl	8003fec <HAL_TIM_ConfigClockSource>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800250c:	f000 f8d0 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002510:	4818      	ldr	r0, [pc, #96]	; (8002574 <MX_TIM4_Init+0xe4>)
 8002512:	f001 faea 	bl	8003aea <HAL_TIM_PWM_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800251c:	f000 f8c8 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	4619      	mov	r1, r3
 800252e:	4811      	ldr	r0, [pc, #68]	; (8002574 <MX_TIM4_Init+0xe4>)
 8002530:	f002 f916 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800253a:	f000 f8b9 	bl	80026b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253e:	2360      	movs	r3, #96	; 0x60
 8002540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	4619      	mov	r1, r3
 8002554:	4807      	ldr	r0, [pc, #28]	; (8002574 <MX_TIM4_Init+0xe4>)
 8002556:	f001 fc83 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002560:	f000 f8a6 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002564:	4803      	ldr	r0, [pc, #12]	; (8002574 <MX_TIM4_Init+0xe4>)
 8002566:	f000 f8fb 	bl	8002760 <HAL_TIM_MspPostInit>

}
 800256a:	bf00      	nop
 800256c:	3738      	adds	r7, #56	; 0x38
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200002fc 	.word	0x200002fc
 8002578:	40000800 	.word	0x40000800

0800257c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <MX_USART2_UART_Init+0x50>)
 8002584:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 8002588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800258c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 80025a2:	220c      	movs	r2, #12
 80025a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025b2:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_USART2_UART_Init+0x4c>)
 80025b4:	f002 f956 	bl	8004864 <HAL_UART_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025be:	f000 f877 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000340 	.word	0x20000340
 80025cc:	40004400 	.word	0x40004400

080025d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
 80025e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <MX_GPIO_Init+0xd0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <MX_GPIO_Init+0xd0>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <MX_GPIO_Init+0xd0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <MX_GPIO_Init+0xd0>)
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <MX_GPIO_Init+0xd0>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_GPIO_Init+0xd0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2120      	movs	r1, #32
 800265a:	4812      	ldr	r0, [pc, #72]	; (80026a4 <MX_GPIO_Init+0xd4>)
 800265c:	f000 fd30 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_GPIO_Init+0xd8>)
 8002668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_GPIO_Init+0xdc>)
 8002676:	f000 fb89 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800267a:	2320      	movs	r3, #32
 800267c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267e:	2301      	movs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <MX_GPIO_Init+0xd4>)
 8002692:	f000 fb7b 	bl	8002d8c <HAL_GPIO_Init>

}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	10210000 	.word	0x10210000
 80026ac:	40020800 	.word	0x40020800

080026b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026fe:	2007      	movs	r0, #7
 8002700:	f000 faf4 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_TIM_Base_MspInit+0x48>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d115      	bne.n	800274e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_TIM_Base_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	201e      	movs	r0, #30
 8002744:	f000 fadd 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002748:	201e      	movs	r0, #30
 800274a:	f000 faf6 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000800 	.word	0x40000800
 800275c:	40023800 	.word	0x40023800

08002760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_TIM_MspPostInit+0x68>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11d      	bne.n	80027be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_TIM_MspPostInit+0x6c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800279e:	2340      	movs	r3, #64	; 0x40
 80027a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	4619      	mov	r1, r3
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <HAL_TIM_MspPostInit+0x70>)
 80027ba:	f000 fae7 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40000800 	.word	0x40000800
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_TIM_Base_MspDeInit+0x2c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_TIM_Base_MspDeInit+0x30>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_TIM_Base_MspDeInit+0x30>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80027f2:	201e      	movs	r0, #30
 80027f4:	f000 faaf 	bl	8002d56 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40000800 	.word	0x40000800
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_UART_MspInit+0x84>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12b      	bne.n	8002882 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_UART_MspInit+0x88>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_UART_MspInit+0x88>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_UART_MspInit+0x88>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_UART_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_UART_MspInit+0x88>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_UART_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002862:	230c      	movs	r3, #12
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002872:	2307      	movs	r3, #7
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_UART_MspInit+0x8c>)
 800287e:	f000 fa85 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40004400 	.word	0x40004400
 8002890:	40023800 	.word	0x40023800
 8002894:	40020000 	.word	0x40020000

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler+0x4>

080028b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <UsageFault_Handler+0x4>

080028be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ec:	f000 f8ca 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM4_IRQHandler+0x10>)
 80028fa:	f001 f9a9 	bl	8003c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200002fc 	.word	0x200002fc

08002908 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x50>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <_sbrk+0x16>
		heap_end = &end;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <_sbrk+0x50>)
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <_sbrk+0x54>)
 800291c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <_sbrk+0x50>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <_sbrk+0x50>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	466a      	mov	r2, sp
 800292e:	4293      	cmp	r3, r2
 8002930:	d907      	bls.n	8002942 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002932:	f002 fc4b 	bl	80051cc <__errno>
 8002936:	4602      	mov	r2, r0
 8002938:	230c      	movs	r3, #12
 800293a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	e006      	b.n	8002950 <_sbrk+0x48>
	}

	heap_end += incr;
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <_sbrk+0x50>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	4a03      	ldr	r2, [pc, #12]	; (8002958 <_sbrk+0x50>)
 800294c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200000d4 	.word	0x200000d4
 800295c:	20000388 	.word	0x20000388

08002960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <SystemInit+0x28>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <SystemInit+0x28>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <SystemInit+0x28>)
 8002976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297a:	609a      	str	r2, [r3, #8]
#endif
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002992:	e003      	b.n	800299c <LoopCopyDataInit>

08002994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800299a:	3104      	adds	r1, #4

0800299c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029a4:	d3f6      	bcc.n	8002994 <CopyDataInit>
  ldr  r2, =_sbss
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029a8:	e002      	b.n	80029b0 <LoopFillZerobss>

080029aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029ac:	f842 3b04 	str.w	r3, [r2], #4

080029b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029b4:	d3f9      	bcc.n	80029aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029b6:	f7ff ffd3 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ba:	f002 fc0d 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7ff fb91 	bl	80020e4 <main>
  bx  lr    
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029c8:	08005bb8 	.word	0x08005bb8
  ldr  r0, =_sdata
 80029cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029d0:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80029d4:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80029d8:	20000388 	.word	0x20000388

080029dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_Init+0x40>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_Init+0x40>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_Init+0x40>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f96f 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f808 	bl	8002a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a14:	f7ff fe54 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x54>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x58>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f995 	bl	8002d72 <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00e      	b.n	8002a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d80a      	bhi.n	8002a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f000 f94f 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_InitTick+0x5c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000048 	.word	0x20000048
 8002a7c:	20000050 	.word	0x20000050
 8002a80:	2000004c 	.word	0x2000004c

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000050 	.word	0x20000050
 8002aa8:	20000380 	.word	0x20000380

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000380 	.word	0x20000380

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_Delay+0x40>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000050 	.word	0x20000050

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db10      	blt.n	8002bdc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4909      	ldr	r1, [pc, #36]	; (8002be8 <__NVIC_DisableIRQ+0x40>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	3320      	adds	r3, #32
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bd8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
         );
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff07 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff1c 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff8e 	bl	8002c40 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff0f 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff1f 	bl	8002ba8 <__NVIC_DisableIRQ>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff94 	bl	8002ca8 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e159      	b.n	800305c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da8:	2201      	movs	r2, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8148 	bne.w	8003056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d00b      	beq.n	8002de6 <HAL_GPIO_Init+0x5a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dda:	2b11      	cmp	r3, #17
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b12      	cmp	r3, #18
 8002de4:	d130      	bne.n	8002e48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0201 	and.w	r2, r3, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0xfc>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	d123      	bne.n	8002ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a2 	beq.w	8003056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_GPIO_Init+0x2e4>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a55      	ldr	r2, [pc, #340]	; (8003070 <HAL_GPIO_Init+0x2e4>)
 8002f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_GPIO_Init+0x2e4>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2e:	4a51      	ldr	r2, [pc, #324]	; (8003074 <HAL_GPIO_Init+0x2e8>)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3302      	adds	r3, #2
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a48      	ldr	r2, [pc, #288]	; (8003078 <HAL_GPIO_Init+0x2ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x202>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x1fe>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a46      	ldr	r2, [pc, #280]	; (8003080 <HAL_GPIO_Init+0x2f4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x1fa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a45      	ldr	r2, [pc, #276]	; (8003084 <HAL_GPIO_Init+0x2f8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x1f6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a44      	ldr	r2, [pc, #272]	; (8003088 <HAL_GPIO_Init+0x2fc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x1f2>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f7e:	2307      	movs	r3, #7
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x204>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa0:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_GPIO_Init+0x2e8>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_GPIO_Init+0x300>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd2:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_GPIO_Init+0x300>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_GPIO_Init+0x300>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_GPIO_Init+0x300>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_GPIO_Init+0x300>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_GPIO_Init+0x300>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_GPIO_Init+0x300>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_GPIO_Init+0x300>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	f67f aea2 	bls.w	8002da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003064:	bf00      	nop
 8003066:	3724      	adds	r7, #36	; 0x24
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	887b      	ldrh	r3, [r7, #2]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	e001      	b.n	80030b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	619a      	str	r2, [r3, #24]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	401a      	ands	r2, r3
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	429a      	cmp	r2, r3
 800310a:	d104      	bne.n	8003116 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	041a      	lsls	r2, r3, #16
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003114:	e002      	b.n	800311c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e25b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	4ba3      	ldr	r3, [pc, #652]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e236      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a90      	ldr	r2, [pc, #576]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a8a      	ldr	r2, [pc, #552]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff fc64 	bl	8002aac <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7ff fc60 	bl	8002aac <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1fb      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xc0>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7ff fc50 	bl	8002aac <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff fc4c 	bl	8002aac <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1e7      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0xe8>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1bb      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4952      	ldr	r1, [pc, #328]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7ff fc05 	bl	8002aac <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7ff fc01 	bl	8002aac <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e19c      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4940      	ldr	r1, [pc, #256]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff fbe4 	bl	8002aac <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7ff fbe0 	bl	8002aac <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e17b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d030      	beq.n	8003374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff fbc4 	bl	8002aac <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7ff fbc0 	bl	8002aac <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e15b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x200>
 8003346:	e015      	b.n	8003374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff fbad 	bl	8002aac <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7ff fba9 	bl	8002aac <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e144      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a0 	beq.w	80034c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d121      	bne.n	8003402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7ff fb6f 	bl	8002aac <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e011      	b.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470000 	.word	0x42470000
 80033dc:	42470e80 	.word	0x42470e80
 80033e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7ff fb62 	bl	8002aac <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0fd      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x2f0>
 800340a:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a7c      	ldr	r2, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x312>
 8003420:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a76      	ldr	r2, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 800343a:	4b71      	ldr	r3, [pc, #452]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a70      	ldr	r2, [pc, #448]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a6d      	ldr	r2, [pc, #436]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7ff fb27 	bl	8002aac <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7ff fb23 	bl	8002aac <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0bc      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x33a>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7ff fb11 	bl	8002aac <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7ff fb0d 	bl	8002aac <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0a6      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b52      	ldr	r3, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a51      	ldr	r2, [pc, #324]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8092 	beq.w	80035f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d05c      	beq.n	8003592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d141      	bne.n	8003564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7ff fae1 	bl	8002aac <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7ff fadd 	bl	8002aac <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e078      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003500:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	4933      	ldr	r1, [pc, #204]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7ff fab6 	bl	8002aac <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7ff fab2 	bl	8002aac <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04d      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x41c>
 8003562:	e045      	b.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7ff fa9f 	bl	8002aac <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7ff fa9b 	bl	8002aac <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e036      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x44a>
 8003590:	e02e      	b.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e029      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d115      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000
 8003600:	40023800 	.word	0x40023800
 8003604:	42470060 	.word	0x42470060

08003608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cc      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d90c      	bls.n	8003644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	494d      	ldr	r1, [pc, #308]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d044      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e067      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7ff f9d8 	bl	8002aac <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7ff f9d4 	bl	8002aac <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e04f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d20c      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e032      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4916      	ldr	r1, [pc, #88]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378e:	f000 f821 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003792:	4601      	mov	r1, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	fa21 f303 	lsr.w	r3, r1, r3
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff f938 	bl	8002a24 <HAL_InitTick>

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023c00 	.word	0x40023c00
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08005b5c 	.word	0x08005b5c
 80037cc:	20000048 	.word	0x20000048
 80037d0:	2000004c 	.word	0x2000004c

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d007      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x32>
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d008      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x38>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80b4 	bne.w	8003968 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003802:	60bb      	str	r3, [r7, #8]
       break;
 8003804:	e0b3      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003806:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003808:	60bb      	str	r3, [r7, #8]
      break;
 800380a:	e0b0      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800380c:	4b5a      	ldr	r3, [pc, #360]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04a      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	f04f 0400 	mov.w	r4, #0
 800382c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	ea03 0501 	and.w	r5, r3, r1
 8003838:	ea04 0602 	and.w	r6, r4, r2
 800383c:	4629      	mov	r1, r5
 800383e:	4632      	mov	r2, r6
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	0154      	lsls	r4, r2, #5
 800384a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800384e:	014b      	lsls	r3, r1, #5
 8003850:	4619      	mov	r1, r3
 8003852:	4622      	mov	r2, r4
 8003854:	1b49      	subs	r1, r1, r5
 8003856:	eb62 0206 	sbc.w	r2, r2, r6
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0194      	lsls	r4, r2, #6
 8003864:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003868:	018b      	lsls	r3, r1, #6
 800386a:	1a5b      	subs	r3, r3, r1
 800386c:	eb64 0402 	sbc.w	r4, r4, r2
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	00e2      	lsls	r2, r4, #3
 800387a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800387e:	00d9      	lsls	r1, r3, #3
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	195b      	adds	r3, r3, r5
 8003886:	eb44 0406 	adc.w	r4, r4, r6
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	0262      	lsls	r2, r4, #9
 8003894:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003898:	0259      	lsls	r1, r3, #9
 800389a:	460b      	mov	r3, r1
 800389c:	4614      	mov	r4, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	4621      	mov	r1, r4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	f7fd f96e 	bl	8000b8c <__aeabi_uldivmod>
 80038b0:	4603      	mov	r3, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e049      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	ea03 0501 	and.w	r5, r3, r1
 80038ce:	ea04 0602 	and.w	r6, r4, r2
 80038d2:	4629      	mov	r1, r5
 80038d4:	4632      	mov	r2, r6
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0154      	lsls	r4, r2, #5
 80038e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e4:	014b      	lsls	r3, r1, #5
 80038e6:	4619      	mov	r1, r3
 80038e8:	4622      	mov	r2, r4
 80038ea:	1b49      	subs	r1, r1, r5
 80038ec:	eb62 0206 	sbc.w	r2, r2, r6
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	0194      	lsls	r4, r2, #6
 80038fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	1a5b      	subs	r3, r3, r1
 8003902:	eb64 0402 	sbc.w	r4, r4, r2
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	00e2      	lsls	r2, r4, #3
 8003910:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003914:	00d9      	lsls	r1, r3, #3
 8003916:	460b      	mov	r3, r1
 8003918:	4614      	mov	r4, r2
 800391a:	195b      	adds	r3, r3, r5
 800391c:	eb44 0406 	adc.w	r4, r4, r6
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	02a2      	lsls	r2, r4, #10
 800392a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800392e:	0299      	lsls	r1, r3, #10
 8003930:	460b      	mov	r3, r1
 8003932:	4614      	mov	r4, r2
 8003934:	4618      	mov	r0, r3
 8003936:	4621      	mov	r1, r4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	461a      	mov	r2, r3
 8003940:	4623      	mov	r3, r4
 8003942:	f7fd f923 	bl	8000b8c <__aeabi_uldivmod>
 8003946:	4603      	mov	r3, r0
 8003948:	460c      	mov	r4, r1
 800394a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	60bb      	str	r3, [r7, #8]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800396a:	60bb      	str	r3, [r7, #8]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	68bb      	ldr	r3, [r7, #8]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000048 	.word	0x20000048

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4601      	mov	r1, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	08005b6c 	.word	0x08005b6c

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4601      	mov	r1, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	08005b6c 	.word	0x08005b6c

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fe7c 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fbcc 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_TIM_Base_DeInit+0x40>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	f240 4344 	movw	r3, #1092	; 0x444
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <HAL_TIM_Base_DeInit+0x40>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fe fea6 	bl	80027d4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0201 	orr.w	r2, r2, #1
 8003ab8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d007      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e01d      	b.n	8003b38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f815 	bl	8003b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f000 fb4d 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2201      	movs	r2, #1
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fdd4 	bl	8004714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_TIM_PWM_Start+0x60>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d107      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d007      	beq.n	8003ba8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fda2 	bl	8004714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_TIM_PWM_Stop+0x94>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d117      	bne.n	8003c0a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_TIM_PWM_Stop+0x52>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	f240 4344 	movw	r3, #1092	; 0x444
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_PWM_Stop+0x52>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_TIM_PWM_Stop+0x82>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	f240 4344 	movw	r3, #1092	; 0x444
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_PWM_Stop+0x82>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40010000 	.word	0x40010000

08003c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0202 	mvn.w	r2, #2
 8003c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa6b 	bl	800416e <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa5d 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa6e 	bl	8004182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0204 	mvn.w	r2, #4
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa41 	bl	800416e <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa33 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa44 	bl	8004182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0208 	mvn.w	r2, #8
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa17 	bl	800416e <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa09 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fa1a 	bl	8004182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0210 	mvn.w	r2, #16
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9ed 	bl	800416e <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9df 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f9f0 	bl	8004182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0201 	mvn.w	r2, #1
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fde8 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fd28 	bl	8004850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9b5 	bl	8004196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d10e      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d107      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0220 	mvn.w	r2, #32
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fcf2 	bl	800483c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0b4      	b.n	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	f200 809f 	bhi.w	8003fd0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003fd1 	.word	0x08003fd1
 8003ea0:	08003fd1 	.word	0x08003fd1
 8003ea4:	08003fd1 	.word	0x08003fd1
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003fd1 	.word	0x08003fd1
 8003eb0:	08003fd1 	.word	0x08003fd1
 8003eb4:	08003fd1 	.word	0x08003fd1
 8003eb8:	08003f4f 	.word	0x08003f4f
 8003ebc:	08003fd1 	.word	0x08003fd1
 8003ec0:	08003fd1 	.word	0x08003fd1
 8003ec4:	08003fd1 	.word	0x08003fd1
 8003ec8:	08003f8f 	.word	0x08003f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f9f8 	bl	80042c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	619a      	str	r2, [r3, #24]
      break;
 8003f0a:	e062      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa3e 	bl	8004394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
      break;
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa89 	bl	800446c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0208 	orr.w	r2, r2, #8
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e021      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fad3 	bl	8004540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	61da      	str	r2, [r3, #28]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003fd0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_ConfigClockSource+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e0a6      	b.n	8004152 <HAL_TIM_ConfigClockSource+0x166>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d067      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x120>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d80b      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x6c>
 8004040:	2b10      	cmp	r3, #16
 8004042:	d073      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x140>
 8004044:	2b10      	cmp	r3, #16
 8004046:	d802      	bhi.n	800404e <HAL_TIM_ConfigClockSource+0x62>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d06f      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800404c:	e078      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800404e:	2b20      	cmp	r3, #32
 8004050:	d06c      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x140>
 8004052:	2b30      	cmp	r3, #48	; 0x30
 8004054:	d06a      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004056:	e073      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d00d      	beq.n	8004078 <HAL_TIM_ConfigClockSource+0x8c>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d804      	bhi.n	800406a <HAL_TIM_ConfigClockSource+0x7e>
 8004060:	2b50      	cmp	r3, #80	; 0x50
 8004062:	d033      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0xe0>
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d041      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004068:	e06a      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d066      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x152>
 8004070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004074:	d017      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004076:	e063      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f000 fb24 	bl	80046d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800409a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	609a      	str	r2, [r3, #8]
      break;
 80040a4:	e04c      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f000 fb0d 	bl	80046d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c8:	609a      	str	r2, [r3, #8]
      break;
 80040ca:	e039      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	461a      	mov	r2, r3
 80040da:	f000 fa81 	bl	80045e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2150      	movs	r1, #80	; 0x50
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fada 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 80040ea:	e029      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f000 faa0 	bl	800463e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2160      	movs	r1, #96	; 0x60
 8004104:	4618      	mov	r0, r3
 8004106:	f000 faca 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 800410a:	e019      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	461a      	mov	r2, r3
 800411a:	f000 fa61 	bl	80045e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2140      	movs	r1, #64	; 0x40
 8004124:	4618      	mov	r0, r3
 8004126:	f000 faba 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 800412a:	e009      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fab1 	bl	800469e <TIM_ITRx_SetConfig>
      break;
 800413c:	e000      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800413e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  return htim->State;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <TIM_Base_SetConfig+0xe4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00f      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d00b      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a31      	ldr	r2, [pc, #196]	; (80042b0 <TIM_Base_SetConfig+0xe8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d007      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a30      	ldr	r2, [pc, #192]	; (80042b4 <TIM_Base_SetConfig+0xec>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <TIM_Base_SetConfig+0xf0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d108      	bne.n	8004212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a25      	ldr	r2, [pc, #148]	; (80042ac <TIM_Base_SetConfig+0xe4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01b      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d017      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <TIM_Base_SetConfig+0xe8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <TIM_Base_SetConfig+0xec>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_Base_SetConfig+0xf0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <TIM_Base_SetConfig+0xf4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <TIM_Base_SetConfig+0xf8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x8a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <TIM_Base_SetConfig+0xfc>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <TIM_Base_SetConfig+0xe4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d103      	bne.n	8004298 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	615a      	str	r2, [r3, #20]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <TIM_OC1_SetConfig+0xc8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10c      	bne.n	800433e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0308 	bic.w	r3, r3, #8
 800432a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <TIM_OC1_SetConfig+0xc8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000

08004394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <TIM_OC2_SetConfig+0xd4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10d      	bne.n	8004410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_OC2_SetConfig+0xd4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d113      	bne.n	8004440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40010000 	.word	0x40010000

0800446c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <TIM_OC3_SetConfig+0xd0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d10d      	bne.n	80044e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <TIM_OC3_SetConfig+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d113      	bne.n	8004516 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	621a      	str	r2, [r3, #32]
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000

08004540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	031b      	lsls	r3, r3, #12
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <TIM_OC4_SetConfig+0x9c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000

080045e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0201 	bic.w	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 030a 	bic.w	r3, r3, #10
 800461c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463e:	b480      	push	{r7}
 8004640:	b087      	sub	sp, #28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f043 0307 	orr.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021a      	lsls	r2, r3, #8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2201      	movs	r2, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	431a      	orrs	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e050      	b.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d013      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a13      	ldr	r2, [pc, #76]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10c      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40014000 	.word	0x40014000

0800483c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e03f      	b.n	80048f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd ffbc 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	; 0x24
 8004894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f90b 	bl	8004ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b088      	sub	sp, #32
 8004902:	af02      	add	r7, sp, #8
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	f040 8083 	bne.w	8004a26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_UART_Transmit+0x2e>
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e07b      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Transmit+0x40>
 800493a:	2302      	movs	r3, #2
 800493c:	e074      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	; 0x21
 8004950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004954:	f7fe f8aa 	bl	8002aac <HAL_GetTick>
 8004958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800496e:	e042      	b.n	80049f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d122      	bne.n	80049ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f84c 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e042      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3302      	adds	r3, #2
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	e017      	b.n	80049f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	e013      	b.n	80049f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f829 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e01f      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	60ba      	str	r2, [r7, #8]
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1b7      	bne.n	8004970 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f810 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a40:	e02c      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d028      	beq.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a50:	f7fe f82c 	bl	8002aac <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d21d      	bcs.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e00f      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d0c3      	beq.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b06:	f023 030c 	bic.w	r3, r3, #12
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	f040 818b 	bne.w	8004e4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4ac1      	ldr	r2, [pc, #772]	; (8004e40 <UART_SetConfig+0x37c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d005      	beq.n	8004b4c <UART_SetConfig+0x88>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4abf      	ldr	r2, [pc, #764]	; (8004e44 <UART_SetConfig+0x380>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	f040 80bd 	bne.w	8004cc6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe ff3a 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004b50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	461d      	mov	r5, r3
 8004b56:	f04f 0600 	mov.w	r6, #0
 8004b5a:	46a8      	mov	r8, r5
 8004b5c:	46b1      	mov	r9, r6
 8004b5e:	eb18 0308 	adds.w	r3, r8, r8
 8004b62:	eb49 0409 	adc.w	r4, r9, r9
 8004b66:	4698      	mov	r8, r3
 8004b68:	46a1      	mov	r9, r4
 8004b6a:	eb18 0805 	adds.w	r8, r8, r5
 8004b6e:	eb49 0906 	adc.w	r9, r9, r6
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b86:	4688      	mov	r8, r1
 8004b88:	4691      	mov	r9, r2
 8004b8a:	eb18 0005 	adds.w	r0, r8, r5
 8004b8e:	eb49 0106 	adc.w	r1, r9, r6
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	461d      	mov	r5, r3
 8004b98:	f04f 0600 	mov.w	r6, #0
 8004b9c:	196b      	adds	r3, r5, r5
 8004b9e:	eb46 0406 	adc.w	r4, r6, r6
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	f7fb fff1 	bl	8000b8c <__aeabi_uldivmod>
 8004baa:	4603      	mov	r3, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4ba5      	ldr	r3, [pc, #660]	; (8004e48 <UART_SetConfig+0x384>)
 8004bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	f04f 0600 	mov.w	r6, #0
 8004bc4:	46a9      	mov	r9, r5
 8004bc6:	46b2      	mov	sl, r6
 8004bc8:	eb19 0309 	adds.w	r3, r9, r9
 8004bcc:	eb4a 040a 	adc.w	r4, sl, sl
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	46a2      	mov	sl, r4
 8004bd4:	eb19 0905 	adds.w	r9, r9, r5
 8004bd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bf0:	4689      	mov	r9, r1
 8004bf2:	4692      	mov	sl, r2
 8004bf4:	eb19 0005 	adds.w	r0, r9, r5
 8004bf8:	eb4a 0106 	adc.w	r1, sl, r6
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	461d      	mov	r5, r3
 8004c02:	f04f 0600 	mov.w	r6, #0
 8004c06:	196b      	adds	r3, r5, r5
 8004c08:	eb46 0406 	adc.w	r4, r6, r6
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4623      	mov	r3, r4
 8004c10:	f7fb ffbc 	bl	8000b8c <__aeabi_uldivmod>
 8004c14:	4603      	mov	r3, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b8b      	ldr	r3, [pc, #556]	; (8004e48 <UART_SetConfig+0x384>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a86      	ldr	r2, [pc, #536]	; (8004e48 <UART_SetConfig+0x384>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c3c:	4498      	add	r8, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	461d      	mov	r5, r3
 8004c42:	f04f 0600 	mov.w	r6, #0
 8004c46:	46a9      	mov	r9, r5
 8004c48:	46b2      	mov	sl, r6
 8004c4a:	eb19 0309 	adds.w	r3, r9, r9
 8004c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8004c52:	4699      	mov	r9, r3
 8004c54:	46a2      	mov	sl, r4
 8004c56:	eb19 0905 	adds.w	r9, r9, r5
 8004c5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c72:	4689      	mov	r9, r1
 8004c74:	4692      	mov	sl, r2
 8004c76:	eb19 0005 	adds.w	r0, r9, r5
 8004c7a:	eb4a 0106 	adc.w	r1, sl, r6
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	461d      	mov	r5, r3
 8004c84:	f04f 0600 	mov.w	r6, #0
 8004c88:	196b      	adds	r3, r5, r5
 8004c8a:	eb46 0406 	adc.w	r4, r6, r6
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4623      	mov	r3, r4
 8004c92:	f7fb ff7b 	bl	8000b8c <__aeabi_uldivmod>
 8004c96:	4603      	mov	r3, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <UART_SetConfig+0x384>)
 8004c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2164      	movs	r1, #100	; 0x64
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a65      	ldr	r2, [pc, #404]	; (8004e48 <UART_SetConfig+0x384>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 0207 	and.w	r2, r3, #7
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4442      	add	r2, r8
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	e26f      	b.n	80051a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cc6:	f7fe fe69 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8004cca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	461d      	mov	r5, r3
 8004cd0:	f04f 0600 	mov.w	r6, #0
 8004cd4:	46a8      	mov	r8, r5
 8004cd6:	46b1      	mov	r9, r6
 8004cd8:	eb18 0308 	adds.w	r3, r8, r8
 8004cdc:	eb49 0409 	adc.w	r4, r9, r9
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	46a1      	mov	r9, r4
 8004ce4:	eb18 0805 	adds.w	r8, r8, r5
 8004ce8:	eb49 0906 	adc.w	r9, r9, r6
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cf8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cfc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d00:	4688      	mov	r8, r1
 8004d02:	4691      	mov	r9, r2
 8004d04:	eb18 0005 	adds.w	r0, r8, r5
 8004d08:	eb49 0106 	adc.w	r1, r9, r6
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	461d      	mov	r5, r3
 8004d12:	f04f 0600 	mov.w	r6, #0
 8004d16:	196b      	adds	r3, r5, r5
 8004d18:	eb46 0406 	adc.w	r4, r6, r6
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	f7fb ff34 	bl	8000b8c <__aeabi_uldivmod>
 8004d24:	4603      	mov	r3, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <UART_SetConfig+0x384>)
 8004d2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	461d      	mov	r5, r3
 8004d3a:	f04f 0600 	mov.w	r6, #0
 8004d3e:	46a9      	mov	r9, r5
 8004d40:	46b2      	mov	sl, r6
 8004d42:	eb19 0309 	adds.w	r3, r9, r9
 8004d46:	eb4a 040a 	adc.w	r4, sl, sl
 8004d4a:	4699      	mov	r9, r3
 8004d4c:	46a2      	mov	sl, r4
 8004d4e:	eb19 0905 	adds.w	r9, r9, r5
 8004d52:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d6a:	4689      	mov	r9, r1
 8004d6c:	4692      	mov	sl, r2
 8004d6e:	eb19 0005 	adds.w	r0, r9, r5
 8004d72:	eb4a 0106 	adc.w	r1, sl, r6
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	f04f 0600 	mov.w	r6, #0
 8004d80:	196b      	adds	r3, r5, r5
 8004d82:	eb46 0406 	adc.w	r4, r6, r6
 8004d86:	461a      	mov	r2, r3
 8004d88:	4623      	mov	r3, r4
 8004d8a:	f7fb feff 	bl	8000b8c <__aeabi_uldivmod>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	461a      	mov	r2, r3
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <UART_SetConfig+0x384>)
 8004d96:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2164      	movs	r1, #100	; 0x64
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	3332      	adds	r3, #50	; 0x32
 8004da8:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <UART_SetConfig+0x384>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004db6:	4498      	add	r8, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	461d      	mov	r5, r3
 8004dbc:	f04f 0600 	mov.w	r6, #0
 8004dc0:	46a9      	mov	r9, r5
 8004dc2:	46b2      	mov	sl, r6
 8004dc4:	eb19 0309 	adds.w	r3, r9, r9
 8004dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8004dcc:	4699      	mov	r9, r3
 8004dce:	46a2      	mov	sl, r4
 8004dd0:	eb19 0905 	adds.w	r9, r9, r5
 8004dd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dd8:	f04f 0100 	mov.w	r1, #0
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dec:	4689      	mov	r9, r1
 8004dee:	4692      	mov	sl, r2
 8004df0:	eb19 0005 	adds.w	r0, r9, r5
 8004df4:	eb4a 0106 	adc.w	r1, sl, r6
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	f04f 0600 	mov.w	r6, #0
 8004e02:	196b      	adds	r3, r5, r5
 8004e04:	eb46 0406 	adc.w	r4, r6, r6
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	f7fb febe 	bl	8000b8c <__aeabi_uldivmod>
 8004e10:	4603      	mov	r3, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <UART_SetConfig+0x384>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2164      	movs	r1, #100	; 0x64
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	3332      	adds	r3, #50	; 0x32
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <UART_SetConfig+0x384>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 0207 	and.w	r2, r3, #7
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4442      	add	r2, r8
 8004e3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e3e:	e1b2      	b.n	80051a6 <UART_SetConfig+0x6e2>
 8004e40:	40011000 	.word	0x40011000
 8004e44:	40011400 	.word	0x40011400
 8004e48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4ad7      	ldr	r2, [pc, #860]	; (80051b0 <UART_SetConfig+0x6ec>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d005      	beq.n	8004e62 <UART_SetConfig+0x39e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4ad6      	ldr	r2, [pc, #856]	; (80051b4 <UART_SetConfig+0x6f0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	f040 80d1 	bne.w	8005004 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e62:	f7fe fdaf 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004e66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	469a      	mov	sl, r3
 8004e6c:	f04f 0b00 	mov.w	fp, #0
 8004e70:	46d0      	mov	r8, sl
 8004e72:	46d9      	mov	r9, fp
 8004e74:	eb18 0308 	adds.w	r3, r8, r8
 8004e78:	eb49 0409 	adc.w	r4, r9, r9
 8004e7c:	4698      	mov	r8, r3
 8004e7e:	46a1      	mov	r9, r4
 8004e80:	eb18 080a 	adds.w	r8, r8, sl
 8004e84:	eb49 090b 	adc.w	r9, r9, fp
 8004e88:	f04f 0100 	mov.w	r1, #0
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e9c:	4688      	mov	r8, r1
 8004e9e:	4691      	mov	r9, r2
 8004ea0:	eb1a 0508 	adds.w	r5, sl, r8
 8004ea4:	eb4b 0609 	adc.w	r6, fp, r9
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4619      	mov	r1, r3
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	0094      	lsls	r4, r2, #2
 8004ebc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ec0:	008b      	lsls	r3, r1, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	4631      	mov	r1, r6
 8004eca:	f7fb fe5f 	bl	8000b8c <__aeabi_uldivmod>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4bb8      	ldr	r3, [pc, #736]	; (80051b8 <UART_SetConfig+0x6f4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	469b      	mov	fp, r3
 8004ee4:	f04f 0c00 	mov.w	ip, #0
 8004ee8:	46d9      	mov	r9, fp
 8004eea:	46e2      	mov	sl, ip
 8004eec:	eb19 0309 	adds.w	r3, r9, r9
 8004ef0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ef4:	4699      	mov	r9, r3
 8004ef6:	46a2      	mov	sl, r4
 8004ef8:	eb19 090b 	adds.w	r9, r9, fp
 8004efc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f14:	4689      	mov	r9, r1
 8004f16:	4692      	mov	sl, r2
 8004f18:	eb1b 0509 	adds.w	r5, fp, r9
 8004f1c:	eb4c 060a 	adc.w	r6, ip, sl
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4619      	mov	r1, r3
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	f04f 0400 	mov.w	r4, #0
 8004f32:	0094      	lsls	r4, r2, #2
 8004f34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	4628      	mov	r0, r5
 8004f40:	4631      	mov	r1, r6
 8004f42:	f7fb fe23 	bl	8000b8c <__aeabi_uldivmod>
 8004f46:	4603      	mov	r3, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b9a      	ldr	r3, [pc, #616]	; (80051b8 <UART_SetConfig+0x6f4>)
 8004f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2164      	movs	r1, #100	; 0x64
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	3332      	adds	r3, #50	; 0x32
 8004f60:	4a95      	ldr	r2, [pc, #596]	; (80051b8 <UART_SetConfig+0x6f4>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6c:	4498      	add	r8, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	469b      	mov	fp, r3
 8004f72:	f04f 0c00 	mov.w	ip, #0
 8004f76:	46d9      	mov	r9, fp
 8004f78:	46e2      	mov	sl, ip
 8004f7a:	eb19 0309 	adds.w	r3, r9, r9
 8004f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8004f82:	4699      	mov	r9, r3
 8004f84:	46a2      	mov	sl, r4
 8004f86:	eb19 090b 	adds.w	r9, r9, fp
 8004f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fa2:	4689      	mov	r9, r1
 8004fa4:	4692      	mov	sl, r2
 8004fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8004faa:	eb4c 060a 	adc.w	r6, ip, sl
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f04f 0400 	mov.w	r4, #0
 8004fc0:	0094      	lsls	r4, r2, #2
 8004fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fc6:	008b      	lsls	r3, r1, #2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4623      	mov	r3, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	4631      	mov	r1, r6
 8004fd0:	f7fb fddc 	bl	8000b8c <__aeabi_uldivmod>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b77      	ldr	r3, [pc, #476]	; (80051b8 <UART_SetConfig+0x6f4>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	3332      	adds	r3, #50	; 0x32
 8004fee:	4a72      	ldr	r2, [pc, #456]	; (80051b8 <UART_SetConfig+0x6f4>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	f003 020f 	and.w	r2, r3, #15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4442      	add	r2, r8
 8005000:	609a      	str	r2, [r3, #8]
 8005002:	e0d0      	b.n	80051a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fcca 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	469a      	mov	sl, r3
 800500e:	f04f 0b00 	mov.w	fp, #0
 8005012:	46d0      	mov	r8, sl
 8005014:	46d9      	mov	r9, fp
 8005016:	eb18 0308 	adds.w	r3, r8, r8
 800501a:	eb49 0409 	adc.w	r4, r9, r9
 800501e:	4698      	mov	r8, r3
 8005020:	46a1      	mov	r9, r4
 8005022:	eb18 080a 	adds.w	r8, r8, sl
 8005026:	eb49 090b 	adc.w	r9, r9, fp
 800502a:	f04f 0100 	mov.w	r1, #0
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800503a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800503e:	4688      	mov	r8, r1
 8005040:	4691      	mov	r9, r2
 8005042:	eb1a 0508 	adds.w	r5, sl, r8
 8005046:	eb4b 0609 	adc.w	r6, fp, r9
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	0094      	lsls	r4, r2, #2
 800505e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005062:	008b      	lsls	r3, r1, #2
 8005064:	461a      	mov	r2, r3
 8005066:	4623      	mov	r3, r4
 8005068:	4628      	mov	r0, r5
 800506a:	4631      	mov	r1, r6
 800506c:	f7fb fd8e 	bl	8000b8c <__aeabi_uldivmod>
 8005070:	4603      	mov	r3, r0
 8005072:	460c      	mov	r4, r1
 8005074:	461a      	mov	r2, r3
 8005076:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <UART_SetConfig+0x6f4>)
 8005078:	fba3 2302 	umull	r2, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	469b      	mov	fp, r3
 8005086:	f04f 0c00 	mov.w	ip, #0
 800508a:	46d9      	mov	r9, fp
 800508c:	46e2      	mov	sl, ip
 800508e:	eb19 0309 	adds.w	r3, r9, r9
 8005092:	eb4a 040a 	adc.w	r4, sl, sl
 8005096:	4699      	mov	r9, r3
 8005098:	46a2      	mov	sl, r4
 800509a:	eb19 090b 	adds.w	r9, r9, fp
 800509e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050b6:	4689      	mov	r9, r1
 80050b8:	4692      	mov	sl, r2
 80050ba:	eb1b 0509 	adds.w	r5, fp, r9
 80050be:	eb4c 060a 	adc.w	r6, ip, sl
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	0094      	lsls	r4, r2, #2
 80050d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050da:	008b      	lsls	r3, r1, #2
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	4631      	mov	r1, r6
 80050e4:	f7fb fd52 	bl	8000b8c <__aeabi_uldivmod>
 80050e8:	4603      	mov	r3, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <UART_SetConfig+0x6f4>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	; 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <UART_SetConfig+0x6f4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510e:	4498      	add	r8, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	469b      	mov	fp, r3
 8005114:	f04f 0c00 	mov.w	ip, #0
 8005118:	46d9      	mov	r9, fp
 800511a:	46e2      	mov	sl, ip
 800511c:	eb19 0309 	adds.w	r3, r9, r9
 8005120:	eb4a 040a 	adc.w	r4, sl, sl
 8005124:	4699      	mov	r9, r3
 8005126:	46a2      	mov	sl, r4
 8005128:	eb19 090b 	adds.w	r9, r9, fp
 800512c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005144:	4689      	mov	r9, r1
 8005146:	4692      	mov	sl, r2
 8005148:	eb1b 0509 	adds.w	r5, fp, r9
 800514c:	eb4c 060a 	adc.w	r6, ip, sl
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4619      	mov	r1, r3
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f04f 0400 	mov.w	r4, #0
 8005162:	0094      	lsls	r4, r2, #2
 8005164:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005168:	008b      	lsls	r3, r1, #2
 800516a:	461a      	mov	r2, r3
 800516c:	4623      	mov	r3, r4
 800516e:	4628      	mov	r0, r5
 8005170:	4631      	mov	r1, r6
 8005172:	f7fb fd0b 	bl	8000b8c <__aeabi_uldivmod>
 8005176:	4603      	mov	r3, r0
 8005178:	460c      	mov	r4, r1
 800517a:	461a      	mov	r2, r3
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <UART_SetConfig+0x6f4>)
 800517e:	fba3 1302 	umull	r1, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	2164      	movs	r1, #100	; 0x64
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	3332      	adds	r3, #50	; 0x32
 8005190:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <UART_SetConfig+0x6f4>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	f003 020f 	and.w	r2, r3, #15
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4442      	add	r2, r8
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	e7ff      	b.n	80051a6 <UART_SetConfig+0x6e2>
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	40011000 	.word	0x40011000
 80051b4:	40011400 	.word	0x40011400
 80051b8:	51eb851f 	.word	0x51eb851f

080051bc <calloc>:
 80051bc:	4b02      	ldr	r3, [pc, #8]	; (80051c8 <calloc+0xc>)
 80051be:	460a      	mov	r2, r1
 80051c0:	4601      	mov	r1, r0
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	f000 b847 	b.w	8005256 <_calloc_r>
 80051c8:	20000054 	.word	0x20000054

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000054 	.word	0x20000054

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4e0d      	ldr	r6, [pc, #52]	; (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <__libc_init_array+0x3c>)
 80051de:	1ba4      	subs	r4, r4, r6
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2500      	movs	r5, #0
 80051e4:	42a5      	cmp	r5, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4e0b      	ldr	r6, [pc, #44]	; (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	; (800521c <__libc_init_array+0x44>)
 80051ec:	f000 fc3e 	bl	8005a6c <_init>
 80051f0:	1ba4      	subs	r4, r4, r6
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2500      	movs	r5, #0
 80051f6:	42a5      	cmp	r5, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005200:	4798      	blx	r3
 8005202:	3501      	adds	r5, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800520a:	4798      	blx	r3
 800520c:	3501      	adds	r5, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08005bb0 	.word	0x08005bb0
 8005214:	08005bb0 	.word	0x08005bb0
 8005218:	08005bb0 	.word	0x08005bb0
 800521c:	08005bb4 	.word	0x08005bb4

08005220 <free>:
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <free+0xc>)
 8005222:	4601      	mov	r1, r0
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f000 b825 	b.w	8005274 <_free_r>
 800522a:	bf00      	nop
 800522c:	20000054 	.word	0x20000054

08005230 <memcpy>:
 8005230:	b510      	push	{r4, lr}
 8005232:	1e43      	subs	r3, r0, #1
 8005234:	440a      	add	r2, r1
 8005236:	4291      	cmp	r1, r2
 8005238:	d100      	bne.n	800523c <memcpy+0xc>
 800523a:	bd10      	pop	{r4, pc}
 800523c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005244:	e7f7      	b.n	8005236 <memcpy+0x6>

08005246 <memset>:
 8005246:	4402      	add	r2, r0
 8005248:	4603      	mov	r3, r0
 800524a:	4293      	cmp	r3, r2
 800524c:	d100      	bne.n	8005250 <memset+0xa>
 800524e:	4770      	bx	lr
 8005250:	f803 1b01 	strb.w	r1, [r3], #1
 8005254:	e7f9      	b.n	800524a <memset+0x4>

08005256 <_calloc_r>:
 8005256:	b538      	push	{r3, r4, r5, lr}
 8005258:	fb02 f401 	mul.w	r4, r2, r1
 800525c:	4621      	mov	r1, r4
 800525e:	f000 f857 	bl	8005310 <_malloc_r>
 8005262:	4605      	mov	r5, r0
 8005264:	b118      	cbz	r0, 800526e <_calloc_r+0x18>
 8005266:	4622      	mov	r2, r4
 8005268:	2100      	movs	r1, #0
 800526a:	f7ff ffec 	bl	8005246 <memset>
 800526e:	4628      	mov	r0, r5
 8005270:	bd38      	pop	{r3, r4, r5, pc}
	...

08005274 <_free_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4605      	mov	r5, r0
 8005278:	2900      	cmp	r1, #0
 800527a:	d045      	beq.n	8005308 <_free_r+0x94>
 800527c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005280:	1f0c      	subs	r4, r1, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfb8      	it	lt
 8005286:	18e4      	addlt	r4, r4, r3
 8005288:	f000 f8cc 	bl	8005424 <__malloc_lock>
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <_free_r+0x98>)
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	4610      	mov	r0, r2
 8005292:	b933      	cbnz	r3, 80052a2 <_free_r+0x2e>
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	6014      	str	r4, [r2, #0]
 8005298:	4628      	mov	r0, r5
 800529a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800529e:	f000 b8c2 	b.w	8005426 <__malloc_unlock>
 80052a2:	42a3      	cmp	r3, r4
 80052a4:	d90c      	bls.n	80052c0 <_free_r+0x4c>
 80052a6:	6821      	ldr	r1, [r4, #0]
 80052a8:	1862      	adds	r2, r4, r1
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bf04      	itt	eq
 80052ae:	681a      	ldreq	r2, [r3, #0]
 80052b0:	685b      	ldreq	r3, [r3, #4]
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	bf04      	itt	eq
 80052b6:	1852      	addeq	r2, r2, r1
 80052b8:	6022      	streq	r2, [r4, #0]
 80052ba:	6004      	str	r4, [r0, #0]
 80052bc:	e7ec      	b.n	8005298 <_free_r+0x24>
 80052be:	4613      	mov	r3, r2
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	b10a      	cbz	r2, 80052c8 <_free_r+0x54>
 80052c4:	42a2      	cmp	r2, r4
 80052c6:	d9fa      	bls.n	80052be <_free_r+0x4a>
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	1858      	adds	r0, r3, r1
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d10b      	bne.n	80052e8 <_free_r+0x74>
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	4401      	add	r1, r0
 80052d4:	1858      	adds	r0, r3, r1
 80052d6:	4282      	cmp	r2, r0
 80052d8:	6019      	str	r1, [r3, #0]
 80052da:	d1dd      	bne.n	8005298 <_free_r+0x24>
 80052dc:	6810      	ldr	r0, [r2, #0]
 80052de:	6852      	ldr	r2, [r2, #4]
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	4401      	add	r1, r0
 80052e4:	6019      	str	r1, [r3, #0]
 80052e6:	e7d7      	b.n	8005298 <_free_r+0x24>
 80052e8:	d902      	bls.n	80052f0 <_free_r+0x7c>
 80052ea:	230c      	movs	r3, #12
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	e7d3      	b.n	8005298 <_free_r+0x24>
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	1821      	adds	r1, r4, r0
 80052f4:	428a      	cmp	r2, r1
 80052f6:	bf04      	itt	eq
 80052f8:	6811      	ldreq	r1, [r2, #0]
 80052fa:	6852      	ldreq	r2, [r2, #4]
 80052fc:	6062      	str	r2, [r4, #4]
 80052fe:	bf04      	itt	eq
 8005300:	1809      	addeq	r1, r1, r0
 8005302:	6021      	streq	r1, [r4, #0]
 8005304:	605c      	str	r4, [r3, #4]
 8005306:	e7c7      	b.n	8005298 <_free_r+0x24>
 8005308:	bd38      	pop	{r3, r4, r5, pc}
 800530a:	bf00      	nop
 800530c:	200000d8 	.word	0x200000d8

08005310 <_malloc_r>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	1ccd      	adds	r5, r1, #3
 8005314:	f025 0503 	bic.w	r5, r5, #3
 8005318:	3508      	adds	r5, #8
 800531a:	2d0c      	cmp	r5, #12
 800531c:	bf38      	it	cc
 800531e:	250c      	movcc	r5, #12
 8005320:	2d00      	cmp	r5, #0
 8005322:	4606      	mov	r6, r0
 8005324:	db01      	blt.n	800532a <_malloc_r+0x1a>
 8005326:	42a9      	cmp	r1, r5
 8005328:	d903      	bls.n	8005332 <_malloc_r+0x22>
 800532a:	230c      	movs	r3, #12
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	2000      	movs	r0, #0
 8005330:	bd70      	pop	{r4, r5, r6, pc}
 8005332:	f000 f877 	bl	8005424 <__malloc_lock>
 8005336:	4a21      	ldr	r2, [pc, #132]	; (80053bc <_malloc_r+0xac>)
 8005338:	6814      	ldr	r4, [r2, #0]
 800533a:	4621      	mov	r1, r4
 800533c:	b991      	cbnz	r1, 8005364 <_malloc_r+0x54>
 800533e:	4c20      	ldr	r4, [pc, #128]	; (80053c0 <_malloc_r+0xb0>)
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	b91b      	cbnz	r3, 800534c <_malloc_r+0x3c>
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f83d 	bl	80053c4 <_sbrk_r>
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	4629      	mov	r1, r5
 800534e:	4630      	mov	r0, r6
 8005350:	f000 f838 	bl	80053c4 <_sbrk_r>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d124      	bne.n	80053a2 <_malloc_r+0x92>
 8005358:	230c      	movs	r3, #12
 800535a:	6033      	str	r3, [r6, #0]
 800535c:	4630      	mov	r0, r6
 800535e:	f000 f862 	bl	8005426 <__malloc_unlock>
 8005362:	e7e4      	b.n	800532e <_malloc_r+0x1e>
 8005364:	680b      	ldr	r3, [r1, #0]
 8005366:	1b5b      	subs	r3, r3, r5
 8005368:	d418      	bmi.n	800539c <_malloc_r+0x8c>
 800536a:	2b0b      	cmp	r3, #11
 800536c:	d90f      	bls.n	800538e <_malloc_r+0x7e>
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	50cd      	str	r5, [r1, r3]
 8005372:	18cc      	adds	r4, r1, r3
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f856 	bl	8005426 <__malloc_unlock>
 800537a:	f104 000b 	add.w	r0, r4, #11
 800537e:	1d23      	adds	r3, r4, #4
 8005380:	f020 0007 	bic.w	r0, r0, #7
 8005384:	1ac3      	subs	r3, r0, r3
 8005386:	d0d3      	beq.n	8005330 <_malloc_r+0x20>
 8005388:	425a      	negs	r2, r3
 800538a:	50e2      	str	r2, [r4, r3]
 800538c:	e7d0      	b.n	8005330 <_malloc_r+0x20>
 800538e:	428c      	cmp	r4, r1
 8005390:	684b      	ldr	r3, [r1, #4]
 8005392:	bf16      	itet	ne
 8005394:	6063      	strne	r3, [r4, #4]
 8005396:	6013      	streq	r3, [r2, #0]
 8005398:	460c      	movne	r4, r1
 800539a:	e7eb      	b.n	8005374 <_malloc_r+0x64>
 800539c:	460c      	mov	r4, r1
 800539e:	6849      	ldr	r1, [r1, #4]
 80053a0:	e7cc      	b.n	800533c <_malloc_r+0x2c>
 80053a2:	1cc4      	adds	r4, r0, #3
 80053a4:	f024 0403 	bic.w	r4, r4, #3
 80053a8:	42a0      	cmp	r0, r4
 80053aa:	d005      	beq.n	80053b8 <_malloc_r+0xa8>
 80053ac:	1a21      	subs	r1, r4, r0
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 f808 	bl	80053c4 <_sbrk_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d0cf      	beq.n	8005358 <_malloc_r+0x48>
 80053b8:	6025      	str	r5, [r4, #0]
 80053ba:	e7db      	b.n	8005374 <_malloc_r+0x64>
 80053bc:	200000d8 	.word	0x200000d8
 80053c0:	200000dc 	.word	0x200000dc

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4c06      	ldr	r4, [pc, #24]	; (80053e0 <_sbrk_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4605      	mov	r5, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	f7fd fa9a 	bl	8002908 <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000384 	.word	0x20000384

080053e4 <siprintf>:
 80053e4:	b40e      	push	{r1, r2, r3}
 80053e6:	b500      	push	{lr}
 80053e8:	b09c      	sub	sp, #112	; 0x70
 80053ea:	ab1d      	add	r3, sp, #116	; 0x74
 80053ec:	9002      	str	r0, [sp, #8]
 80053ee:	9006      	str	r0, [sp, #24]
 80053f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f4:	4809      	ldr	r0, [pc, #36]	; (800541c <siprintf+0x38>)
 80053f6:	9107      	str	r1, [sp, #28]
 80053f8:	9104      	str	r1, [sp, #16]
 80053fa:	4909      	ldr	r1, [pc, #36]	; (8005420 <siprintf+0x3c>)
 80053fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005400:	9105      	str	r1, [sp, #20]
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	a902      	add	r1, sp, #8
 8005408:	f000 f868 	bl	80054dc <_svfiprintf_r>
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	b01c      	add	sp, #112	; 0x70
 8005414:	f85d eb04 	ldr.w	lr, [sp], #4
 8005418:	b003      	add	sp, #12
 800541a:	4770      	bx	lr
 800541c:	20000054 	.word	0x20000054
 8005420:	ffff0208 	.word	0xffff0208

08005424 <__malloc_lock>:
 8005424:	4770      	bx	lr

08005426 <__malloc_unlock>:
 8005426:	4770      	bx	lr

08005428 <__ssputs_r>:
 8005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	688e      	ldr	r6, [r1, #8]
 800542e:	429e      	cmp	r6, r3
 8005430:	4682      	mov	sl, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4690      	mov	r8, r2
 8005436:	4699      	mov	r9, r3
 8005438:	d837      	bhi.n	80054aa <__ssputs_r+0x82>
 800543a:	898a      	ldrh	r2, [r1, #12]
 800543c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005440:	d031      	beq.n	80054a6 <__ssputs_r+0x7e>
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	6909      	ldr	r1, [r1, #16]
 8005446:	1a6f      	subs	r7, r5, r1
 8005448:	6965      	ldr	r5, [r4, #20]
 800544a:	2302      	movs	r3, #2
 800544c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005450:	fb95 f5f3 	sdiv	r5, r5, r3
 8005454:	f109 0301 	add.w	r3, r9, #1
 8005458:	443b      	add	r3, r7
 800545a:	429d      	cmp	r5, r3
 800545c:	bf38      	it	cc
 800545e:	461d      	movcc	r5, r3
 8005460:	0553      	lsls	r3, r2, #21
 8005462:	d530      	bpl.n	80054c6 <__ssputs_r+0x9e>
 8005464:	4629      	mov	r1, r5
 8005466:	f7ff ff53 	bl	8005310 <_malloc_r>
 800546a:	4606      	mov	r6, r0
 800546c:	b950      	cbnz	r0, 8005484 <__ssputs_r+0x5c>
 800546e:	230c      	movs	r3, #12
 8005470:	f8ca 3000 	str.w	r3, [sl]
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005484:	463a      	mov	r2, r7
 8005486:	6921      	ldr	r1, [r4, #16]
 8005488:	f7ff fed2 	bl	8005230 <memcpy>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	6126      	str	r6, [r4, #16]
 800549a:	6165      	str	r5, [r4, #20]
 800549c:	443e      	add	r6, r7
 800549e:	1bed      	subs	r5, r5, r7
 80054a0:	6026      	str	r6, [r4, #0]
 80054a2:	60a5      	str	r5, [r4, #8]
 80054a4:	464e      	mov	r6, r9
 80054a6:	454e      	cmp	r6, r9
 80054a8:	d900      	bls.n	80054ac <__ssputs_r+0x84>
 80054aa:	464e      	mov	r6, r9
 80054ac:	4632      	mov	r2, r6
 80054ae:	4641      	mov	r1, r8
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	f000 fa93 	bl	80059dc <memmove>
 80054b6:	68a3      	ldr	r3, [r4, #8]
 80054b8:	1b9b      	subs	r3, r3, r6
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	441e      	add	r6, r3
 80054c0:	6026      	str	r6, [r4, #0]
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7dc      	b.n	8005480 <__ssputs_r+0x58>
 80054c6:	462a      	mov	r2, r5
 80054c8:	f000 faa1 	bl	8005a0e <_realloc_r>
 80054cc:	4606      	mov	r6, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d1e2      	bne.n	8005498 <__ssputs_r+0x70>
 80054d2:	6921      	ldr	r1, [r4, #16]
 80054d4:	4650      	mov	r0, sl
 80054d6:	f7ff fecd 	bl	8005274 <_free_r>
 80054da:	e7c8      	b.n	800546e <__ssputs_r+0x46>

080054dc <_svfiprintf_r>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	461d      	mov	r5, r3
 80054e2:	898b      	ldrh	r3, [r1, #12]
 80054e4:	061f      	lsls	r7, r3, #24
 80054e6:	b09d      	sub	sp, #116	; 0x74
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4616      	mov	r6, r2
 80054ee:	d50f      	bpl.n	8005510 <_svfiprintf_r+0x34>
 80054f0:	690b      	ldr	r3, [r1, #16]
 80054f2:	b96b      	cbnz	r3, 8005510 <_svfiprintf_r+0x34>
 80054f4:	2140      	movs	r1, #64	; 0x40
 80054f6:	f7ff ff0b 	bl	8005310 <_malloc_r>
 80054fa:	6020      	str	r0, [r4, #0]
 80054fc:	6120      	str	r0, [r4, #16]
 80054fe:	b928      	cbnz	r0, 800550c <_svfiprintf_r+0x30>
 8005500:	230c      	movs	r3, #12
 8005502:	f8c8 3000 	str.w	r3, [r8]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	e0c8      	b.n	800569e <_svfiprintf_r+0x1c2>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	6163      	str	r3, [r4, #20]
 8005510:	2300      	movs	r3, #0
 8005512:	9309      	str	r3, [sp, #36]	; 0x24
 8005514:	2320      	movs	r3, #32
 8005516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800551a:	2330      	movs	r3, #48	; 0x30
 800551c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005520:	9503      	str	r5, [sp, #12]
 8005522:	f04f 0b01 	mov.w	fp, #1
 8005526:	4637      	mov	r7, r6
 8005528:	463d      	mov	r5, r7
 800552a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800552e:	b10b      	cbz	r3, 8005534 <_svfiprintf_r+0x58>
 8005530:	2b25      	cmp	r3, #37	; 0x25
 8005532:	d13e      	bne.n	80055b2 <_svfiprintf_r+0xd6>
 8005534:	ebb7 0a06 	subs.w	sl, r7, r6
 8005538:	d00b      	beq.n	8005552 <_svfiprintf_r+0x76>
 800553a:	4653      	mov	r3, sl
 800553c:	4632      	mov	r2, r6
 800553e:	4621      	mov	r1, r4
 8005540:	4640      	mov	r0, r8
 8005542:	f7ff ff71 	bl	8005428 <__ssputs_r>
 8005546:	3001      	adds	r0, #1
 8005548:	f000 80a4 	beq.w	8005694 <_svfiprintf_r+0x1b8>
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	4453      	add	r3, sl
 8005550:	9309      	str	r3, [sp, #36]	; 0x24
 8005552:	783b      	ldrb	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 809d 	beq.w	8005694 <_svfiprintf_r+0x1b8>
 800555a:	2300      	movs	r3, #0
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800556c:	931a      	str	r3, [sp, #104]	; 0x68
 800556e:	462f      	mov	r7, r5
 8005570:	2205      	movs	r2, #5
 8005572:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005576:	4850      	ldr	r0, [pc, #320]	; (80056b8 <_svfiprintf_r+0x1dc>)
 8005578:	f7fa fe3a 	bl	80001f0 <memchr>
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	b9d0      	cbnz	r0, 80055b6 <_svfiprintf_r+0xda>
 8005580:	06d9      	lsls	r1, r3, #27
 8005582:	bf44      	itt	mi
 8005584:	2220      	movmi	r2, #32
 8005586:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800558a:	071a      	lsls	r2, r3, #28
 800558c:	bf44      	itt	mi
 800558e:	222b      	movmi	r2, #43	; 0x2b
 8005590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005594:	782a      	ldrb	r2, [r5, #0]
 8005596:	2a2a      	cmp	r2, #42	; 0x2a
 8005598:	d015      	beq.n	80055c6 <_svfiprintf_r+0xea>
 800559a:	9a07      	ldr	r2, [sp, #28]
 800559c:	462f      	mov	r7, r5
 800559e:	2000      	movs	r0, #0
 80055a0:	250a      	movs	r5, #10
 80055a2:	4639      	mov	r1, r7
 80055a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a8:	3b30      	subs	r3, #48	; 0x30
 80055aa:	2b09      	cmp	r3, #9
 80055ac:	d94d      	bls.n	800564a <_svfiprintf_r+0x16e>
 80055ae:	b1b8      	cbz	r0, 80055e0 <_svfiprintf_r+0x104>
 80055b0:	e00f      	b.n	80055d2 <_svfiprintf_r+0xf6>
 80055b2:	462f      	mov	r7, r5
 80055b4:	e7b8      	b.n	8005528 <_svfiprintf_r+0x4c>
 80055b6:	4a40      	ldr	r2, [pc, #256]	; (80056b8 <_svfiprintf_r+0x1dc>)
 80055b8:	1a80      	subs	r0, r0, r2
 80055ba:	fa0b f000 	lsl.w	r0, fp, r0
 80055be:	4318      	orrs	r0, r3
 80055c0:	9004      	str	r0, [sp, #16]
 80055c2:	463d      	mov	r5, r7
 80055c4:	e7d3      	b.n	800556e <_svfiprintf_r+0x92>
 80055c6:	9a03      	ldr	r2, [sp, #12]
 80055c8:	1d11      	adds	r1, r2, #4
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	9103      	str	r1, [sp, #12]
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	db01      	blt.n	80055d6 <_svfiprintf_r+0xfa>
 80055d2:	9207      	str	r2, [sp, #28]
 80055d4:	e004      	b.n	80055e0 <_svfiprintf_r+0x104>
 80055d6:	4252      	negs	r2, r2
 80055d8:	f043 0302 	orr.w	r3, r3, #2
 80055dc:	9207      	str	r2, [sp, #28]
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	783b      	ldrb	r3, [r7, #0]
 80055e2:	2b2e      	cmp	r3, #46	; 0x2e
 80055e4:	d10c      	bne.n	8005600 <_svfiprintf_r+0x124>
 80055e6:	787b      	ldrb	r3, [r7, #1]
 80055e8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ea:	d133      	bne.n	8005654 <_svfiprintf_r+0x178>
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	9203      	str	r2, [sp, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfb8      	it	lt
 80055f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80055fc:	3702      	adds	r7, #2
 80055fe:	9305      	str	r3, [sp, #20]
 8005600:	4d2e      	ldr	r5, [pc, #184]	; (80056bc <_svfiprintf_r+0x1e0>)
 8005602:	7839      	ldrb	r1, [r7, #0]
 8005604:	2203      	movs	r2, #3
 8005606:	4628      	mov	r0, r5
 8005608:	f7fa fdf2 	bl	80001f0 <memchr>
 800560c:	b138      	cbz	r0, 800561e <_svfiprintf_r+0x142>
 800560e:	2340      	movs	r3, #64	; 0x40
 8005610:	1b40      	subs	r0, r0, r5
 8005612:	fa03 f000 	lsl.w	r0, r3, r0
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	4303      	orrs	r3, r0
 800561a:	3701      	adds	r7, #1
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	7839      	ldrb	r1, [r7, #0]
 8005620:	4827      	ldr	r0, [pc, #156]	; (80056c0 <_svfiprintf_r+0x1e4>)
 8005622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005626:	2206      	movs	r2, #6
 8005628:	1c7e      	adds	r6, r7, #1
 800562a:	f7fa fde1 	bl	80001f0 <memchr>
 800562e:	2800      	cmp	r0, #0
 8005630:	d038      	beq.n	80056a4 <_svfiprintf_r+0x1c8>
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <_svfiprintf_r+0x1e8>)
 8005634:	bb13      	cbnz	r3, 800567c <_svfiprintf_r+0x1a0>
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	3307      	adds	r3, #7
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	3308      	adds	r3, #8
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005644:	444b      	add	r3, r9
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	e76d      	b.n	8005526 <_svfiprintf_r+0x4a>
 800564a:	fb05 3202 	mla	r2, r5, r2, r3
 800564e:	2001      	movs	r0, #1
 8005650:	460f      	mov	r7, r1
 8005652:	e7a6      	b.n	80055a2 <_svfiprintf_r+0xc6>
 8005654:	2300      	movs	r3, #0
 8005656:	3701      	adds	r7, #1
 8005658:	9305      	str	r3, [sp, #20]
 800565a:	4619      	mov	r1, r3
 800565c:	250a      	movs	r5, #10
 800565e:	4638      	mov	r0, r7
 8005660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005664:	3a30      	subs	r2, #48	; 0x30
 8005666:	2a09      	cmp	r2, #9
 8005668:	d903      	bls.n	8005672 <_svfiprintf_r+0x196>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c8      	beq.n	8005600 <_svfiprintf_r+0x124>
 800566e:	9105      	str	r1, [sp, #20]
 8005670:	e7c6      	b.n	8005600 <_svfiprintf_r+0x124>
 8005672:	fb05 2101 	mla	r1, r5, r1, r2
 8005676:	2301      	movs	r3, #1
 8005678:	4607      	mov	r7, r0
 800567a:	e7f0      	b.n	800565e <_svfiprintf_r+0x182>
 800567c:	ab03      	add	r3, sp, #12
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4622      	mov	r2, r4
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <_svfiprintf_r+0x1ec>)
 8005684:	a904      	add	r1, sp, #16
 8005686:	4640      	mov	r0, r8
 8005688:	f3af 8000 	nop.w
 800568c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005690:	4681      	mov	r9, r0
 8005692:	d1d6      	bne.n	8005642 <_svfiprintf_r+0x166>
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	065b      	lsls	r3, r3, #25
 8005698:	f53f af35 	bmi.w	8005506 <_svfiprintf_r+0x2a>
 800569c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569e:	b01d      	add	sp, #116	; 0x74
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	4622      	mov	r2, r4
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <_svfiprintf_r+0x1ec>)
 80056ac:	a904      	add	r1, sp, #16
 80056ae:	4640      	mov	r0, r8
 80056b0:	f000 f882 	bl	80057b8 <_printf_i>
 80056b4:	e7ea      	b.n	800568c <_svfiprintf_r+0x1b0>
 80056b6:	bf00      	nop
 80056b8:	08005b74 	.word	0x08005b74
 80056bc:	08005b7a 	.word	0x08005b7a
 80056c0:	08005b7e 	.word	0x08005b7e
 80056c4:	00000000 	.word	0x00000000
 80056c8:	08005429 	.word	0x08005429

080056cc <_printf_common>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	4691      	mov	r9, r2
 80056d2:	461f      	mov	r7, r3
 80056d4:	688a      	ldr	r2, [r1, #8]
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056dc:	4293      	cmp	r3, r2
 80056de:	bfb8      	it	lt
 80056e0:	4613      	movlt	r3, r2
 80056e2:	f8c9 3000 	str.w	r3, [r9]
 80056e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ea:	4606      	mov	r6, r0
 80056ec:	460c      	mov	r4, r1
 80056ee:	b112      	cbz	r2, 80056f6 <_printf_common+0x2a>
 80056f0:	3301      	adds	r3, #1
 80056f2:	f8c9 3000 	str.w	r3, [r9]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	0699      	lsls	r1, r3, #26
 80056fa:	bf42      	ittt	mi
 80056fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005700:	3302      	addmi	r3, #2
 8005702:	f8c9 3000 	strmi.w	r3, [r9]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d107      	bne.n	800571e <_printf_common+0x52>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	f8d9 2000 	ldr.w	r2, [r9]
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	42ab      	cmp	r3, r5
 800571c:	dc28      	bgt.n	8005770 <_printf_common+0xa4>
 800571e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005722:	6822      	ldr	r2, [r4, #0]
 8005724:	3300      	adds	r3, #0
 8005726:	bf18      	it	ne
 8005728:	2301      	movne	r3, #1
 800572a:	0692      	lsls	r2, r2, #26
 800572c:	d42d      	bmi.n	800578a <_printf_common+0xbe>
 800572e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005732:	4639      	mov	r1, r7
 8005734:	4630      	mov	r0, r6
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d020      	beq.n	800577e <_printf_common+0xb2>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	68e5      	ldr	r5, [r4, #12]
 8005740:	f8d9 2000 	ldr.w	r2, [r9]
 8005744:	f003 0306 	and.w	r3, r3, #6
 8005748:	2b04      	cmp	r3, #4
 800574a:	bf08      	it	eq
 800574c:	1aad      	subeq	r5, r5, r2
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	bf0c      	ite	eq
 8005754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005758:	2500      	movne	r5, #0
 800575a:	4293      	cmp	r3, r2
 800575c:	bfc4      	itt	gt
 800575e:	1a9b      	subgt	r3, r3, r2
 8005760:	18ed      	addgt	r5, r5, r3
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	341a      	adds	r4, #26
 8005768:	454d      	cmp	r5, r9
 800576a:	d11a      	bne.n	80057a2 <_printf_common+0xd6>
 800576c:	2000      	movs	r0, #0
 800576e:	e008      	b.n	8005782 <_printf_common+0xb6>
 8005770:	2301      	movs	r3, #1
 8005772:	4652      	mov	r2, sl
 8005774:	4639      	mov	r1, r7
 8005776:	4630      	mov	r0, r6
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d103      	bne.n	8005786 <_printf_common+0xba>
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005786:	3501      	adds	r5, #1
 8005788:	e7c3      	b.n	8005712 <_printf_common+0x46>
 800578a:	18e1      	adds	r1, r4, r3
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	2030      	movs	r0, #48	; 0x30
 8005790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005794:	4422      	add	r2, r4
 8005796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800579a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800579e:	3302      	adds	r3, #2
 80057a0:	e7c5      	b.n	800572e <_printf_common+0x62>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4622      	mov	r2, r4
 80057a6:	4639      	mov	r1, r7
 80057a8:	4630      	mov	r0, r6
 80057aa:	47c0      	blx	r8
 80057ac:	3001      	adds	r0, #1
 80057ae:	d0e6      	beq.n	800577e <_printf_common+0xb2>
 80057b0:	f109 0901 	add.w	r9, r9, #1
 80057b4:	e7d8      	b.n	8005768 <_printf_common+0x9c>
	...

080057b8 <_printf_i>:
 80057b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057c0:	460c      	mov	r4, r1
 80057c2:	7e09      	ldrb	r1, [r1, #24]
 80057c4:	b085      	sub	sp, #20
 80057c6:	296e      	cmp	r1, #110	; 0x6e
 80057c8:	4617      	mov	r7, r2
 80057ca:	4606      	mov	r6, r0
 80057cc:	4698      	mov	r8, r3
 80057ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057d0:	f000 80b3 	beq.w	800593a <_printf_i+0x182>
 80057d4:	d822      	bhi.n	800581c <_printf_i+0x64>
 80057d6:	2963      	cmp	r1, #99	; 0x63
 80057d8:	d036      	beq.n	8005848 <_printf_i+0x90>
 80057da:	d80a      	bhi.n	80057f2 <_printf_i+0x3a>
 80057dc:	2900      	cmp	r1, #0
 80057de:	f000 80b9 	beq.w	8005954 <_printf_i+0x19c>
 80057e2:	2958      	cmp	r1, #88	; 0x58
 80057e4:	f000 8083 	beq.w	80058ee <_printf_i+0x136>
 80057e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80057f0:	e032      	b.n	8005858 <_printf_i+0xa0>
 80057f2:	2964      	cmp	r1, #100	; 0x64
 80057f4:	d001      	beq.n	80057fa <_printf_i+0x42>
 80057f6:	2969      	cmp	r1, #105	; 0x69
 80057f8:	d1f6      	bne.n	80057e8 <_printf_i+0x30>
 80057fa:	6820      	ldr	r0, [r4, #0]
 80057fc:	6813      	ldr	r3, [r2, #0]
 80057fe:	0605      	lsls	r5, r0, #24
 8005800:	f103 0104 	add.w	r1, r3, #4
 8005804:	d52a      	bpl.n	800585c <_printf_i+0xa4>
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6011      	str	r1, [r2, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da03      	bge.n	8005816 <_printf_i+0x5e>
 800580e:	222d      	movs	r2, #45	; 0x2d
 8005810:	425b      	negs	r3, r3
 8005812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005816:	486f      	ldr	r0, [pc, #444]	; (80059d4 <_printf_i+0x21c>)
 8005818:	220a      	movs	r2, #10
 800581a:	e039      	b.n	8005890 <_printf_i+0xd8>
 800581c:	2973      	cmp	r1, #115	; 0x73
 800581e:	f000 809d 	beq.w	800595c <_printf_i+0x1a4>
 8005822:	d808      	bhi.n	8005836 <_printf_i+0x7e>
 8005824:	296f      	cmp	r1, #111	; 0x6f
 8005826:	d020      	beq.n	800586a <_printf_i+0xb2>
 8005828:	2970      	cmp	r1, #112	; 0x70
 800582a:	d1dd      	bne.n	80057e8 <_printf_i+0x30>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	f043 0320 	orr.w	r3, r3, #32
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	e003      	b.n	800583e <_printf_i+0x86>
 8005836:	2975      	cmp	r1, #117	; 0x75
 8005838:	d017      	beq.n	800586a <_printf_i+0xb2>
 800583a:	2978      	cmp	r1, #120	; 0x78
 800583c:	d1d4      	bne.n	80057e8 <_printf_i+0x30>
 800583e:	2378      	movs	r3, #120	; 0x78
 8005840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005844:	4864      	ldr	r0, [pc, #400]	; (80059d8 <_printf_i+0x220>)
 8005846:	e055      	b.n	80058f4 <_printf_i+0x13c>
 8005848:	6813      	ldr	r3, [r2, #0]
 800584a:	1d19      	adds	r1, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6011      	str	r1, [r2, #0]
 8005850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e08c      	b.n	8005976 <_printf_i+0x1be>
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6011      	str	r1, [r2, #0]
 8005860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005864:	bf18      	it	ne
 8005866:	b21b      	sxthne	r3, r3
 8005868:	e7cf      	b.n	800580a <_printf_i+0x52>
 800586a:	6813      	ldr	r3, [r2, #0]
 800586c:	6825      	ldr	r5, [r4, #0]
 800586e:	1d18      	adds	r0, r3, #4
 8005870:	6010      	str	r0, [r2, #0]
 8005872:	0628      	lsls	r0, r5, #24
 8005874:	d501      	bpl.n	800587a <_printf_i+0xc2>
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	e002      	b.n	8005880 <_printf_i+0xc8>
 800587a:	0668      	lsls	r0, r5, #25
 800587c:	d5fb      	bpl.n	8005876 <_printf_i+0xbe>
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	4854      	ldr	r0, [pc, #336]	; (80059d4 <_printf_i+0x21c>)
 8005882:	296f      	cmp	r1, #111	; 0x6f
 8005884:	bf14      	ite	ne
 8005886:	220a      	movne	r2, #10
 8005888:	2208      	moveq	r2, #8
 800588a:	2100      	movs	r1, #0
 800588c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005890:	6865      	ldr	r5, [r4, #4]
 8005892:	60a5      	str	r5, [r4, #8]
 8005894:	2d00      	cmp	r5, #0
 8005896:	f2c0 8095 	blt.w	80059c4 <_printf_i+0x20c>
 800589a:	6821      	ldr	r1, [r4, #0]
 800589c:	f021 0104 	bic.w	r1, r1, #4
 80058a0:	6021      	str	r1, [r4, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d13d      	bne.n	8005922 <_printf_i+0x16a>
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	f040 808e 	bne.w	80059c8 <_printf_i+0x210>
 80058ac:	4665      	mov	r5, ip
 80058ae:	2a08      	cmp	r2, #8
 80058b0:	d10b      	bne.n	80058ca <_printf_i+0x112>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	07db      	lsls	r3, r3, #31
 80058b6:	d508      	bpl.n	80058ca <_printf_i+0x112>
 80058b8:	6923      	ldr	r3, [r4, #16]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	bfde      	ittt	le
 80058c0:	2330      	movle	r3, #48	; 0x30
 80058c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ca:	ebac 0305 	sub.w	r3, ip, r5
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	f8cd 8000 	str.w	r8, [sp]
 80058d4:	463b      	mov	r3, r7
 80058d6:	aa03      	add	r2, sp, #12
 80058d8:	4621      	mov	r1, r4
 80058da:	4630      	mov	r0, r6
 80058dc:	f7ff fef6 	bl	80056cc <_printf_common>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d14d      	bne.n	8005980 <_printf_i+0x1c8>
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	b005      	add	sp, #20
 80058ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058ee:	4839      	ldr	r0, [pc, #228]	; (80059d4 <_printf_i+0x21c>)
 80058f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80058f4:	6813      	ldr	r3, [r2, #0]
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	1d1d      	adds	r5, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6015      	str	r5, [r2, #0]
 80058fe:	060a      	lsls	r2, r1, #24
 8005900:	d50b      	bpl.n	800591a <_printf_i+0x162>
 8005902:	07ca      	lsls	r2, r1, #31
 8005904:	bf44      	itt	mi
 8005906:	f041 0120 	orrmi.w	r1, r1, #32
 800590a:	6021      	strmi	r1, [r4, #0]
 800590c:	b91b      	cbnz	r3, 8005916 <_printf_i+0x15e>
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	f022 0220 	bic.w	r2, r2, #32
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	e7b7      	b.n	800588a <_printf_i+0xd2>
 800591a:	064d      	lsls	r5, r1, #25
 800591c:	bf48      	it	mi
 800591e:	b29b      	uxthmi	r3, r3
 8005920:	e7ef      	b.n	8005902 <_printf_i+0x14a>
 8005922:	4665      	mov	r5, ip
 8005924:	fbb3 f1f2 	udiv	r1, r3, r2
 8005928:	fb02 3311 	mls	r3, r2, r1, r3
 800592c:	5cc3      	ldrb	r3, [r0, r3]
 800592e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005932:	460b      	mov	r3, r1
 8005934:	2900      	cmp	r1, #0
 8005936:	d1f5      	bne.n	8005924 <_printf_i+0x16c>
 8005938:	e7b9      	b.n	80058ae <_printf_i+0xf6>
 800593a:	6813      	ldr	r3, [r2, #0]
 800593c:	6825      	ldr	r5, [r4, #0]
 800593e:	6961      	ldr	r1, [r4, #20]
 8005940:	1d18      	adds	r0, r3, #4
 8005942:	6010      	str	r0, [r2, #0]
 8005944:	0628      	lsls	r0, r5, #24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	d501      	bpl.n	800594e <_printf_i+0x196>
 800594a:	6019      	str	r1, [r3, #0]
 800594c:	e002      	b.n	8005954 <_printf_i+0x19c>
 800594e:	066a      	lsls	r2, r5, #25
 8005950:	d5fb      	bpl.n	800594a <_printf_i+0x192>
 8005952:	8019      	strh	r1, [r3, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	4665      	mov	r5, ip
 800595a:	e7b9      	b.n	80058d0 <_printf_i+0x118>
 800595c:	6813      	ldr	r3, [r2, #0]
 800595e:	1d19      	adds	r1, r3, #4
 8005960:	6011      	str	r1, [r2, #0]
 8005962:	681d      	ldr	r5, [r3, #0]
 8005964:	6862      	ldr	r2, [r4, #4]
 8005966:	2100      	movs	r1, #0
 8005968:	4628      	mov	r0, r5
 800596a:	f7fa fc41 	bl	80001f0 <memchr>
 800596e:	b108      	cbz	r0, 8005974 <_printf_i+0x1bc>
 8005970:	1b40      	subs	r0, r0, r5
 8005972:	6060      	str	r0, [r4, #4]
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	2300      	movs	r3, #0
 800597a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597e:	e7a7      	b.n	80058d0 <_printf_i+0x118>
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	462a      	mov	r2, r5
 8005984:	4639      	mov	r1, r7
 8005986:	4630      	mov	r0, r6
 8005988:	47c0      	blx	r8
 800598a:	3001      	adds	r0, #1
 800598c:	d0aa      	beq.n	80058e4 <_printf_i+0x12c>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	079b      	lsls	r3, r3, #30
 8005992:	d413      	bmi.n	80059bc <_printf_i+0x204>
 8005994:	68e0      	ldr	r0, [r4, #12]
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	4298      	cmp	r0, r3
 800599a:	bfb8      	it	lt
 800599c:	4618      	movlt	r0, r3
 800599e:	e7a3      	b.n	80058e8 <_printf_i+0x130>
 80059a0:	2301      	movs	r3, #1
 80059a2:	464a      	mov	r2, r9
 80059a4:	4639      	mov	r1, r7
 80059a6:	4630      	mov	r0, r6
 80059a8:	47c0      	blx	r8
 80059aa:	3001      	adds	r0, #1
 80059ac:	d09a      	beq.n	80058e4 <_printf_i+0x12c>
 80059ae:	3501      	adds	r5, #1
 80059b0:	68e3      	ldr	r3, [r4, #12]
 80059b2:	9a03      	ldr	r2, [sp, #12]
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	42ab      	cmp	r3, r5
 80059b8:	dcf2      	bgt.n	80059a0 <_printf_i+0x1e8>
 80059ba:	e7eb      	b.n	8005994 <_printf_i+0x1dc>
 80059bc:	2500      	movs	r5, #0
 80059be:	f104 0919 	add.w	r9, r4, #25
 80059c2:	e7f5      	b.n	80059b0 <_printf_i+0x1f8>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1ac      	bne.n	8005922 <_printf_i+0x16a>
 80059c8:	7803      	ldrb	r3, [r0, #0]
 80059ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d2:	e76c      	b.n	80058ae <_printf_i+0xf6>
 80059d4:	08005b85 	.word	0x08005b85
 80059d8:	08005b96 	.word	0x08005b96

080059dc <memmove>:
 80059dc:	4288      	cmp	r0, r1
 80059de:	b510      	push	{r4, lr}
 80059e0:	eb01 0302 	add.w	r3, r1, r2
 80059e4:	d807      	bhi.n	80059f6 <memmove+0x1a>
 80059e6:	1e42      	subs	r2, r0, #1
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d00a      	beq.n	8005a02 <memmove+0x26>
 80059ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80059f4:	e7f8      	b.n	80059e8 <memmove+0xc>
 80059f6:	4283      	cmp	r3, r0
 80059f8:	d9f5      	bls.n	80059e6 <memmove+0xa>
 80059fa:	1881      	adds	r1, r0, r2
 80059fc:	1ad2      	subs	r2, r2, r3
 80059fe:	42d3      	cmn	r3, r2
 8005a00:	d100      	bne.n	8005a04 <memmove+0x28>
 8005a02:	bd10      	pop	{r4, pc}
 8005a04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a0c:	e7f7      	b.n	80059fe <memmove+0x22>

08005a0e <_realloc_r>:
 8005a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a10:	4607      	mov	r7, r0
 8005a12:	4614      	mov	r4, r2
 8005a14:	460e      	mov	r6, r1
 8005a16:	b921      	cbnz	r1, 8005a22 <_realloc_r+0x14>
 8005a18:	4611      	mov	r1, r2
 8005a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a1e:	f7ff bc77 	b.w	8005310 <_malloc_r>
 8005a22:	b922      	cbnz	r2, 8005a2e <_realloc_r+0x20>
 8005a24:	f7ff fc26 	bl	8005274 <_free_r>
 8005a28:	4625      	mov	r5, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2e:	f000 f814 	bl	8005a5a <_malloc_usable_size_r>
 8005a32:	42a0      	cmp	r0, r4
 8005a34:	d20f      	bcs.n	8005a56 <_realloc_r+0x48>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff fc69 	bl	8005310 <_malloc_r>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0f2      	beq.n	8005a2a <_realloc_r+0x1c>
 8005a44:	4631      	mov	r1, r6
 8005a46:	4622      	mov	r2, r4
 8005a48:	f7ff fbf2 	bl	8005230 <memcpy>
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4638      	mov	r0, r7
 8005a50:	f7ff fc10 	bl	8005274 <_free_r>
 8005a54:	e7e9      	b.n	8005a2a <_realloc_r+0x1c>
 8005a56:	4635      	mov	r5, r6
 8005a58:	e7e7      	b.n	8005a2a <_realloc_r+0x1c>

08005a5a <_malloc_usable_size_r>:
 8005a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a5e:	1f18      	subs	r0, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfbc      	itt	lt
 8005a64:	580b      	ldrlt	r3, [r1, r0]
 8005a66:	18c0      	addlt	r0, r0, r3
 8005a68:	4770      	bx	lr
	...

08005a6c <_init>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	bf00      	nop
 8005a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a72:	bc08      	pop	{r3}
 8005a74:	469e      	mov	lr, r3
 8005a76:	4770      	bx	lr

08005a78 <_fini>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	bf00      	nop
 8005a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a7e:	bc08      	pop	{r3}
 8005a80:	469e      	mov	lr, r3
 8005a82:	4770      	bx	lr
